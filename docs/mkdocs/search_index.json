{
    "docs": [
        {
            "location": "/", 
            "text": "webLurch Documentation\n\n\nLurch is a mathematical word processor that checks the reasoning in users'\ndocuments, even mathematical proofs.\n\n\n\n\nCurrent version:\n \nDesktop app for Windows, Mac,\n   and Linux\n\n\nIn development:\n Web version, hosted and document here on this site\n\n   (You can\n   \ntry it live now\n,\n   but it's still incomplete.)\n\n\n\n\nUse the menus at the top to find what you're looking for.\n\n\nSource on GitHub:", 
            "title": "Home"
        }, 
        {
            "location": "/#weblurch-documentation", 
            "text": "Lurch is a mathematical word processor that checks the reasoning in users'\ndocuments, even mathematical proofs.   Current version:   Desktop app for Windows, Mac,\n   and Linux  In development:  Web version, hosted and document here on this site \n   (You can\n    try it live now ,\n   but it's still incomplete.)   Use the menus at the top to find what you're looking for.  Source on GitHub:", 
            "title": " webLurch Documentation"
        }, 
        {
            "location": "/user-guide/", 
            "text": "User Guide\n\n\nThe webLurch User Guide is for aspiring authors of Lurch documents who want\nto learn how to use the software.  It is comprehensive, in the sense that it\nbegins with the most basics steps, and will eventually include all details\nthrough the most advanced uses of Lurch.\n\n\nIt is a work in progress, documenting features as they are built.  Because\nthe web version of Lurch is not yet complete, neither is this User Guide.\nThey will grow together.\n\n\nUse the navigation menu at the top for Authors to access each part of the\nguide, or just keep clicking the \"Next\" button at the top of the page to\nread through it sequentially.\n\n\nThe guide very often includes embedded live examples, which you can edit and\nplay with (and even save their contents in your browser or in your Dropbox).\nThey look like this:\n\n\n\n\nThis is an example embedded Lurch document!\n\n\n\n\n\nTo view an embedded demo using the full app, you have two options.\n\n\n\n\nSelect all the content, copy it, visit\n   \nthe full app\n,\n   and paste.\n\n\n\n\n...or...\n\n\n\n\nFrom the File menu, choose Share document, copy the sharing link,\n   paste it into your browser's URL bar, and press Enter.", 
            "title": "Introduction"
        }, 
        {
            "location": "/user-guide/#user-guide", 
            "text": "The webLurch User Guide is for aspiring authors of Lurch documents who want\nto learn how to use the software.  It is comprehensive, in the sense that it\nbegins with the most basics steps, and will eventually include all details\nthrough the most advanced uses of Lurch.  It is a work in progress, documenting features as they are built.  Because\nthe web version of Lurch is not yet complete, neither is this User Guide.\nThey will grow together.  Use the navigation menu at the top for Authors to access each part of the\nguide, or just keep clicking the \"Next\" button at the top of the page to\nread through it sequentially.  The guide very often includes embedded live examples, which you can edit and\nplay with (and even save their contents in your browser or in your Dropbox).\nThey look like this:   This is an example embedded Lurch document!   To view an embedded demo using the full app, you have two options.   Select all the content, copy it, visit\n    the full app ,\n   and paste.   ...or...   From the File menu, choose Share document, copy the sharing link,\n   paste it into your browser's URL bar, and press Enter.", 
            "title": "User Guide"
        }, 
        {
            "location": "/user-guide/basics-intro/", 
            "text": "Basics: Overview\n\n\nThe \"Basics\" section of the User Guide shows the reader how to use the Lurch\neditor, especially its unique features for extending a human-readable\ndocument with markings that let the computer see the logical reasoning in\nthat document.\n\n\nWho should read this section?\n\n\nAnyone who plans to use Lurch should read this section.\n\n\n\n\nIf you're a student who plans to use Lurch in a course, this section is a\n   must for you.  (In fact, it may be the only section of the User Guide\n   that you need to read.)\n\n\nIf you're new to the software, and want a tour of its capabilities, this\n   section will provide that as well.\n\n\nIf you hope to create new mathematical and/or logical systems within\n   Lurch, you should start with this section, but then read on to the other\n   sections of the User Guide as well.\n\n\n\n\nUse the \"Next\" button above to continue through this section of the User\nGuide.", 
            "title": "Overview"
        }, 
        {
            "location": "/user-guide/basics-intro/#basics-overview", 
            "text": "The \"Basics\" section of the User Guide shows the reader how to use the Lurch\neditor, especially its unique features for extending a human-readable\ndocument with markings that let the computer see the logical reasoning in\nthat document.", 
            "title": "Basics: Overview"
        }, 
        {
            "location": "/user-guide/basics-intro/#who-should-read-this-section", 
            "text": "Anyone who plans to use Lurch should read this section.   If you're a student who plans to use Lurch in a course, this section is a\n   must for you.  (In fact, it may be the only section of the User Guide\n   that you need to read.)  If you're new to the software, and want a tour of its capabilities, this\n   section will provide that as well.  If you hope to create new mathematical and/or logical systems within\n   Lurch, you should start with this section, but then read on to the other\n   sections of the User Guide as well.   Use the \"Next\" button above to continue through this section of the User\nGuide.", 
            "title": "Who should read this section?"
        }, 
        {
            "location": "/user-guide/basics-1/", 
            "text": "Basics, Part 1: The editor\n\n\nThe WYSIWYG word processor on which Lurch is built is\n\nTinyMCE\n.  It is extremely straightforward to use,\nand little documentation is required.  There are a few extensions to the\nstandard configuration that Lurch adds, and those are documented on this\npage.\n\n\nSaving and loading files\n\n\nYou can save your work (and load it again, of course) in one of two ways.\n\n\nDropbox\n\n\nBy default, the Open and Save items on the File menu expect to connect to\nyour \nDropbox\n account.  You will be asked for\npermission to let Lurch access your Dropbox the first time you attempt to\nopen or save a file.  There are advantages and disadvantages to this method:\n\n\n\n\nStorage in the cloud is convenient, and accessible from various\n    devices.\n\n\nThe data is automatically backed up by Dropbox on their end.\n\n\nHowever, this requires you to have a Dropbox account and connect Lurch\n    to it.\n\n\nAlso, our support for Dropbox saving is currently minimal, and will\n    save under a new filename each time.  This is to be fixed in the future.\n\n\n\n\nLocal storage\n\n\nYou can use the Application Settings item on the File menu to switch Lurch\nto use your browser's \"local storage\" as a file storage area, instead of\nDropbopx.\n\n\nAs long as you continue to use the same browser from the same account on the\nsame computer, any files you save will continue to be accessible to you.\nEven if you log out or reboot the computer, the files are kept, for the next\ntime you use Lurch in that browser on that account.\n\n\nIf you use a different browser, account, or computer, you will not see the\nsame files.  They continue to exist in the old browser, even across reboots\nor logins on the computer, but the new browser or computer cannot see them.\n\n\nThe Manage Files item on the File menu lets you reorganize files into\nfolders, within the small filesystem kept in your browser.\n\n\nEntering mathematics\n\n\nThere is a button on the toolbar labeled \nf(x)\n, which allows you to insert\nand edit WYSIWYG mathematics.  It uses \nMathQuill\n as\nits editor.  The interface is very self-explanatory.\n\n\nTo edit a mathematical expression you've already inserted, double-click it,\nand the editor will re-open.\n\n\nTo delete a piece of typeset mathematics, simply backspace over it as you\nwould any other piece of content, or highlight it and press delete.", 
            "title": "Part 1, The editor"
        }, 
        {
            "location": "/user-guide/basics-1/#basics-part-1-the-editor", 
            "text": "The WYSIWYG word processor on which Lurch is built is TinyMCE .  It is extremely straightforward to use,\nand little documentation is required.  There are a few extensions to the\nstandard configuration that Lurch adds, and those are documented on this\npage.", 
            "title": "Basics, Part 1: The editor"
        }, 
        {
            "location": "/user-guide/basics-1/#saving-and-loading-files", 
            "text": "You can save your work (and load it again, of course) in one of two ways.", 
            "title": "Saving and loading files"
        }, 
        {
            "location": "/user-guide/basics-1/#dropbox", 
            "text": "By default, the Open and Save items on the File menu expect to connect to\nyour  Dropbox  account.  You will be asked for\npermission to let Lurch access your Dropbox the first time you attempt to\nopen or save a file.  There are advantages and disadvantages to this method:   Storage in the cloud is convenient, and accessible from various\n    devices.  The data is automatically backed up by Dropbox on their end.  However, this requires you to have a Dropbox account and connect Lurch\n    to it.  Also, our support for Dropbox saving is currently minimal, and will\n    save under a new filename each time.  This is to be fixed in the future.", 
            "title": "Dropbox"
        }, 
        {
            "location": "/user-guide/basics-1/#local-storage", 
            "text": "You can use the Application Settings item on the File menu to switch Lurch\nto use your browser's \"local storage\" as a file storage area, instead of\nDropbopx.  As long as you continue to use the same browser from the same account on the\nsame computer, any files you save will continue to be accessible to you.\nEven if you log out or reboot the computer, the files are kept, for the next\ntime you use Lurch in that browser on that account.  If you use a different browser, account, or computer, you will not see the\nsame files.  They continue to exist in the old browser, even across reboots\nor logins on the computer, but the new browser or computer cannot see them.  The Manage Files item on the File menu lets you reorganize files into\nfolders, within the small filesystem kept in your browser.", 
            "title": "Local storage"
        }, 
        {
            "location": "/user-guide/basics-1/#entering-mathematics", 
            "text": "There is a button on the toolbar labeled  f(x) , which allows you to insert\nand edit WYSIWYG mathematics.  It uses  MathQuill  as\nits editor.  The interface is very self-explanatory.  To edit a mathematical expression you've already inserted, double-click it,\nand the editor will re-open.  To delete a piece of typeset mathematics, simply backspace over it as you\nwould any other piece of content, or highlight it and press delete.", 
            "title": "Entering mathematics"
        }, 
        {
            "location": "/user-guide/basics-2/", 
            "text": "Basics, Part 2: Expressions and canonical form\n\n\nWhat's an expression?\n\n\nA section of text in a Lurch document can be marked as an \nexpression.\n\nLurch pays attention to the content of expressions, trying to interpret them\nas meaningful mathematics (perhaps an algebraic equation, or a statement\nfrom logic or analysis, or perhaps the name of a theorem being cited, for\nexample).\n\n\nInserting expressions\n\n\nYou can create expressions in your document in any of the following ways.\n\n\n\n\nClick the \"expression\" toolbar button to insert an empty expression at\n   the cursor, then begin typing to fill it in.  The toolbar button looks\n   like this:  \n[ ]\n\n\nUse the \"expression\" keyboard shortcut (Ctrl+[, which behaves exactly\n   like the \"expression\" toolbar button) to insert an empty expression, then\n   type.\n\n\nUse a LaTeX-like keyboard shortcut (such as \n\\[\n followed by the\n   spacebar) to open a new expression, with the cursor placed immediately\n   inside.\n\n\nSelect the section of the document (usually very short) that the user\n   wishes to convert into an expression, then click the \"expression\"\n   toolbar button so that the software will then begin treating the\n   selection as an expression.\n\n\nSame as the previous, except using the keyboard shortcut instead of the\n   toolbar button.\n\n\nExpression boundaries can be dragged using the mouse.  This is useful\n   when you have formed an expression, but then find that it should have\n   enclosed a bit more or less text.  Especially if you have\n   decorated/attributed the expression (as described later in this User\n   Guide) and do not wish to repeat that work.  Dragging an expression's\n   boundaries in a way that creates invalid nesting (one boundary inside\n   another expression, the other not) will result in removal of the\n   offending expression.\n\n\n\n\nCanonical form\n\n\nA few quick foundational definitions:\n\n\n\n\nAn \natomic expression\n is one with no other expressions inside it.\n\n\nA \ncompound expression\n is one with at least one expression inside it.\n\n\nContent not inside an atomic expression is informally called \nflarf,\n\n    to signify its lack of importance:\n\n\nThe \ncannoical form\n of an expression is obtained by deleting all flarf.\n\n\n\n\nHere are some examples of these definitions.\n\n\n\n\nExample atomic expression: \nHello.\n  (Click to place your cursor\n    inside it to see the bubble UI appear around it.  Bubbles are shown to\n    highlight expressions only when your cursor is inside them.)\n\n\nExample compound expression: \nan inner expression\n\n    \nanother inner expression\n  (Try placing your cursor at various\n    spots within the inner and outer expressions.)\n\n\nThis text is flarf.\n    \nSo is this text, \nbut this is not flarf.\n\n\nThe canonical form of the expression in the previous paragraph\n    is therefore \nbut this is not flarf.", 
            "title": "Part 2, Expressions and canonical form"
        }, 
        {
            "location": "/user-guide/basics-2/#basics-part-2-expressions-and-canonical-form", 
            "text": "", 
            "title": "Basics, Part 2: Expressions and canonical form"
        }, 
        {
            "location": "/user-guide/basics-2/#whats-an-expression", 
            "text": "A section of text in a Lurch document can be marked as an  expression. \nLurch pays attention to the content of expressions, trying to interpret them\nas meaningful mathematics (perhaps an algebraic equation, or a statement\nfrom logic or analysis, or perhaps the name of a theorem being cited, for\nexample).", 
            "title": "What's an expression?"
        }, 
        {
            "location": "/user-guide/basics-2/#inserting-expressions", 
            "text": "You can create expressions in your document in any of the following ways.   Click the \"expression\" toolbar button to insert an empty expression at\n   the cursor, then begin typing to fill it in.  The toolbar button looks\n   like this:   [ ]  Use the \"expression\" keyboard shortcut (Ctrl+[, which behaves exactly\n   like the \"expression\" toolbar button) to insert an empty expression, then\n   type.  Use a LaTeX-like keyboard shortcut (such as  \\[  followed by the\n   spacebar) to open a new expression, with the cursor placed immediately\n   inside.  Select the section of the document (usually very short) that the user\n   wishes to convert into an expression, then click the \"expression\"\n   toolbar button so that the software will then begin treating the\n   selection as an expression.  Same as the previous, except using the keyboard shortcut instead of the\n   toolbar button.  Expression boundaries can be dragged using the mouse.  This is useful\n   when you have formed an expression, but then find that it should have\n   enclosed a bit more or less text.  Especially if you have\n   decorated/attributed the expression (as described later in this User\n   Guide) and do not wish to repeat that work.  Dragging an expression's\n   boundaries in a way that creates invalid nesting (one boundary inside\n   another expression, the other not) will result in removal of the\n   offending expression.", 
            "title": "Inserting expressions"
        }, 
        {
            "location": "/user-guide/basics-2/#canonical-form", 
            "text": "A few quick foundational definitions:   An  atomic expression  is one with no other expressions inside it.  A  compound expression  is one with at least one expression inside it.  Content not inside an atomic expression is informally called  flarf, \n    to signify its lack of importance:  The  cannoical form  of an expression is obtained by deleting all flarf.   Here are some examples of these definitions.   Example atomic expression:  Hello.   (Click to place your cursor\n    inside it to see the bubble UI appear around it.  Bubbles are shown to\n    highlight expressions only when your cursor is inside them.)  Example compound expression:  an inner expression \n     another inner expression   (Try placing your cursor at various\n    spots within the inner and outer expressions.)  This text is flarf.\n     So is this text,  but this is not flarf.  The canonical form of the expression in the previous paragraph\n    is therefore  but this is not flarf.", 
            "title": "Canonical form"
        }, 
        {
            "location": "/user-guide/basics-3/", 
            "text": "Basics, Part 3: Connections and attributes\n\n\nAttributes\n\n\nEach expression has a set of attributes, which is a list of key-value pairs.\nBy default, each expressions set of attributes is empty.\n\n\nTo use one expression as an expression for another, you must connect the\nattribute to its target with an arrow.  Do so as follows.\n\n\n\n\nPlace your cursor in the expression that will become an attribute.\n\n\nClick the connections button on the toolbar (with the \n icon).\n\n\nClick to place your cursor in the target expression.\n\n\n\n\nSee the examples below.\n\n\n\n\nA connection has been created for you here:\n\n\nFrom this \nsource\n\n    to this \ntarget\n.\n\n\nPlace your cursor in either expression to see the connection.\n\n\nNow try it yourself.  Form a connection here:\n\n\nMake this the source,\n and \nmake this the target\n.\n\n\n\n\n\nKeys\n\n\nIn the examples above, all the attributes have the word \"label\" on their\narrows.  That is the \nkey\n for the attribute, and the source expression is\nthe attribute's \nvalue.\n  So for example, the \"target\" expression has an\nattribute with key \"label\" and value \"source.\"\n\n\nYou can change this in a few ways.\n\n\n\n\nTo change where the key is shown:\n\n\nRight-click the attribute expression and choose:\n  Move \"label\" onto attribute.  This will move the word \"label\" from the\n  arrow onto the top of the attribute bubble itself.\n\n\nTo undo that action, right-click again and choose to move it back, or\n  click the word \"label\" where it sits on top of the attribute bubble.\n\n\n\n\n\n\nTo change the key:\n\n\nIf the key is shown on the arrow, right-click the expression and\n  choose: Change attribute key to...\n\n\nIf the key is shown on top of the attribute bubble, click it and make\n  the same choice.\n\n\n\n\n\n\n\n\nTry each of these methods in the example Lurch document above.\n\n\nAttributes summary\n\n\nYou can hide an attribute inside the expression it modifies.  Right-click\nthe attribute and choose \"Hide this attribute.\"\n\n\nTo reveal an attribute, right-click the expression into which it was hidden,\nand choose \"Attributes...\"  A dialog will appear listing all attributes of\nthe expression, both hidden and visible.  You can hide/show them, edit the\nkeys, edit the values of any atomic attribute values, delete attributes, and\nadd new ones from that dialog.\n\n\nHere is an example of a single target with many attributes attached to it.\nRight-click the target and ask to see its attributes summary.  (Notice the\none hidden attribute!)\n\n\n\n\nTarget expression:\n\n\nAbraham Lincoln\nWhig\n\n\nSome attributes attached to it:\n\n\n\n    \nmale\n\n    \nlawyer\n\n    \nstate representative\n\n    \npresident", 
            "title": "Part 3, Connections and attributes"
        }, 
        {
            "location": "/user-guide/basics-3/#basics-part-3-connections-and-attributes", 
            "text": "", 
            "title": "Basics, Part 3: Connections and attributes"
        }, 
        {
            "location": "/user-guide/basics-3/#attributes", 
            "text": "Each expression has a set of attributes, which is a list of key-value pairs.\nBy default, each expressions set of attributes is empty.  To use one expression as an expression for another, you must connect the\nattribute to its target with an arrow.  Do so as follows.   Place your cursor in the expression that will become an attribute.  Click the connections button on the toolbar (with the   icon).  Click to place your cursor in the target expression.   See the examples below.   A connection has been created for you here:  From this  source \n    to this  target .  Place your cursor in either expression to see the connection.  Now try it yourself.  Form a connection here:  Make this the source,  and  make this the target .", 
            "title": "Attributes"
        }, 
        {
            "location": "/user-guide/basics-3/#keys", 
            "text": "In the examples above, all the attributes have the word \"label\" on their\narrows.  That is the  key  for the attribute, and the source expression is\nthe attribute's  value.   So for example, the \"target\" expression has an\nattribute with key \"label\" and value \"source.\"  You can change this in a few ways.   To change where the key is shown:  Right-click the attribute expression and choose:\n  Move \"label\" onto attribute.  This will move the word \"label\" from the\n  arrow onto the top of the attribute bubble itself.  To undo that action, right-click again and choose to move it back, or\n  click the word \"label\" where it sits on top of the attribute bubble.    To change the key:  If the key is shown on the arrow, right-click the expression and\n  choose: Change attribute key to...  If the key is shown on top of the attribute bubble, click it and make\n  the same choice.     Try each of these methods in the example Lurch document above.", 
            "title": "Keys"
        }, 
        {
            "location": "/user-guide/basics-3/#attributes-summary", 
            "text": "You can hide an attribute inside the expression it modifies.  Right-click\nthe attribute and choose \"Hide this attribute.\"  To reveal an attribute, right-click the expression into which it was hidden,\nand choose \"Attributes...\"  A dialog will appear listing all attributes of\nthe expression, both hidden and visible.  You can hide/show them, edit the\nkeys, edit the values of any atomic attribute values, delete attributes, and\nadd new ones from that dialog.  Here is an example of a single target with many attributes attached to it.\nRight-click the target and ask to see its attributes summary.  (Notice the\none hidden attribute!)   Target expression:  Abraham Lincoln Whig  Some attributes attached to it:  \n     male \n     lawyer \n     state representative \n     president", 
            "title": "Attributes summary"
        }, 
        {
            "location": "/user-guide/basics-4/", 
            "text": "Basics, Part 4: Steps and Reasons\n\n\nThe purpose of Lurch\n\n\nLurch's purpose is that if users type mathematical reasoning into a\ndocument, the software should be able to check that reasoning, giving\nimmediate and helpful feedback about correct and incorrect steps.\n\n\nThe primary way this happens is that users tell Lurch the reason for each\nstep of work they do, and Lurch looks up the reason and checks to see\nwhether it justifies the step of work, as the user claims it does.  Lurch\nappends an icon to the end of the step of work to show the results of\nvalidation (\n for correct,\n\n for incorrect).  Users can hover their\nmouse over the icon to get more feedback.\n\n\nHow to create a step of work\n\n\nIt's a bit early to discuss how to write a step of work, since this User\nGuide has not yet covered even how to write a mathematical expression in\nLurch!  But for now, let's pretend that Lurch understands ordinary\nmathematical notation, including symbols like + and = and so on.\n\n\n\n\nWrite an expression that contains the step of work.\n    For instance, in a proof, you might write, \"And so we see that x+1=5.\"\n    You would mark the x+1=5 as an expression.\n\n\nSpecify your reason as a \"reason\" attribute.  That is, create a new\n    expression, attach it as an attribute to the first, and change it from\n    being a label to being a reason.\n\n\n\n\nHere is an example.  Because there is no Theorem 6.1 defined here, Lurch\nmarks the step of work invalid, but that's good -- validation is happening,\nand correctly!\n\n\n\n\nLet's pretend we're part way through a proof or computation.\n\n\n...And so we can clearly see that \nx+1=5\n,\n    by applying \nTheorem 6.1\n.\n\n\nPlace your cursor in either expression to see the connection.\n\n\n\n\n\nWhere do reasons come from?\n\n\nThe step of work in the example above was marked invalid because there is no\nTheorem 6.1, but the user cited it as a reason as if there were.  Anything\nyou can cite as a reason we call a \nrule.\n  This includes mathematical\ntheorems, axioms from a particular mathematical field, and rules of logic.\n\n\nIn order for a rule to be usable, it must exist either\n\n\n\n\nin the same document as where it's used, earlier than those steps which\n    use it, or\n\n\nin a separate document that the current document cites as a source of\n    rules it wants to use.\n\n\n\n\nIn later parts of the User Guide, we'll see how to define our own rules in\nour documents.  For now, let's see how to import rules another author wrote\nin another document.  That's the topic of\n\nthe next part in this tutorial\n.", 
            "title": "Part 4, Steps and Reasons"
        }, 
        {
            "location": "/user-guide/basics-4/#basics-part-4-steps-and-reasons", 
            "text": "", 
            "title": "Basics, Part 4: Steps and Reasons"
        }, 
        {
            "location": "/user-guide/basics-4/#the-purpose-of-lurch", 
            "text": "Lurch's purpose is that if users type mathematical reasoning into a\ndocument, the software should be able to check that reasoning, giving\nimmediate and helpful feedback about correct and incorrect steps.  The primary way this happens is that users tell Lurch the reason for each\nstep of work they do, and Lurch looks up the reason and checks to see\nwhether it justifies the step of work, as the user claims it does.  Lurch\nappends an icon to the end of the step of work to show the results of\nvalidation (  for correct,  for incorrect).  Users can hover their\nmouse over the icon to get more feedback.", 
            "title": "The purpose of Lurch"
        }, 
        {
            "location": "/user-guide/basics-4/#how-to-create-a-step-of-work", 
            "text": "It's a bit early to discuss how to write a step of work, since this User\nGuide has not yet covered even how to write a mathematical expression in\nLurch!  But for now, let's pretend that Lurch understands ordinary\nmathematical notation, including symbols like + and = and so on.   Write an expression that contains the step of work.\n    For instance, in a proof, you might write, \"And so we see that x+1=5.\"\n    You would mark the x+1=5 as an expression.  Specify your reason as a \"reason\" attribute.  That is, create a new\n    expression, attach it as an attribute to the first, and change it from\n    being a label to being a reason.   Here is an example.  Because there is no Theorem 6.1 defined here, Lurch\nmarks the step of work invalid, but that's good -- validation is happening,\nand correctly!   Let's pretend we're part way through a proof or computation.  ...And so we can clearly see that  x+1=5 ,\n    by applying  Theorem 6.1 .  Place your cursor in either expression to see the connection.", 
            "title": "How to create a step of work"
        }, 
        {
            "location": "/user-guide/basics-4/#where-do-reasons-come-from", 
            "text": "The step of work in the example above was marked invalid because there is no\nTheorem 6.1, but the user cited it as a reason as if there were.  Anything\nyou can cite as a reason we call a  rule.   This includes mathematical\ntheorems, axioms from a particular mathematical field, and rules of logic.  In order for a rule to be usable, it must exist either   in the same document as where it's used, earlier than those steps which\n    use it, or  in a separate document that the current document cites as a source of\n    rules it wants to use.   In later parts of the User Guide, we'll see how to define our own rules in\nour documents.  For now, let's see how to import rules another author wrote\nin another document.  That's the topic of the next part in this tutorial .", 
            "title": "Where do reasons come from?"
        }, 
        {
            "location": "/user-guide/basics-5/", 
            "text": "Basics, Part 5: Rules in Dependencies\n\n\nIn \nthe previous part\n, we saw how to apply a rule to a step of\nwork, but it was unsatisfying because we didn't have access to any rules!\n\n\nThe most common way to access rules is by telling Lurch that the document\nyou're working on wants to use a set of rules contained in another\ndocument (often one written by an instructor).  Doing so does not change\nthe appearance of your document at all, but invisibly imports those rules so\nthat you can use them.\n\n\nIn such a situation, the imported document is a \ndependency\n of the current\ndocument.  Documents can have zero or more dependencies.  The dependency is\nalso sometimes called a \nlibrary,\n because it contains a set of rules that\nusers want to reference.\n\n\nIn the document below, a dependency has been invisibly imported for you.\nIt contains just one rule, called \"EE\" that judges a step of work\ncorrect if it contains two E's in a row.  For example, \"peek\" would be\ncorrect, but \"poke\" would not.\n\n\nTry applying the \"EE\" rule to the two expressions in the document.  Be sure\nto correctly capitalize the rule name.\n\n\n\n\n\n  \nvar valid = /ee/i.test( conclusion.value );\n  var verb = valid ? 'contains' : 'does not contain';\n  return {\n    result : valid ? 'valid' : 'invalid',\n    message : 'The expression ' + verb + ' two successive E\\'s.'\n  }\n\n  \nEE\n\n  \nyes\n\n  \nJavaScript\n\n\n\n\nJustify both of these with the EE rule:\n\n\n\n  \npeek\n\n  \npoke", 
            "title": "Part 5, Rules in Dependencies"
        }, 
        {
            "location": "/user-guide/basics-5/#basics-part-5-rules-in-dependencies", 
            "text": "In  the previous part , we saw how to apply a rule to a step of\nwork, but it was unsatisfying because we didn't have access to any rules!  The most common way to access rules is by telling Lurch that the document\nyou're working on wants to use a set of rules contained in another\ndocument (often one written by an instructor).  Doing so does not change\nthe appearance of your document at all, but invisibly imports those rules so\nthat you can use them.  In such a situation, the imported document is a  dependency  of the current\ndocument.  Documents can have zero or more dependencies.  The dependency is\nalso sometimes called a  library,  because it contains a set of rules that\nusers want to reference.  In the document below, a dependency has been invisibly imported for you.\nIt contains just one rule, called \"EE\" that judges a step of work\ncorrect if it contains two E's in a row.  For example, \"peek\" would be\ncorrect, but \"poke\" would not.  Try applying the \"EE\" rule to the two expressions in the document.  Be sure\nto correctly capitalize the rule name.   \n   var valid = /ee/i.test( conclusion.value );\n  var verb = valid ? 'contains' : 'does not contain';\n  return {\n    result : valid ? 'valid' : 'invalid',\n    message : 'The expression ' + verb + ' two successive E\\'s.'\n  } \n   EE \n   yes \n   JavaScript   Justify both of these with the EE rule:  \n   peek \n   poke", 
            "title": "Basics, Part 5: Rules in Dependencies"
        }, 
        {
            "location": "/user-guide/basics-6/", 
            "text": "Basics, Part 6: Connecting Dependencies\n\n\nSaving a document for use as a dependency\n\n\nBefore you can tell Lurch about a library you want to use as a dependency in\na document, you must have the library somewhere you can access it.  Lurch\nsupports (for now) two locations where you can store libraries.\n\n\n\n\nthe local storage filesystem in your browser (which we learned about in\n   \nthe first part of this tutorial\n)\n\n\na global wiki of Lurch documents (which is not yet publicly available,\n   but will become so as the project matures)\n\n\n\n\nTherefore we will do an example in which you store a library in your\nbrowser's local storage, and import it into another document from there.\nIf you're using Dropbox for storage, temporarily switch over to using your\nbrowser's local storage, as described in\n\nthe first part of this tutorial\n.\n\n\nI'll provide you a document to save.  Here it is.  Use the File menu in this\nembedded Lurch app to save the document under any name you choose, such as\n\"example library.lurch\".\n\n\n\n\nThis document defines one rule, using JavaScript.\n\n\nDon't worry about the code for now; you just have to save the file!\n\n\nThis silly rule judges everything to be valid.\n   We'll name it \nenthusiasm\n.\n\n\nyes\nJavaScript\nreturn { result : 'valid', message : 'Heck yeah!' }\n\n\n\n\n\nCiting a library from a document\n\n\nOnce you've saved the above document, you can then import it into another\ndocument.  Try following these steps:\n\n\n\n\nIn the same embedded Lurch window, above, choose File, then New.\n\n\nIn the new document, choose File, then Document Settings.\n\n\nClick the button to add a file dependency.\n\n\nChoose the file you just saved, with the enthusiasm rule in it.\n\n\nClick Save to store those settings in the document.\n\n\nWrite any expression in the new, empty document.\n\n\nApply to it a reason whose contents are \"enthusiasm\" (lower case, no\n    quotation marks).\n\n\n\n\nYou should see the step judged correct, and if you hover your mouse over the\ngreen check mark, Lurch should give you an enthusiastic affirmation of your\nwork.", 
            "title": "Part 6, Connecting Dependencies"
        }, 
        {
            "location": "/user-guide/basics-6/#basics-part-6-connecting-dependencies", 
            "text": "", 
            "title": "Basics, Part 6: Connecting Dependencies"
        }, 
        {
            "location": "/user-guide/basics-6/#saving-a-document-for-use-as-a-dependency", 
            "text": "Before you can tell Lurch about a library you want to use as a dependency in\na document, you must have the library somewhere you can access it.  Lurch\nsupports (for now) two locations where you can store libraries.   the local storage filesystem in your browser (which we learned about in\n    the first part of this tutorial )  a global wiki of Lurch documents (which is not yet publicly available,\n   but will become so as the project matures)   Therefore we will do an example in which you store a library in your\nbrowser's local storage, and import it into another document from there.\nIf you're using Dropbox for storage, temporarily switch over to using your\nbrowser's local storage, as described in the first part of this tutorial .  I'll provide you a document to save.  Here it is.  Use the File menu in this\nembedded Lurch app to save the document under any name you choose, such as\n\"example library.lurch\".   This document defines one rule, using JavaScript.  Don't worry about the code for now; you just have to save the file!  This silly rule judges everything to be valid.\n   We'll name it  enthusiasm .  yes JavaScript return { result : 'valid', message : 'Heck yeah!' }", 
            "title": "Saving a document for use as a dependency"
        }, 
        {
            "location": "/user-guide/basics-6/#citing-a-library-from-a-document", 
            "text": "Once you've saved the above document, you can then import it into another\ndocument.  Try following these steps:   In the same embedded Lurch window, above, choose File, then New.  In the new document, choose File, then Document Settings.  Click the button to add a file dependency.  Choose the file you just saved, with the enthusiasm rule in it.  Click Save to store those settings in the document.  Write any expression in the new, empty document.  Apply to it a reason whose contents are \"enthusiasm\" (lower case, no\n    quotation marks).   You should see the step judged correct, and if you hover your mouse over the\ngreen check mark, Lurch should give you an enthusiastic affirmation of your\nwork.", 
            "title": "Citing a library from a document"
        }, 
        {
            "location": "/user-guide/tech-intro/", 
            "text": "Technicalities: Overview\n\n\nThe \"Technicalities\" section of the User Guide introduces features of Lurch\nthat form the foundation of validation, for those who need to dig into deep\ncustomization of how Lurch processes your files.\n\n\nWho should read this section?\n\n\nOnly users who are comfortable with programming and who want to know how\nLurch works on a deeper level need to read this section.  It will empower\nyou to write code in Lurch documents that impact how documents are\nvalidated.\n\n\nUse the \"Next\" button above to continue through this section of the User\nGuide.", 
            "title": "Overview"
        }, 
        {
            "location": "/user-guide/tech-intro/#technicalities-overview", 
            "text": "The \"Technicalities\" section of the User Guide introduces features of Lurch\nthat form the foundation of validation, for those who need to dig into deep\ncustomization of how Lurch processes your files.", 
            "title": "Technicalities: Overview"
        }, 
        {
            "location": "/user-guide/tech-intro/#who-should-read-this-section", 
            "text": "Only users who are comfortable with programming and who want to know how\nLurch works on a deeper level need to read this section.  It will empower\nyou to write code in Lurch documents that impact how documents are\nvalidated.  Use the \"Next\" button above to continue through this section of the User\nGuide.", 
            "title": "Who should read this section?"
        }, 
        {
            "location": "/user-guide/tech-1/", 
            "text": "Technicalities, Part 1: Code attributes\n\n\nCreating code attributes\n\n\nTo tell Lurch that an atomic expression contains computer code, give it an\nattribute with key \"code\" and whose value is the language in which the code\nis written.  The only language supported at present is JavaScript.\n\n\nExample:\n\n\n\n\nThe code \nconsole.log( \"Hello!\" );\n\nis valid \njavascript\n.\n\n\n\n\n\nEditing code\n\n\nWhen you right-click an expression that has a code attribute, one of the\nchoices on the context menu is \"Edit as code.\"  Choosing it launches a code\neditor, and any changes you make can be saved or discarded.  Saving them\nupdates the expression in the document with the new contents of the editor.\n\n\nTry it now in the example above.\n\n\nSuppose you were to mark an expression as code by attaching a code attribute\nto it, then used the expression itself as an attribute to yet another\nexpression, and finally hid the code expression within that final\nexpression.  If you examined the attributes summary dialog for that final\nexpression, you would find an edit link next to the hidden code that would\nlet you launch the same code-editing dialog directly from there.", 
            "title": "Part 1, Code attributes"
        }, 
        {
            "location": "/user-guide/tech-1/#technicalities-part-1-code-attributes", 
            "text": "", 
            "title": "Technicalities, Part 1: Code attributes"
        }, 
        {
            "location": "/user-guide/tech-1/#creating-code-attributes", 
            "text": "To tell Lurch that an atomic expression contains computer code, give it an\nattribute with key \"code\" and whose value is the language in which the code\nis written.  The only language supported at present is JavaScript.  Example:   The code  console.log( \"Hello!\" ); \nis valid  javascript .", 
            "title": "Creating code attributes"
        }, 
        {
            "location": "/user-guide/tech-1/#editing-code", 
            "text": "When you right-click an expression that has a code attribute, one of the\nchoices on the context menu is \"Edit as code.\"  Choosing it launches a code\neditor, and any changes you make can be saved or discarded.  Saving them\nupdates the expression in the document with the new contents of the editor.  Try it now in the example above.  Suppose you were to mark an expression as code by attaching a code attribute\nto it, then used the expression itself as an attribute to yet another\nexpression, and finally hid the code expression within that final\nexpression.  If you examined the attributes summary dialog for that final\nexpression, you would find an edit link next to the hidden code that would\nlet you launch the same code-editing dialog directly from there.", 
            "title": "Editing code"
        }, 
        {
            "location": "/user-guide/tech-2/", 
            "text": "Technicalities, Part 2: Code-based Rules\n\n\nA code-based rule is an atomic expression in the document containing code\nthat can evaluate steps of a user's work, and return data about the validity\nof that step of work (including not only whether the step is valid, but also\nan explanation to the user about why).\n\n\nWriting a code-based rule\n\n\nTo write a code-based rule, follow these steps.\n\n\n\n\nCreate an atomic expression that will contain the code.\n\n\nGive it an attribute with key \"code\" and with value \"JavaScript\",\n    as in the previous page of this User Guide.\n\n\nGive it an attribute with key \"rule\" and with any value, such as \"yes\".\n\n\nGive it a label, so that users can cite it.  For instance, if your rule\n    will judge simple statements of arithmetic, you might label your rule\n    \"simple arithmetic\", so that users can say that a step of their work is\n    true by simple arithmetic.\n\n\nWrite code that will be used as the body of a function.  The function\n    takes two parameters, \nconclusion\n and \npremises\n.  The first is an\n    OpenMath structure about the expression to be judged.  The second is an\n    array of such structures, for each cited premise.  Your code should\n    return an object with two members:\n\n\nresult\n - a string, one of \"valid\", \"invalid\", or \"intermediate\"\n\n\nmessage\n - a string, a short message to show to users who hover over\n   the validation icon\n\n\n\n\n\n\n\n\nExample\n\n\nHere is a code-based rule that judges whether an atomic expression contains\nthe letter x.  If so, it calls that expression valid; if not, then invalid.\n(Surely, this rule is useless, except as a simple example.)\n\n\n\n\nI'll call this the \nX rule\n:\n\n\njavascript\nyes\nvar hasX =\n    /x/i.test( conclusion.value );\n\nreturn {\n\n\nresult : hasX ? 'valid' : 'invalid',\n\n\nmessage : hasX ? 'This contains an X.' : 'This contains no X.'\n\n};\n\n\nNow let's try using the rule, once correctly, and once incorrectly.\n\n\nI think that \nexcellent\n should be marked valid\n    and \nawesome\n should be marked invalid by the\n    \nX rule\n.\n\n\n\n\n\nEditing and debugging\n\n\nIf you edit the document, the validation results should update in real time\nin response to your edits.  For instance, if you change the rule citation\nto \"Y rule\", both expressions citing it should be marked invalid because\nthere is no such rule.  You can even edit the code of the rule; if it is in\na syntactically invalid state, anything citing it will be marked invalid,\nwith an internal rule error as the explanation.\n\n\nWhen writing the code for a rule, don't forget that you can right-click the\nrule and choose \"Edit as code\" to use an editor with syntax highlighting.\nRules are evaluated in a separate thread without access to the DOM or the\nbrowser window, so you cannot harm the Lurch application itself.  But you\ncan use the \nconsole.log\n command to dump data to the console and inspect\nits structure.\n\n\nThe conclusion and premise objects are both instances of the \nOMNode\n class\ndefined in \nthis source code\nfile\n.\nDocumentation on the class is included in the source code itself.", 
            "title": "Part 2, Code-based rules"
        }, 
        {
            "location": "/user-guide/tech-2/#technicalities-part-2-code-based-rules", 
            "text": "A code-based rule is an atomic expression in the document containing code\nthat can evaluate steps of a user's work, and return data about the validity\nof that step of work (including not only whether the step is valid, but also\nan explanation to the user about why).", 
            "title": "Technicalities, Part 2: Code-based Rules"
        }, 
        {
            "location": "/user-guide/tech-2/#writing-a-code-based-rule", 
            "text": "To write a code-based rule, follow these steps.   Create an atomic expression that will contain the code.  Give it an attribute with key \"code\" and with value \"JavaScript\",\n    as in the previous page of this User Guide.  Give it an attribute with key \"rule\" and with any value, such as \"yes\".  Give it a label, so that users can cite it.  For instance, if your rule\n    will judge simple statements of arithmetic, you might label your rule\n    \"simple arithmetic\", so that users can say that a step of their work is\n    true by simple arithmetic.  Write code that will be used as the body of a function.  The function\n    takes two parameters,  conclusion  and  premises .  The first is an\n    OpenMath structure about the expression to be judged.  The second is an\n    array of such structures, for each cited premise.  Your code should\n    return an object with two members:  result  - a string, one of \"valid\", \"invalid\", or \"intermediate\"  message  - a string, a short message to show to users who hover over\n   the validation icon", 
            "title": "Writing a code-based rule"
        }, 
        {
            "location": "/user-guide/tech-2/#example", 
            "text": "Here is a code-based rule that judges whether an atomic expression contains\nthe letter x.  If so, it calls that expression valid; if not, then invalid.\n(Surely, this rule is useless, except as a simple example.)   I'll call this the  X rule :  javascript yes var hasX =\n    /x/i.test( conclusion.value ); \nreturn {  result : hasX ? 'valid' : 'invalid',  message : hasX ? 'This contains an X.' : 'This contains no X.' \n};  Now let's try using the rule, once correctly, and once incorrectly.  I think that  excellent  should be marked valid\n    and  awesome  should be marked invalid by the\n     X rule .", 
            "title": "Example"
        }, 
        {
            "location": "/user-guide/tech-2/#editing-and-debugging", 
            "text": "If you edit the document, the validation results should update in real time\nin response to your edits.  For instance, if you change the rule citation\nto \"Y rule\", both expressions citing it should be marked invalid because\nthere is no such rule.  You can even edit the code of the rule; if it is in\na syntactically invalid state, anything citing it will be marked invalid,\nwith an internal rule error as the explanation.  When writing the code for a rule, don't forget that you can right-click the\nrule and choose \"Edit as code\" to use an editor with syntax highlighting.\nRules are evaluated in a separate thread without access to the DOM or the\nbrowser window, so you cannot harm the Lurch application itself.  But you\ncan use the  console.log  command to dump data to the console and inspect\nits structure.  The conclusion and premise objects are both instances of the  OMNode  class\ndefined in  this source code\nfile .\nDocumentation on the class is included in the source code itself.", 
            "title": "Editing and debugging"
        }, 
        {
            "location": "/embedding/", 
            "text": "Embedding Lurch in a website or blog\n\n\nOverview\n\n\nWhen writing a web page or blog about introductory proofs, or about Lurch\nitself, authors will want to show examples of small documents in a live\nLurch application.  Validation will be functioning and showing its results,\nand users can explore the example interactively as well, possibly even\nexperimenting and/or making changes. We call this \nembedding\n Lurch in a web\npage or blog.\n\n\nHow To\n\n\nThe author must do two things to embed Lurch in a blog/website:\n\n\n\n\nInclude this code at the top of your webpage, or in the scripts list for\n   your blog:\n\n\n\n\nscript src='http://nathancarter.github.io/weblurch/app/lurch-embed-solo.min.js'\n/script\n\n\n\n\n\n\n\nCreate DIVs (or other blocks) with the class \"lurch-embed\" and place into\n   them your content.  You can directly paste content copied directly from\n   the Lurch web app, or you can write in\n   \nLurch shorthand\n.\n\n\n\n\ndiv class='lurch-embed'\n\n    \np\nHere is a Lurch document with two paragraphs, but no expressions.\n/p\n\n    \np\nTo see how to embed expressions, check out the examples below.\n/p\n\n\n/div\n\n\n\n\n\nExamples\n\n\n\n\nEmbedding a very tiny Lurch document into a webpage by pasting raw Lurch\n    HTML directly into the page source (not very human-readable).\n\n\nLive view\n\n\nSource code\n\n\n\n\n\n\nEmbedding two different (small) documents into the same webpage, and\n    writing each in Lurch shorthand (more human-readable).\n    See link above for instructions on writing in Lurch shorthand.\n\n\nLive view\n\n\nSource code\n\n\n\n\n\n\nThe example HTML code above produces the embedded Lurch document shown\n    below.\n\n\n\n\n\n    \nHere is a Lurch document with two paragraphs, but no expressions.\n\n    \nTo see how to embed expressions, check out the examples below.", 
            "title": "Blog/website embedding"
        }, 
        {
            "location": "/embedding/#embedding-lurch-in-a-website-or-blog", 
            "text": "", 
            "title": "Embedding Lurch in a website or blog"
        }, 
        {
            "location": "/embedding/#overview", 
            "text": "When writing a web page or blog about introductory proofs, or about Lurch\nitself, authors will want to show examples of small documents in a live\nLurch application.  Validation will be functioning and showing its results,\nand users can explore the example interactively as well, possibly even\nexperimenting and/or making changes. We call this  embedding  Lurch in a web\npage or blog.", 
            "title": "Overview"
        }, 
        {
            "location": "/embedding/#how-to", 
            "text": "The author must do two things to embed Lurch in a blog/website:   Include this code at the top of your webpage, or in the scripts list for\n   your blog:   script src='http://nathancarter.github.io/weblurch/app/lurch-embed-solo.min.js' /script    Create DIVs (or other blocks) with the class \"lurch-embed\" and place into\n   them your content.  You can directly paste content copied directly from\n   the Lurch web app, or you can write in\n    Lurch shorthand .   div class='lurch-embed' \n     p Here is a Lurch document with two paragraphs, but no expressions. /p \n     p To see how to embed expressions, check out the examples below. /p  /div", 
            "title": "How To"
        }, 
        {
            "location": "/embedding/#examples", 
            "text": "Embedding a very tiny Lurch document into a webpage by pasting raw Lurch\n    HTML directly into the page source (not very human-readable).  Live view  Source code    Embedding two different (small) documents into the same webpage, and\n    writing each in Lurch shorthand (more human-readable).\n    See link above for instructions on writing in Lurch shorthand.  Live view  Source code    The example HTML code above produces the embedded Lurch document shown\n    below.   \n     Here is a Lurch document with two paragraphs, but no expressions. \n     To see how to embed expressions, check out the examples below.", 
            "title": "Examples"
        }, 
        {
            "location": "/developer/", 
            "text": "webLurch Developer Docs\n\n\nA Development Platform\n\n\nRewriting the Lurch desktop app for the web involves building many\nsupporting tools that we call the \nLurch Web Platform.\n  Other developers\ncan build math-enabled web apps on the same platform, which improves the\nplatform and grows the community.\n\n\nWe've made the architecture simple and the learning curve small.  \nSee the\ndemo applications and tutorial to start developing.\n  We\nare currently using the platform to build the web rewrite of desktop Lurch.\n\n\nArchitecture\n\n\nThe following table illustrates the software architecture.  Read it from the\nbottom up.\n\n\n\n  \n\n    \nApplications:\n\n    \nLurch Proof Checker\n\n    \nDemo apps\n\n    \nYour app\n\n  \n\n  \n\n    \nPlatform:\n\n    \nLurch Web Platform\n\n  \n\n  \n\n    \nFoundation:\n\n    \nTinyMCE\n        editor\n\n  \n\n\n\n\n\nGetting involved\n\n\nIf you're interested in helping out with development of this project (e.g.,\nupstream commits if you use the platform), contact\n\nNathan Carter\n.\n\n\nRepository details\n\n\nAll source code is in \nliterate\nCoffeeScript\n.  This makes it highly\nreadable, especially on GitHub, which renders it as MarkDown.  I have tried\nto be verbose in my comments, to help new readers.\n\n\nRepository overview:\n\n\n\n\n/\n (root folder)\n\n\npackage.json\n - used by \nnode.js\n to install\n  dependencies  (The app runs in a browser, not node.js.  This is just\n  for dev tools.)\n\n\ncake.litcoffee\n and \nbuildutils.litcoffee\n define the build process.\n\n\n\n\n\n\napp/\n folder\n\n\nDemo apps and the plugins that create them reside here.  You can try\n  them out live on the web; see\n  \nthe demo apps and tutorials page\n.\n\n\nThe \nLurch Proof Checker\n is being rewritten for the web and many of\n  its files live in this folder.\n\n\n\n\n\n\nsrc/\n folder\n\n\nSource code files used for building the platform.\n\n\nThe build process compiles these into files in the \napp\n folder.\n\n\n\n\n\n\ntest/\n folder\n\n\nUnit tests.\n\n\nTo run them, execute \ncake test\n in the main folder, after you've set\n  it up as per \nthe Getting Started page\n.\n\n\nTest reports go to a \nreports/\n folder that the test suite creates\n\n\n\n\n\n\ndoc-src/\n folder\n\n\nAll source files (Markdown) for documentation, generated by\n  \nmkdocs\n.\n\n\n\n\n\n\ndocs/\n folder\n\n\nExists only in \ngh-pages\n branch\n\n\nCompiled version of \ndoc-src/\n folder, for hosting on GitHub Pages\n\n\n\n\n\n\njsfs/\n folder\n\n\nThis submodule", 
            "title": "Introduction"
        }, 
        {
            "location": "/developer/#weblurch-developer-docs", 
            "text": "", 
            "title": "webLurch Developer Docs"
        }, 
        {
            "location": "/developer/#a-development-platform", 
            "text": "Rewriting the Lurch desktop app for the web involves building many\nsupporting tools that we call the  Lurch Web Platform.   Other developers\ncan build math-enabled web apps on the same platform, which improves the\nplatform and grows the community.  We've made the architecture simple and the learning curve small.   See the\ndemo applications and tutorial to start developing.   We\nare currently using the platform to build the web rewrite of desktop Lurch.", 
            "title": "A Development Platform"
        }, 
        {
            "location": "/developer/#architecture", 
            "text": "The following table illustrates the software architecture.  Read it from the\nbottom up.  \n   \n     Applications: \n     Lurch Proof Checker \n     Demo apps \n     Your app \n   \n   \n     Platform: \n     Lurch Web Platform \n   \n   \n     Foundation: \n     TinyMCE\n        editor", 
            "title": "Architecture"
        }, 
        {
            "location": "/developer/#getting-involved", 
            "text": "If you're interested in helping out with development of this project (e.g.,\nupstream commits if you use the platform), contact Nathan Carter .", 
            "title": "Getting involved"
        }, 
        {
            "location": "/developer/#repository-details", 
            "text": "All source code is in  literate\nCoffeeScript .  This makes it highly\nreadable, especially on GitHub, which renders it as MarkDown.  I have tried\nto be verbose in my comments, to help new readers.  Repository overview:   /  (root folder)  package.json  - used by  node.js  to install\n  dependencies  (The app runs in a browser, not node.js.  This is just\n  for dev tools.)  cake.litcoffee  and  buildutils.litcoffee  define the build process.    app/  folder  Demo apps and the plugins that create them reside here.  You can try\n  them out live on the web; see\n   the demo apps and tutorials page .  The  Lurch Proof Checker  is being rewritten for the web and many of\n  its files live in this folder.    src/  folder  Source code files used for building the platform.  The build process compiles these into files in the  app  folder.    test/  folder  Unit tests.  To run them, execute  cake test  in the main folder, after you've set\n  it up as per  the Getting Started page .  Test reports go to a  reports/  folder that the test suite creates    doc-src/  folder  All source files (Markdown) for documentation, generated by\n   mkdocs .    docs/  folder  Exists only in  gh-pages  branch  Compiled version of  doc-src/  folder, for hosting on GitHub Pages    jsfs/  folder  This submodule", 
            "title": "Repository details"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Getting Started\n\n\nThis documentation is for developers who wish to learn about the \nLurch Web\nPlatform,\n and consider installing it on their local machine to begin using\nit, either to build on it, or to help improve it.\n\n\nTry the demos online\n\n\nYou can \ntry out demo apps right now online\n, but doing\ndevelopment requires cloning and setting up this repository on your machine.\nHere's how.\n\n\nSetting up a local repository\n\n\nInstall \nnode.js\n, which governs our building and tesitng\nprocess.  (The apps run in a browser.)\n\n\nThen execute the commands below from a *nix prompt.\n\n\n$ git clone https://github.com/nathancarter/weblurch\n$ cd weblurch\n$ git submodule init   # prepares git submodule folders\n$ git submodule update # downloads all files in all git submodules\n$ npm install          # installs required packages in ./node_modules\n$ npm test             # builds app and runs unit test suite\n\n\n\n\nRunning a local web server\n\n\nTo use any of the demo apps on your own local machine, you need a web server\n(to avoid browser security concerns with \nfile:///\n URLs).  You almost\ncertainly have Python installed, so in the root of the project repository,\ndo this.\n\n\n$ python -m SimpleHTTPServer 8000\n\n\n\n\nPoint your browser to \nlocalhost:8000/app/index.html\n, or any other page in\nthe repository's \napp/\n folder.\n\n\nCoffeeScript\n\n\nTo build the app without running the tests, you'll want to run the build\ncommand \ncake\n, which is part of \nCoffeeScript\n.\nInstall CoffeeScript globally (just once) with this command.\n\n\n$ npm install -g coffee-script\n\n\n\n\nNow you have the \ncake\n command.  Use it to build the app without running\ntests as follows.\n\n\n$ cake app\n\n\n\n\nSee more options by running \ncake\n with no parameters.", 
            "title": "Getting started"
        }, 
        {
            "location": "/getting-started/#getting-started", 
            "text": "This documentation is for developers who wish to learn about the  Lurch Web\nPlatform,  and consider installing it on their local machine to begin using\nit, either to build on it, or to help improve it.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#try-the-demos-online", 
            "text": "You can  try out demo apps right now online , but doing\ndevelopment requires cloning and setting up this repository on your machine.\nHere's how.", 
            "title": "Try the demos online"
        }, 
        {
            "location": "/getting-started/#setting-up-a-local-repository", 
            "text": "Install  node.js , which governs our building and tesitng\nprocess.  (The apps run in a browser.)  Then execute the commands below from a *nix prompt.  $ git clone https://github.com/nathancarter/weblurch\n$ cd weblurch\n$ git submodule init   # prepares git submodule folders\n$ git submodule update # downloads all files in all git submodules\n$ npm install          # installs required packages in ./node_modules\n$ npm test             # builds app and runs unit test suite", 
            "title": "Setting up a local repository"
        }, 
        {
            "location": "/getting-started/#running-a-local-web-server", 
            "text": "To use any of the demo apps on your own local machine, you need a web server\n(to avoid browser security concerns with  file:///  URLs).  You almost\ncertainly have Python installed, so in the root of the project repository,\ndo this.  $ python -m SimpleHTTPServer 8000  Point your browser to  localhost:8000/app/index.html , or any other page in\nthe repository's  app/  folder.", 
            "title": "Running a local web server"
        }, 
        {
            "location": "/getting-started/#coffeescript", 
            "text": "To build the app without running the tests, you'll want to run the build\ncommand  cake , which is part of  CoffeeScript .\nInstall CoffeeScript globally (just once) with this command.  $ npm install -g coffee-script  Now you have the  cake  command.  Use it to build the app without running\ntests as follows.  $ cake app  See more options by running  cake  with no parameters.", 
            "title": "CoffeeScript"
        }, 
        {
            "location": "/dev-tutorial/", 
            "text": "Demo Apps and App Developer Tutorial\n\n\nIntroduction\n\n\nWhat can I build with this platform?\n\n\nThe webLurch \narchitecture\n has three\ntiers, applications at the top, built on the \nLurch Web Platform\n, which in\nturn is built on the WYSIWYG editor \nTinyMCE\n.\n\n\n\n\nTinyMCE provides:\n\n\nWYSIWYG editing of HTML content\n     \n\n\nExtendability through custom toolbars, menus, dialogs, etc.\n\n\nThe \nLurch Web Platform\n builds on that foundation, and provides:\n\n\nLoad/Save functionality into the browser's\n     LocalStorage\n\n     \n\n\nA WYSIWYG math editing widget, \nimported from\n     here\n\n     \n\n\nGroups\n, the most important contribution of the \nLurch Web\n     Platform\n, \nexplained below\n.\n\n\nFacilities for computing with groups, such as\n     \na background computation/parallelization toolkit\n\n\n\n\nWhat are groups?\n\n\nThe crux of the user interface for the desktop version of Lurch is the\nability for the user to mark portions of a document as \nmeaningful\n with\ngroups.\n\n\nGroups are represented on screen as \"bubbles,\" as in the images below.  Thus\nthe terms \"group\" and \"bubble\" are sometimes used interchangeably, but\ntechnically \"group\" is the term for the object in memory, and \"bubble\" its\nrepresentation on screen.\n\n\nExamples:\n * One demo app lets users wrap bubbles around mathematical expressions to\n   tell Lurch to pay attention to the expressions' meaning.  Lurch puts a\n   tag above the bubble to let the user see what the content means to Lurch.\n   \n\n * Another demo app lets users put bubbles around text to give it\n   application-specific meaning.  The following screenshot is from an\n   application for authoring OpenMath Content Dictionaries.\n   \n\n * Complex nested group hierarchies are possible and very useful.  Desktop\n   Lurch uses them constantly:\n   \n\n\nRead about about the importance of this user interface\nparadigm in a blog post about the desktop version of\nLurch.\n\n\nDemo Apps\n\n\nThe content of this section got large enough to deserve\n\nits own page\n.\n\n\nTutorial\n\n\nBuild a \nLurch Web Application\n as follows.\n * \nPhase 1:\n Create a web page that imports the \nLurch Web Platform\n.\n * \nPhase 2:\n Write code that defines a set of group types.\n * \nPhase 3:\n Optionally add new/custom behaviors to those types.\n\n\nThis section gives step-by-step instructions for creating your own \nLurch\nWeb Application.\n  By the end of this section, you will have completed\nPhases 1 and 2 on the list, and will know where to go to explore Phase 3.\n\n\nPhase 1: A first app (and a very simple one)\n\n\n\n\nGet a copy of this repository set up on your local machine.\n    \nSee instructions here.\n  You may be able to forge\n    ahead even if you've never tried to learn \nliterate\n    CoffeeScript\n, because the language is\n    extremely readable.  But you can learn its basics at that link before\n    proceeding if you prefer.\n\n\nEnsure that you can build and run the Simple Example app, as follows:\n\n\nCompile the app and start a local web server by following the\n  repository setup instructions in the previous bullet point.\n\n\nVisit \nhttp://localhost:8000/app/simple-example.html\n to see the\n  simple example app in action.\n\n\n\n\n\n\nMake a copy of that app to use as the basis for your own.\n\n\nIn the \napp/\n subfolder, make copies of the files\n  \nsimple-example.html\n and \nsimple-example-solo.litcoffee\n, naming them\n  something like \nmyapp.html\n and \nmyapp-solo.litcoffee\n.\n\n\nRe-run \ncake app\n from the terminal to compile your new \n.litcoffee\n\n  file.  (You will need to do this after each change to the source.)\n  This should create several files that start with \napp/myapp-solo\n.\n\n\nChange the last \nscript\n tag in the \n.html\n file you just created so\n  that it imports \nmyapp-solo.min.js\n file rather than\n  \nsimple-example-solo.min.js\n.\n\n\nVisit \nhttp://localhost:8000/app/myapp.html\n to ensure that this\n  worked.  It should look exactly like the simple app you already saw.\n\n\n\n\n\n\nEdit \nmyapp-solo.min.js\n.\n\n\nThe file begins with a lot of documentation, and then the first line\n  of code is \nsetAppName 'ExampleApp'\n.  Change the contents of the\n  string to your app's name.\n\n\nRebuild using \ncake app\n and revisit the page to ensure that the app\n  name in the browser's tab has changed to your app's name.\n\n\n\n\n\n\n\n\nYou've created a (very simple) app!  And you know how to change your app's\ncode, rebuild, and visit your updated app.  So what kinds of code changes\nare possible?  Let's see.\n\n\nPhase 2: Changing or adding group types\n\n\nThe individual bubbles you see in the document are the visual representation\nof what, under the hood, are called \"groups.\"  Each app has a different set\nof group types that the user may insert in the document, depending on the\nneeds of the application.  Examples:\n * In the simple app you have, there is only one group type, and it does\n   almost nothing.  (It does write to the browser console, but that's\n   hardly exciting.)\n * \nThe complex demo app\n defines two\n   group types, one for wrapping and evaluating expressions of arithmetic\n   and another for wrapping and doing simple computations on words.\n * In \nthe math demo app\n there is only\n   one group type, for parsing and evaluating mathematical expressions.\n * In \nthe OpenMath Content Dictionary demo\n   app\n there is only one group\n   type, but it can have any of over a dozen different purposes, editable\n   using the context menu on each individual group.\n\n\nIf we look at the code in your app that defines group types, stripping away\nall the documentation, it looks like the following.\n\n\nwindow.groupTypes = [\n    name : 'reporter'\n    text : 'Simple Event Reporter'\n    imageHTML : '[ ]'\n    openImageHTML : '['\n    closeImageHTML : ']'\n    tagContents : ( group ) -\n\n        \n#{group.contentAsText()?.length} characters\n\n    contentsChanged : ( group, firstTime ) -\n\n        console.log 'This group just changed:', group.contentAsText()\n]\n\n\n\n\nAll of this is fully documented \nin the original\nfile\n, so I do\nnot repeat here what any of it means.  But note that this is simply the\nassignment to a global variable of an array of group type data.  You could\nextend it to add another group type as follows.\n\n\nwindow.groupTypes = [\n    #\n    # This code is the same as before:\n    #\n    name : 'reporter'\n    text : 'Simple Event Reporter'\n    imageHTML : '[ ]'\n    openImageHTML : '['\n    closeImageHTML : ']'\n    tagContents : ( group ) -\n\n        \n#{group.contentAsText()?.length} characters\n\n    contentsChanged : ( group, firstTime ) -\n\n        console.log 'This group just changed:', group.contentAsText()\n    #\n    # Here begins the new code:\n    #\n,\n    name : 'myNewGroupType'\n    text : 'My New Group Type'\n    imageHTML : '{}'\n    openImageHTML : '{'\n    closeImageHTML : '}'\n    tagContents : ( group ) -\n 'every tag has this content'\n    # no event handler for changes to group contents\n]\n\n\n\n\nRebuilding your app and reloading it in the browser should then let you\ninsert either of the two kinds of groups.  Each type should have its own\nbutton on the toolbar.\n\n\nBy simply extending the list above, you can define any set of group types\nyou see fit in your application.  Note that the open and close HTML can be\narbitrary HTML, including (small) images and font colors and styles.\n\n\nThe only question that remains is how to make your groups do something\nuseful.\n\n\nPhase 3: Adding interactivity to your groups\n\n\nWhat else can your app do?  Here are many examples, each with a link to\nwhere you can read more information and see example code.\n\n\nReport information about the group on the bubble's tag\n\n\n\n\nEvery example app you've seen so far does this.  Simply search the\n   source code repository for the \ntagContents\n function and look at the\n   variety of implementations.\n\n\nIn computing the contents of the tag, you will want to be able to query\n   information about your group, such as its text content, or whether it\n   has any groups inside of it.  The API for a Group object is \ndocumented\n   in the source code for the Groups\n   Plugin\n.\n\n\n\n\nCustomize a group's color\n\n\n\n\nInclude among the key-value pairs in your group type definition a pair\n   like \ncolor : '#aacc00'\n, or whatever HTML color you choose.\n\n\n\n\nStore and retrieve custom data in a Group object\n\n\n\n\nIn the API linked to immediately above, see the \nset\n, \nget\n, and\n   \nclear\n functions in the \nGroup\n class.  These store arbitrary JSON\n   data under string keys in a group.\n\n\nIt is very common to do a computation and store its result in an\n   attribute of the group, the read that later when computing the contents\n   of the group's tag, thus giving the user feedback on the results of\n   some background process.\n\n\n\n\nFind what groups are in the document\n\n\n\n\nFor a complete answer, see the API for the \nGroups\n class (different\n   from the \nGroup\n class!) in \nthe Groups\n   Plugin\n.  Since that file is large, I\n   give highlights here.\n\n\nAccess the one, global \nGroups\n object using the code\n   \ntinymce.activeEditor.Groups\n.  I call this object \nGroups\n hereafter.\n\n\nGet the array of all group IDs in your document (in the order their\n   open boundaries appear in the document) with \nGroups.ids()\n.\n\n\nGet the group object from its ID by indexing \nGroups\n as if it were an\n   array, as in \nGroups[putIdHere]\n.\n\n\nFor any group \nG\n, get the group containing it with \nG.parent\n, which\n   will be null if the group is top-level in the document, or if it was\n   just created in the document (instants ago) and the editor has\n   therefore not yet had a chance to re-scan and assign parent/child\n   relationships.\n\n\nFor any group \nG\n, get an ordered array of the groups it (immediately)\n   contains with \nG.children\n.  (Same caveat about just-created groups\n   applies here.)\n\n\n\n\nPushing complex computations into the background\n\n\n\n\nThe \nLurch Web Platform\n provides functionality for moving arbitrary\n   computations into one or more background threads, with parallelization\n   managed efficiently for you.  This lengthy topic is covered in two\n   files:\n\n\nThe \"complex example\" demo app\n\n   pushes some computations into the background, and you can follow its\n   example code.\n\n\nThe background module\n documents the full\n   API that's being leveraged by that demo app.\n\n\n\n\nExtending the menus that appear when users right-click a group or click\nits bubble tag\n\n\n\n\nExtending a group's context menu is done by providing a\n   \ncontextMenuItems\n function in the group type definition.  Search the\n   repository for that phrase to see examples.  One appears in \nthe\n   source code for the complex example demo\n   app\n.\n\n\nExtending a group's tag menu is done by providing a \ntagMenuItems\n\n   function that behaves exactly the same way, but may choose to return a\n   different list of menu items.\n\n\n\n\nAdding new buttons to the editor toolbar\n\n\n\n\nThis is done by assigning to the global object\n   \nwindow.groupToolbarButtons\n.\n\n\nSee an example\n   here.\n\n\n\n\nAdding new menu items to the editor's menus\n\n\n\n\nThis is done by assigning to the global object\n   \nwindow.groupMenuItems\n.\n\n\nThere is not an example of this at the moment, but it functions very\n   similar to the previous bullet point, about toolbar buttons.  The\n   implementation appears in\n   \nthe main setup code\n.\n\n\n\n\nShowing dialog boxes\n\n\n\n\nTinyMCE provides a few ways to show dialog boxes containing plain\n   text\n.\n\n\nIf your dialog box must contain more than just plain text, see\n   \nthe Dialogs plugin\n.\n\n\n\n\nAdding decorations to group boundaries\n\n\n\n\nIt is common to give feedback to the user about the content of a group\n   in a more obvious way than the bubble tag (which is only visible when\n   the user's cursor is in the group).  For instance, if there is an\n   error in what the user has entered in a group, you might want to\n   flag it in an obvious way, as the \n\n   does in the following example from\n   \nthe OpenMath Content Dictionary Editor demo\n   app\n.\n   \n\n   This is a special case of \"decorating\" a group.  To add decorations to\n   a group \nG\n, you have the following API.\n\n\nG.set 'openDecoration', 'any valid HTML here'\n - sets the decoration\n   that will appear to the left of its open boundary marker (not used in\n   the image above)\n\n\nG.set 'closeDecoration', 'any valid HTML here'\n - same as the previous\n   but for after the close boundary marker (as in the image above)\n\n\nG.clear 'openDecoration'\n and \nG.clear 'closeDecoration'\n behave as\n   expected\n\n\nNote that there are many useful Unicode characters for visually giving\n   understandable feedback concisely.  Consider the following, each of\n   which can be made more informative by wrapping it in\n   \nfont color=\"red\"\n...\n/font\n, as in the image above,\n   or some other color suiting your application.\n\n\nX's\n\n\n#10006; is \n\n\n#10007; is \n\n\n#10007; is \n\n\n\n\n\n\nChecks\n\n\n#10003; is \n\n\n#10004; is \n\n\n\n\n\n\nStars\n\n\n#10029; is \n\n\n#10038; is \n\n\n#10039; is \n\n\n#10040; is \n\n\n#10041; is \n\n\n\n\n\n\nNumbers\n\n\n#10122; is \n\n\n... in order through ...\n\n\n#10131; is \n\n\n\n\n\n\n\n\nOther functionality\n\n\nIn this section I document other configuration possibilities beyond those\nmentioned above, things that didn't fit neatly into the above categories.\n\n\nTo run any code after the editor has been set up, assign a function to the\nglobal variable \nwindow.afterEditorReady\n.  Your function should accept a\nsingle parameter, \neditor\n, which will be the editor object that was just\ninitialized.  Your function will be called at the end of the TinyMCE editor\n\"init\" event.\n\n\n\n\nThis tutorial was written by \nNathan Carter\n.\nFeel free to contact me with questions.  I would love to know how we can\nhelp get you started coding on the \nLurch Web Platform\n.", 
            "title": "Tutorial"
        }, 
        {
            "location": "/dev-tutorial/#demo-apps-and-app-developer-tutorial", 
            "text": "", 
            "title": "Demo Apps and App Developer Tutorial"
        }, 
        {
            "location": "/dev-tutorial/#introduction", 
            "text": "", 
            "title": "Introduction"
        }, 
        {
            "location": "/dev-tutorial/#what-can-i-build-with-this-platform", 
            "text": "The webLurch  architecture  has three\ntiers, applications at the top, built on the  Lurch Web Platform , which in\nturn is built on the WYSIWYG editor  TinyMCE .   TinyMCE provides:  WYSIWYG editing of HTML content\n       Extendability through custom toolbars, menus, dialogs, etc.  The  Lurch Web Platform  builds on that foundation, and provides:  Load/Save functionality into the browser's\n     LocalStorage \n       A WYSIWYG math editing widget,  imported from\n     here \n       Groups , the most important contribution of the  Lurch Web\n     Platform ,  explained below .  Facilities for computing with groups, such as\n      a background computation/parallelization toolkit", 
            "title": "What can I build with this platform?"
        }, 
        {
            "location": "/dev-tutorial/#what-are-groups", 
            "text": "The crux of the user interface for the desktop version of Lurch is the\nability for the user to mark portions of a document as  meaningful  with\ngroups.  Groups are represented on screen as \"bubbles,\" as in the images below.  Thus\nthe terms \"group\" and \"bubble\" are sometimes used interchangeably, but\ntechnically \"group\" is the term for the object in memory, and \"bubble\" its\nrepresentation on screen.  Examples:\n * One demo app lets users wrap bubbles around mathematical expressions to\n   tell Lurch to pay attention to the expressions' meaning.  Lurch puts a\n   tag above the bubble to let the user see what the content means to Lurch.\n    \n * Another demo app lets users put bubbles around text to give it\n   application-specific meaning.  The following screenshot is from an\n   application for authoring OpenMath Content Dictionaries.\n    \n * Complex nested group hierarchies are possible and very useful.  Desktop\n   Lurch uses them constantly:\n     Read about about the importance of this user interface\nparadigm in a blog post about the desktop version of\nLurch.", 
            "title": "What are groups?"
        }, 
        {
            "location": "/dev-tutorial/#demo-apps", 
            "text": "The content of this section got large enough to deserve its own page .", 
            "title": "Demo Apps"
        }, 
        {
            "location": "/dev-tutorial/#tutorial", 
            "text": "Build a  Lurch Web Application  as follows.\n *  Phase 1:  Create a web page that imports the  Lurch Web Platform .\n *  Phase 2:  Write code that defines a set of group types.\n *  Phase 3:  Optionally add new/custom behaviors to those types.  This section gives step-by-step instructions for creating your own  Lurch\nWeb Application.   By the end of this section, you will have completed\nPhases 1 and 2 on the list, and will know where to go to explore Phase 3.", 
            "title": "Tutorial"
        }, 
        {
            "location": "/dev-tutorial/#phase-1-a-first-app-and-a-very-simple-one", 
            "text": "Get a copy of this repository set up on your local machine.\n     See instructions here.   You may be able to forge\n    ahead even if you've never tried to learn  literate\n    CoffeeScript , because the language is\n    extremely readable.  But you can learn its basics at that link before\n    proceeding if you prefer.  Ensure that you can build and run the Simple Example app, as follows:  Compile the app and start a local web server by following the\n  repository setup instructions in the previous bullet point.  Visit  http://localhost:8000/app/simple-example.html  to see the\n  simple example app in action.    Make a copy of that app to use as the basis for your own.  In the  app/  subfolder, make copies of the files\n   simple-example.html  and  simple-example-solo.litcoffee , naming them\n  something like  myapp.html  and  myapp-solo.litcoffee .  Re-run  cake app  from the terminal to compile your new  .litcoffee \n  file.  (You will need to do this after each change to the source.)\n  This should create several files that start with  app/myapp-solo .  Change the last  script  tag in the  .html  file you just created so\n  that it imports  myapp-solo.min.js  file rather than\n   simple-example-solo.min.js .  Visit  http://localhost:8000/app/myapp.html  to ensure that this\n  worked.  It should look exactly like the simple app you already saw.    Edit  myapp-solo.min.js .  The file begins with a lot of documentation, and then the first line\n  of code is  setAppName 'ExampleApp' .  Change the contents of the\n  string to your app's name.  Rebuild using  cake app  and revisit the page to ensure that the app\n  name in the browser's tab has changed to your app's name.     You've created a (very simple) app!  And you know how to change your app's\ncode, rebuild, and visit your updated app.  So what kinds of code changes\nare possible?  Let's see.", 
            "title": "Phase 1: A first app (and a very simple one)"
        }, 
        {
            "location": "/dev-tutorial/#phase-2-changing-or-adding-group-types", 
            "text": "The individual bubbles you see in the document are the visual representation\nof what, under the hood, are called \"groups.\"  Each app has a different set\nof group types that the user may insert in the document, depending on the\nneeds of the application.  Examples:\n * In the simple app you have, there is only one group type, and it does\n   almost nothing.  (It does write to the browser console, but that's\n   hardly exciting.)\n *  The complex demo app  defines two\n   group types, one for wrapping and evaluating expressions of arithmetic\n   and another for wrapping and doing simple computations on words.\n * In  the math demo app  there is only\n   one group type, for parsing and evaluating mathematical expressions.\n * In  the OpenMath Content Dictionary demo\n   app  there is only one group\n   type, but it can have any of over a dozen different purposes, editable\n   using the context menu on each individual group.  If we look at the code in your app that defines group types, stripping away\nall the documentation, it looks like the following.  window.groupTypes = [\n    name : 'reporter'\n    text : 'Simple Event Reporter'\n    imageHTML : '[ ]'\n    openImageHTML : '['\n    closeImageHTML : ']'\n    tagContents : ( group ) - \n         #{group.contentAsText()?.length} characters \n    contentsChanged : ( group, firstTime ) - \n        console.log 'This group just changed:', group.contentAsText()\n]  All of this is fully documented  in the original\nfile , so I do\nnot repeat here what any of it means.  But note that this is simply the\nassignment to a global variable of an array of group type data.  You could\nextend it to add another group type as follows.  window.groupTypes = [\n    #\n    # This code is the same as before:\n    #\n    name : 'reporter'\n    text : 'Simple Event Reporter'\n    imageHTML : '[ ]'\n    openImageHTML : '['\n    closeImageHTML : ']'\n    tagContents : ( group ) - \n         #{group.contentAsText()?.length} characters \n    contentsChanged : ( group, firstTime ) - \n        console.log 'This group just changed:', group.contentAsText()\n    #\n    # Here begins the new code:\n    #\n,\n    name : 'myNewGroupType'\n    text : 'My New Group Type'\n    imageHTML : '{}'\n    openImageHTML : '{'\n    closeImageHTML : '}'\n    tagContents : ( group ) -  'every tag has this content'\n    # no event handler for changes to group contents\n]  Rebuilding your app and reloading it in the browser should then let you\ninsert either of the two kinds of groups.  Each type should have its own\nbutton on the toolbar.  By simply extending the list above, you can define any set of group types\nyou see fit in your application.  Note that the open and close HTML can be\narbitrary HTML, including (small) images and font colors and styles.  The only question that remains is how to make your groups do something\nuseful.", 
            "title": "Phase 2: Changing or adding group types"
        }, 
        {
            "location": "/dev-tutorial/#phase-3-adding-interactivity-to-your-groups", 
            "text": "What else can your app do?  Here are many examples, each with a link to\nwhere you can read more information and see example code.  Report information about the group on the bubble's tag   Every example app you've seen so far does this.  Simply search the\n   source code repository for the  tagContents  function and look at the\n   variety of implementations.  In computing the contents of the tag, you will want to be able to query\n   information about your group, such as its text content, or whether it\n   has any groups inside of it.  The API for a Group object is  documented\n   in the source code for the Groups\n   Plugin .   Customize a group's color   Include among the key-value pairs in your group type definition a pair\n   like  color : '#aacc00' , or whatever HTML color you choose.   Store and retrieve custom data in a Group object   In the API linked to immediately above, see the  set ,  get , and\n    clear  functions in the  Group  class.  These store arbitrary JSON\n   data under string keys in a group.  It is very common to do a computation and store its result in an\n   attribute of the group, the read that later when computing the contents\n   of the group's tag, thus giving the user feedback on the results of\n   some background process.   Find what groups are in the document   For a complete answer, see the API for the  Groups  class (different\n   from the  Group  class!) in  the Groups\n   Plugin .  Since that file is large, I\n   give highlights here.  Access the one, global  Groups  object using the code\n    tinymce.activeEditor.Groups .  I call this object  Groups  hereafter.  Get the array of all group IDs in your document (in the order their\n   open boundaries appear in the document) with  Groups.ids() .  Get the group object from its ID by indexing  Groups  as if it were an\n   array, as in  Groups[putIdHere] .  For any group  G , get the group containing it with  G.parent , which\n   will be null if the group is top-level in the document, or if it was\n   just created in the document (instants ago) and the editor has\n   therefore not yet had a chance to re-scan and assign parent/child\n   relationships.  For any group  G , get an ordered array of the groups it (immediately)\n   contains with  G.children .  (Same caveat about just-created groups\n   applies here.)   Pushing complex computations into the background   The  Lurch Web Platform  provides functionality for moving arbitrary\n   computations into one or more background threads, with parallelization\n   managed efficiently for you.  This lengthy topic is covered in two\n   files:  The \"complex example\" demo app \n   pushes some computations into the background, and you can follow its\n   example code.  The background module  documents the full\n   API that's being leveraged by that demo app.   Extending the menus that appear when users right-click a group or click\nits bubble tag   Extending a group's context menu is done by providing a\n    contextMenuItems  function in the group type definition.  Search the\n   repository for that phrase to see examples.  One appears in  the\n   source code for the complex example demo\n   app .  Extending a group's tag menu is done by providing a  tagMenuItems \n   function that behaves exactly the same way, but may choose to return a\n   different list of menu items.   Adding new buttons to the editor toolbar   This is done by assigning to the global object\n    window.groupToolbarButtons .  See an example\n   here.   Adding new menu items to the editor's menus   This is done by assigning to the global object\n    window.groupMenuItems .  There is not an example of this at the moment, but it functions very\n   similar to the previous bullet point, about toolbar buttons.  The\n   implementation appears in\n    the main setup code .   Showing dialog boxes   TinyMCE provides a few ways to show dialog boxes containing plain\n   text .  If your dialog box must contain more than just plain text, see\n    the Dialogs plugin .   Adding decorations to group boundaries   It is common to give feedback to the user about the content of a group\n   in a more obvious way than the bubble tag (which is only visible when\n   the user's cursor is in the group).  For instance, if there is an\n   error in what the user has entered in a group, you might want to\n   flag it in an obvious way, as the  \n   does in the following example from\n    the OpenMath Content Dictionary Editor demo\n   app .\n    \n   This is a special case of \"decorating\" a group.  To add decorations to\n   a group  G , you have the following API.  G.set 'openDecoration', 'any valid HTML here'  - sets the decoration\n   that will appear to the left of its open boundary marker (not used in\n   the image above)  G.set 'closeDecoration', 'any valid HTML here'  - same as the previous\n   but for after the close boundary marker (as in the image above)  G.clear 'openDecoration'  and  G.clear 'closeDecoration'  behave as\n   expected  Note that there are many useful Unicode characters for visually giving\n   understandable feedback concisely.  Consider the following, each of\n   which can be made more informative by wrapping it in\n    font color=\"red\" ... /font , as in the image above,\n   or some other color suiting your application.  X's  #10006; is   #10007; is   #10007; is     Checks  #10003; is   #10004; is     Stars  #10029; is   #10038; is   #10039; is   #10040; is   #10041; is     Numbers  #10122; is   ... in order through ...  #10131; is", 
            "title": "Phase 3: Adding interactivity to your groups"
        }, 
        {
            "location": "/dev-tutorial/#other-functionality", 
            "text": "In this section I document other configuration possibilities beyond those\nmentioned above, things that didn't fit neatly into the above categories.  To run any code after the editor has been set up, assign a function to the\nglobal variable  window.afterEditorReady .  Your function should accept a\nsingle parameter,  editor , which will be the editor object that was just\ninitialized.  Your function will be called at the end of the TinyMCE editor\n\"init\" event.   This tutorial was written by  Nathan Carter .\nFeel free to contact me with questions.  I would love to know how we can\nhelp get you started coding on the  Lurch Web Platform .", 
            "title": "Other functionality"
        }, 
        {
            "location": "/plan/", 
            "text": "Project Plan\n\n\nThis document aims to be a complete plan for what needs to be done on this\nproject, readable by developers.  It can therefore be viewed as a to-do list\nin chronological order, the first items being those that should be done\nnext, and the later items those that must come after.  Necessarily, the\nlater items are more vague than the earlier ones.\n\n\nNote also that there are some \nknown bugs and planned enhancements\n not listed in this file, because they are not part\nof the linear progression of the project.  They can be addressed whenever it\nbecomes convenient or useful; this document lists things in a more-or-less\nrequired order of completion.\n\n\nParsing test\n\n\nRewrite the following section to more accurately reflect Section 24 of the\nspecification, then implement it as a module attached to the main Lurch\napplication, a module that can easily be disabled if we need to redesign it.\n\n\n\n\nCreate a group type called \"category name\" that can hold any text.  Its\n   tag will always contain the phrase \"category name.\"\n\n\nCreate a group type called \"category definition.\"\n\n\nIt has an attribute called \"definition type\" that can be selected with\n     the bubble tag context menu, and is one of the following.\n\n\nBuilt-in types\n\n\nintegers base 10\n\n\nreal numbers base 10\n\n\none letter a-z/A-Z\n\n\n(more can be added to this list later)\n\n\nRegular expression\n\n\nSymbol (containing, for example, the infinity symbol or \u03c0)\n\n\nPattern (containing, for example, a non-atomic bubble, or a\n   MathQuill instance)\n\n\n\n\n\n\nWhichever of the above is chosen will be used as the bubble tag\n     contents.\n\n\nChoosing any of the options, if the bubble is empty, fills the bubble\n     with example content for that definition type.  For built-in types, it\n     fills the bubble with a human-readable description of the built-in.\n\n\nMake \"category name\" groups able to connect by arrows to \"category\n   definition\" groups or \"category name\" groups, but only up to one target.\n\n\nCreate a group type called \"name\" that can hold any text.\n\n\nPermit it to connect to a \"category definition\" group, but only up to\n     one target.\n\n\nPermit \"category type\" groups to connect to \"name\" type groups also,\n     but still at most one target.\n\n\nIts tag will behave as follows.\n\n\nIf it is not connected to a target, the tag says \"name.\"\n\n\nIf it has no category name connected to it, the tag says \"operator\n   name.\"\n\n\nIf it contains any commas or spaces, the tag says \"variable names.\"\n\n\nOtherwise, it says \"variable name.\"\n\n\n\n\n\n\nCreate a group type called \"test\" that can hold any text.  Its tag always\n   contains the phrase \"test.\"\n\n\nCreate a method that computes, for any given \"category definition\" group,\n   a simple representation of what function should be called in a parser\n   object to extend it by adding that definition; the result should be JSON.\n\n\nA built-in category definition B modified by a category name N should\n     represent the grammar rule N -\n B.\n\n\nA regular expression category definition R modified by a category name\n     N should represent the grammar rule N -\n R.\n\n\nA symbol category definition S modified by a category name N should\n     represent the grammar rule N -\n S.\n\n\nOne category name N1 modified by another N2 should represent the\n     grammar rule N2 -\n N1.  This is the first rule for which the right-hand\n     side is a non-terminal.\n\n\nA pattern category definition P modified by a category name N will\n     usually also have other things modifying it.  An optional operator name\n     (as a name bubble) can target P; call that bubble O.  Also there may be\n     bubble V1 through Vn targeting P, each of type name, specifying which\n     identifiers in P are to be seen as placeholders (not literals).  Each\n     such Vi should be modified by a category name Ni to give it a type (in\n     the sense of grammar non-terminals).  This entire structure should\n     represent the grammar rule N -\n P', where P' is P with each Vi replaced\n     by Ni.  The bubble O will be used to construct an OpenMath symbol used\n     when constructing a parse tree, and which will be mentioned in the\n     bubble tag for expressions with this operator as their outermost.  Note\n     also that each Vi may contain one or more variables.\n\n\nThe \ncontentsChanged\n handler for any given group in the document should\n   call that function in itself (if it's a category definition group) or (if\n   it's not) in any category definition group to which it's connected,\n   storing the result as an attribute of the group on which it was called.\n\n\nCreate a function that applies any such JSON record of a command to a\n   parser object, thus modifying that parser appropriately.\n\n\nWhenever any definition type group in the document has its JSON meaning\n   recomputed, loop through all category definition top-level groups in the\n   document, doing the following.\n\n\nBefore the loop, create a parser P.\n\n\nUpon encountering a category definition group \nafter\n the one that\n     changed, apply to it the function that extends P with the meaning of\n     that group.\n\n\nUpon encountering a test type group, run P on its contents and place\n     the resulting structure within the test type group.\n\n\nWhenever any test type group in the document changes, do the same loop as\n   above, but the only test that should be recomputed is the one that\n   changed.\n\n\nCreate a context menu item in test type groups that allows you to see, in\n   a popup window, the parsed structure stored in that group.\n\n\nAdd a context menu item in test type groups that allows you to mark a\n   test as currently passing.  This takes the currently parsed meaning of\n   that group and stores it under a second key, the meaning that \nought\n to\n   be parsed by that group.  (For later comparison purposes, if input data\n   changes, to prevent regression.)\n\n\nAdd a context menu item for removing such marks.\n\n\nWhen writing to a test type group's meaning attribute (or to the\n   attribute storing the meaning it ought to have), also mark it with a\n   suffix that looks like one of the following.\n\n\nIf it has no data stored for what structure it ought to have, mark it\n     with a gray question mark.  Hovering the question mark should explain\n     this.\n\n\nIf the \"what ought to be parsed\" data matches the data we just parsed\n     and are now storing, mark it with a green check box.  Hovering should,\n     again, explain this.\n\n\nMark it with a red check box, and a corresponding hover explanation.\n\n\n\n\nGoogle Drive support\n\n\nGoogle Drive also provides a very nice \nreal time collaboration API\n that makes any\ndocument you like into a Google-Docs-like collaborative model where changes\nare auto-synced across collaborators.  This was an idea that Dana Ernst\nasked for long ago when he first heard about the webLurch project. Integrate\nthat into webLurch, imitating the UX Ken describes from typical online\ncollaboration apps such as Google Docs and Overleaf, as follows.\n\n\n\n\nJust a note that none of the changes below impact the wiki import and\n   export functionality; that stays as it is now.\n\n\nProvide a section in the File \n Application settings... dialog that will\n   be for Google Drive authentication, but you don't have to put the Google\n   login functionality there yet.  Include full explanatory text about how\n   cloud saving works with webLurch (as described below).\n\n\nFile \n Save and File \n Save as... actions should be removed entirely.\n\n\nBefore adding Google Drive integration, change the items on the File menu\n   to behave as follows.\n\n\nWhenever the document is dirty, it has a warning message on the toolbar\n     that says something like \"Not saved\" followed by a button that says\n     \"Enable cloud storage.\"\n\n\nThe \"Go online\" button will open the document preferences dialog and\n     scroll down to/highlight the section about logging into Google Drive.\n\n\nFile \n Document properties... will let you change the name of the\n     document which will simply be stored as document metadata; it will have\n     no impact on filename, since there is no filename (yet).\n\n\nCorresponding changes take place in the toolbar.\n\n\nAdd File \n Download, which starts a download of the file as HTML.\n\n\nAdd File \n Upload, which lets the user choose an HTML file to upload,\n     accepts the upload, strips any dangerous tags from it, then does the\n     same thing as File \n New, above, before pasting the HTML content\n     directly into the new, blank document.\n\n\nAdd to the application settings section about Google Drive the actual\n   login/auth button.  Once a user has logged in, the button becomes a\n   disconnect-from-my-Drive button (de-auth).  See the tutorial on how to\n   do so \nhere\n,\n   and especially the JavaScript tools they've developed for your use\n   \nhere\n.\n\n\nWhen a user gives such authorization, the following changes take place:\n\n\nThe currently-open file in the app should then be moved into Google\n     Drive as a new document.  Attempt to preserve document title, if one\n     was set in document properties.  If Drive requires unique titles, you\n     may need to append a number.\n\n\nChange File \n New so that it does this same procedure of moving the\n     (newly created) document into Drive, with a default title such as\n     \"Untitled Document.\"\n\n\nThe toolbar will no longer say \"Not saved,\" but will say either\n     \"Saved to Drive\" or \"Syncing...\" (if in progress).\n\n\nFile \n Open looks in your Google Drive for Lurch files to open, and\n     presents you a flat list.  If possible, sort it by most recently used.\n\n\nFile \n Manage files... gets replaced by File \n Open my Google Drive.\n     All file management will take place through Google's UI, not mine.\n\n\nIf a user de-authorizes webLurch from their Google Drive, then all\n   entries on the File menu should revert to their original behavior.\n\n\nGet this to work across multiple instances of the Lurch app in different\n   tabs as follows.\n\n\nStore in Local Storage the fact that the user has given a Drive login\n     and succeeded, when that login takes place.\n\n\nHave the app poll that setting every second or two, and if it sees that\n     it has changed from no to yes (due to the user's logging into Drive in\n     another tab of the app), then re-run the silent Google login attempt\n     routine to complete the login in that tab as well.  (I think?)\n\n\n\n\nOffline support\n\n\nTo make an HTML5 app available offline, I believe the appropriate step is\nsimply to provide an app manifest.  I'm verifying that with \nthis\nStackOverflow\nquestion\n.\nThat question links to a tutorial on app manifests, if the answer turns out\nto be \"yes\" to that question.\n\n\nIdeas from various sources\n\n\nAll images consistently base64\n\n\nThis GitHub comment\n\nmight be useful for ensuring that even images pasted into a document get\nconverted to base64, as all the other images in the document are.\n\n\nLMS integration\n\n\nSuggestion from Dana Ernst: Perhaps this is not necessary or feasible, but\nif you go with a web app, could you make it easy for teachers to \"plug into\"\nthe common LMS's (e.g. Blackboard, Canvas, etc.)?  I'm envisioning students\nbeing able to submit assignments with ease to an LMS and then teachers can\ngrade and enter grades easily without have to go back and forth between web\npages.\n\n\nFurther wiki integration?\n\n\nIs it possible for the entire Lurch app to exist inside MediaWiki, so that\nediting a wiki page was done using Lurch as the editor?  That would be\nexcellent for many use cases.  Offline use would still necessitate the\nnormal app, and this would be tricky to accomplish, because wiki integration\nof something that complex will be touchy, but it would be impressive and\nintuitive.\n\n\nDesktop app\n\n\nConvert webLurch into a desktop app using\n\nelectron\n.\nThis gives the user an app that always works offline, has an icon in their\nApplications folder/Start menu, etc., and feels like an official app that\nthey can alt-tab to, etc., but it\u2019s the exact same web app, just wrapped in\na thin desktop-app shell.  You can then add features to that as time\npermits.\n\n\n\n\nWhen the user clicks \"save,\" you can have the web app first query to see\n   if it\u2019s sitting in a desktop-app wrapper, and if so, don\u2019t save to\n   webstorage, but pop up the usual save box.\n\n\nSame for File \n Open.\n\n\nSame for accessing the system clipboard\nSimilar apps could be created for iOS, Android, etc., but would need to use\ntools other than Electron.  These are orthogonal tasks, and need not all be\ndone by the same developer.\n\n\n\n\nRepository organization\n\n\n\n\nThe \napp/\n folder is getting cluttered.  Create an \napp/examples/\n\n   subfolder and move every \n*-example.html\n and \n*-example-solo.litcoffee\n\n   into it.  Update any relative links to other resources, and any links to\n   those pages.\n\n\nThis requires also updating the \ncake.litcoffee\n to compile files in\n  that subfolder as well.\n\n\nIt also requires taking care with the \ngh-pages\n merge, so that\n  compiled files get deleted/recreated correctly in that branch (once).\n\n\n\n\n\n\n\n\nImproving documentation\n\n\nDocumentation at the top of most unit test spec files is incomplete. Add\ndocumentation so that someone who does not know how to read a test spec file\ncould learn it from that documentation.  Probably the best way to do this is\nto add general documentation to the simplest/main test spec, and then\nreference that general documentation from all other test specs.", 
            "title": "Project plan"
        }, 
        {
            "location": "/plan/#project-plan", 
            "text": "This document aims to be a complete plan for what needs to be done on this\nproject, readable by developers.  It can therefore be viewed as a to-do list\nin chronological order, the first items being those that should be done\nnext, and the later items those that must come after.  Necessarily, the\nlater items are more vague than the earlier ones.  Note also that there are some  known bugs and planned enhancements  not listed in this file, because they are not part\nof the linear progression of the project.  They can be addressed whenever it\nbecomes convenient or useful; this document lists things in a more-or-less\nrequired order of completion.", 
            "title": "Project Plan"
        }, 
        {
            "location": "/plan/#parsing-test", 
            "text": "Rewrite the following section to more accurately reflect Section 24 of the\nspecification, then implement it as a module attached to the main Lurch\napplication, a module that can easily be disabled if we need to redesign it.   Create a group type called \"category name\" that can hold any text.  Its\n   tag will always contain the phrase \"category name.\"  Create a group type called \"category definition.\"  It has an attribute called \"definition type\" that can be selected with\n     the bubble tag context menu, and is one of the following.  Built-in types  integers base 10  real numbers base 10  one letter a-z/A-Z  (more can be added to this list later)  Regular expression  Symbol (containing, for example, the infinity symbol or \u03c0)  Pattern (containing, for example, a non-atomic bubble, or a\n   MathQuill instance)    Whichever of the above is chosen will be used as the bubble tag\n     contents.  Choosing any of the options, if the bubble is empty, fills the bubble\n     with example content for that definition type.  For built-in types, it\n     fills the bubble with a human-readable description of the built-in.  Make \"category name\" groups able to connect by arrows to \"category\n   definition\" groups or \"category name\" groups, but only up to one target.  Create a group type called \"name\" that can hold any text.  Permit it to connect to a \"category definition\" group, but only up to\n     one target.  Permit \"category type\" groups to connect to \"name\" type groups also,\n     but still at most one target.  Its tag will behave as follows.  If it is not connected to a target, the tag says \"name.\"  If it has no category name connected to it, the tag says \"operator\n   name.\"  If it contains any commas or spaces, the tag says \"variable names.\"  Otherwise, it says \"variable name.\"    Create a group type called \"test\" that can hold any text.  Its tag always\n   contains the phrase \"test.\"  Create a method that computes, for any given \"category definition\" group,\n   a simple representation of what function should be called in a parser\n   object to extend it by adding that definition; the result should be JSON.  A built-in category definition B modified by a category name N should\n     represent the grammar rule N -  B.  A regular expression category definition R modified by a category name\n     N should represent the grammar rule N -  R.  A symbol category definition S modified by a category name N should\n     represent the grammar rule N -  S.  One category name N1 modified by another N2 should represent the\n     grammar rule N2 -  N1.  This is the first rule for which the right-hand\n     side is a non-terminal.  A pattern category definition P modified by a category name N will\n     usually also have other things modifying it.  An optional operator name\n     (as a name bubble) can target P; call that bubble O.  Also there may be\n     bubble V1 through Vn targeting P, each of type name, specifying which\n     identifiers in P are to be seen as placeholders (not literals).  Each\n     such Vi should be modified by a category name Ni to give it a type (in\n     the sense of grammar non-terminals).  This entire structure should\n     represent the grammar rule N -  P', where P' is P with each Vi replaced\n     by Ni.  The bubble O will be used to construct an OpenMath symbol used\n     when constructing a parse tree, and which will be mentioned in the\n     bubble tag for expressions with this operator as their outermost.  Note\n     also that each Vi may contain one or more variables.  The  contentsChanged  handler for any given group in the document should\n   call that function in itself (if it's a category definition group) or (if\n   it's not) in any category definition group to which it's connected,\n   storing the result as an attribute of the group on which it was called.  Create a function that applies any such JSON record of a command to a\n   parser object, thus modifying that parser appropriately.  Whenever any definition type group in the document has its JSON meaning\n   recomputed, loop through all category definition top-level groups in the\n   document, doing the following.  Before the loop, create a parser P.  Upon encountering a category definition group  after  the one that\n     changed, apply to it the function that extends P with the meaning of\n     that group.  Upon encountering a test type group, run P on its contents and place\n     the resulting structure within the test type group.  Whenever any test type group in the document changes, do the same loop as\n   above, but the only test that should be recomputed is the one that\n   changed.  Create a context menu item in test type groups that allows you to see, in\n   a popup window, the parsed structure stored in that group.  Add a context menu item in test type groups that allows you to mark a\n   test as currently passing.  This takes the currently parsed meaning of\n   that group and stores it under a second key, the meaning that  ought  to\n   be parsed by that group.  (For later comparison purposes, if input data\n   changes, to prevent regression.)  Add a context menu item for removing such marks.  When writing to a test type group's meaning attribute (or to the\n   attribute storing the meaning it ought to have), also mark it with a\n   suffix that looks like one of the following.  If it has no data stored for what structure it ought to have, mark it\n     with a gray question mark.  Hovering the question mark should explain\n     this.  If the \"what ought to be parsed\" data matches the data we just parsed\n     and are now storing, mark it with a green check box.  Hovering should,\n     again, explain this.  Mark it with a red check box, and a corresponding hover explanation.", 
            "title": "Parsing test"
        }, 
        {
            "location": "/plan/#google-drive-support", 
            "text": "Google Drive also provides a very nice  real time collaboration API  that makes any\ndocument you like into a Google-Docs-like collaborative model where changes\nare auto-synced across collaborators.  This was an idea that Dana Ernst\nasked for long ago when he first heard about the webLurch project. Integrate\nthat into webLurch, imitating the UX Ken describes from typical online\ncollaboration apps such as Google Docs and Overleaf, as follows.   Just a note that none of the changes below impact the wiki import and\n   export functionality; that stays as it is now.  Provide a section in the File   Application settings... dialog that will\n   be for Google Drive authentication, but you don't have to put the Google\n   login functionality there yet.  Include full explanatory text about how\n   cloud saving works with webLurch (as described below).  File   Save and File   Save as... actions should be removed entirely.  Before adding Google Drive integration, change the items on the File menu\n   to behave as follows.  Whenever the document is dirty, it has a warning message on the toolbar\n     that says something like \"Not saved\" followed by a button that says\n     \"Enable cloud storage.\"  The \"Go online\" button will open the document preferences dialog and\n     scroll down to/highlight the section about logging into Google Drive.  File   Document properties... will let you change the name of the\n     document which will simply be stored as document metadata; it will have\n     no impact on filename, since there is no filename (yet).  Corresponding changes take place in the toolbar.  Add File   Download, which starts a download of the file as HTML.  Add File   Upload, which lets the user choose an HTML file to upload,\n     accepts the upload, strips any dangerous tags from it, then does the\n     same thing as File   New, above, before pasting the HTML content\n     directly into the new, blank document.  Add to the application settings section about Google Drive the actual\n   login/auth button.  Once a user has logged in, the button becomes a\n   disconnect-from-my-Drive button (de-auth).  See the tutorial on how to\n   do so  here ,\n   and especially the JavaScript tools they've developed for your use\n    here .  When a user gives such authorization, the following changes take place:  The currently-open file in the app should then be moved into Google\n     Drive as a new document.  Attempt to preserve document title, if one\n     was set in document properties.  If Drive requires unique titles, you\n     may need to append a number.  Change File   New so that it does this same procedure of moving the\n     (newly created) document into Drive, with a default title such as\n     \"Untitled Document.\"  The toolbar will no longer say \"Not saved,\" but will say either\n     \"Saved to Drive\" or \"Syncing...\" (if in progress).  File   Open looks in your Google Drive for Lurch files to open, and\n     presents you a flat list.  If possible, sort it by most recently used.  File   Manage files... gets replaced by File   Open my Google Drive.\n     All file management will take place through Google's UI, not mine.  If a user de-authorizes webLurch from their Google Drive, then all\n   entries on the File menu should revert to their original behavior.  Get this to work across multiple instances of the Lurch app in different\n   tabs as follows.  Store in Local Storage the fact that the user has given a Drive login\n     and succeeded, when that login takes place.  Have the app poll that setting every second or two, and if it sees that\n     it has changed from no to yes (due to the user's logging into Drive in\n     another tab of the app), then re-run the silent Google login attempt\n     routine to complete the login in that tab as well.  (I think?)", 
            "title": "Google Drive support"
        }, 
        {
            "location": "/plan/#offline-support", 
            "text": "To make an HTML5 app available offline, I believe the appropriate step is\nsimply to provide an app manifest.  I'm verifying that with  this\nStackOverflow\nquestion .\nThat question links to a tutorial on app manifests, if the answer turns out\nto be \"yes\" to that question.", 
            "title": "Offline support"
        }, 
        {
            "location": "/plan/#ideas-from-various-sources", 
            "text": "", 
            "title": "Ideas from various sources"
        }, 
        {
            "location": "/plan/#all-images-consistently-base64", 
            "text": "This GitHub comment \nmight be useful for ensuring that even images pasted into a document get\nconverted to base64, as all the other images in the document are.", 
            "title": "All images consistently base64"
        }, 
        {
            "location": "/plan/#lms-integration", 
            "text": "Suggestion from Dana Ernst: Perhaps this is not necessary or feasible, but\nif you go with a web app, could you make it easy for teachers to \"plug into\"\nthe common LMS's (e.g. Blackboard, Canvas, etc.)?  I'm envisioning students\nbeing able to submit assignments with ease to an LMS and then teachers can\ngrade and enter grades easily without have to go back and forth between web\npages.", 
            "title": "LMS integration"
        }, 
        {
            "location": "/plan/#further-wiki-integration", 
            "text": "Is it possible for the entire Lurch app to exist inside MediaWiki, so that\nediting a wiki page was done using Lurch as the editor?  That would be\nexcellent for many use cases.  Offline use would still necessitate the\nnormal app, and this would be tricky to accomplish, because wiki integration\nof something that complex will be touchy, but it would be impressive and\nintuitive.", 
            "title": "Further wiki integration?"
        }, 
        {
            "location": "/plan/#desktop-app", 
            "text": "Convert webLurch into a desktop app using electron .\nThis gives the user an app that always works offline, has an icon in their\nApplications folder/Start menu, etc., and feels like an official app that\nthey can alt-tab to, etc., but it\u2019s the exact same web app, just wrapped in\na thin desktop-app shell.  You can then add features to that as time\npermits.   When the user clicks \"save,\" you can have the web app first query to see\n   if it\u2019s sitting in a desktop-app wrapper, and if so, don\u2019t save to\n   webstorage, but pop up the usual save box.  Same for File   Open.  Same for accessing the system clipboard\nSimilar apps could be created for iOS, Android, etc., but would need to use\ntools other than Electron.  These are orthogonal tasks, and need not all be\ndone by the same developer.", 
            "title": "Desktop app"
        }, 
        {
            "location": "/plan/#repository-organization", 
            "text": "The  app/  folder is getting cluttered.  Create an  app/examples/ \n   subfolder and move every  *-example.html  and  *-example-solo.litcoffee \n   into it.  Update any relative links to other resources, and any links to\n   those pages.  This requires also updating the  cake.litcoffee  to compile files in\n  that subfolder as well.  It also requires taking care with the  gh-pages  merge, so that\n  compiled files get deleted/recreated correctly in that branch (once).", 
            "title": "Repository organization"
        }, 
        {
            "location": "/plan/#improving-documentation", 
            "text": "Documentation at the top of most unit test spec files is incomplete. Add\ndocumentation so that someone who does not know how to read a test spec file\ncould learn it from that documentation.  Probably the best way to do this is\nto add general documentation to the simplest/main test spec, and then\nreference that general documentation from all other test specs.", 
            "title": "Improving documentation"
        }, 
        {
            "location": "/bugs-and-enhancements/", 
            "text": "Bug fixes and Enhancements\n\n\nThis document lists known bugs that we plan to fix and planned enhancements\nnot yet made.  They are listed in this file, rather than in \nthe Project\nPlan\n because these are things that are not part of the linear\nprogression of the project, in the sense that further work can be done on\nthe main project plan without these bug fixes or enhancements.\n\n\nBug fixes\n\n\nLoad and save\n\n\n\n\nNot all edits cause the document to be marked dirty.  TinyMCE events are\n   not firing correctly.  \nMinimal working example created.\n\n   \nOr see this related issue.\n\n   Use the responses from that to get this\n   problem fixed in Lurch, either by updating to a fixed version of TinyMCE\n   or by installing a workaround here.  Although you've heard about the\n   KeyUp and SetContent events that you're using in the Groups package, so\n   you may be able to correct this problem partially with those events.\n   (We have updated to a newer version of TinyMCE, but not yet checked to\n   see if this bug persists.)\n\n\nUsing the keyboard shortcut for New or Open on Mac triggers the Chrome\n   behaviors on the Chrome File menu, not the TinyMCE behaviors on its File\n   menu.  See \nmy question about this on the TinyMCE forum,\n and the\n   StackOverflow page to which it links with information on how you might go\n   about building a workaround if one doesn't exist already.\n\n\nIt's too easy to navigate away from the editor and lose your work.  Make\n   a popup that asks if you really want to leave the page or not.\n\n\n\n\nOther\n\n\n\n\nWhen you open (or type) a file that's longer than the screen, you must\n   open and close the JS console to force resizing, or it won't scroll\n   vertically.  Alternatively, you can resize the window.  Seems like the\n   resize event handler needs to be called immediately after the page\n   geometry is set up.\n\n\nThe Insert Menu covers the toolbar and will not disappear, even when an\n   item is selected.  This seems like it is either a TinyMCE bug (and may go\n   away if we update TinyMCE) or it is a bug in our use of TinyMCE.\n\n\nFormats menu is currently empty.\n\n\nSome of the \n*-duo.litcoffee\n files in \nsrc/\n in the master branch also\n   have committed versions in \napp/\n that are merely copies.  This is\n   necessary in the gh-pages branch, but in master it's redundant.  Fix.\n\n\nTravis-CI build was segmentation faulting, though the tests run just fine\n   locally for me.  Figure out why and get the Travis build working again,\n   then uncomment the Travis status indicator in\n   \nREADME.md\n.\n\n\nIn the Lean example app, \ntermGroupToCode\n uses \ncontentsAsText\n, which\n   ignores paragraph breaks, as if they were not whitespace; this is\n   problematic.  Use \ncontentAsCode\n instead.\n\n\n\n\nEnhancements\n\n\nMathQuill parsing\n\n\n\n\nSupport adjacent atomics as factors in a product\n\n\nSupport chained equations\n\n\nAdd tests for things that should \nnot\n parse, and verify that they do not\n\n\n\n\nHTML export/import\n\n\n\n\nAdd an HTML export function that lets you download the contents of the\n   editor (plus metadata at the front, just like when exporting to the wiki)\n   for publishing on your own website, for example, or pasting into a blog\n   post.  Wrap it in a DIV with class \"lurch-embed\".\n\n\nExpose that functionality to the user, on the File menu.\n\n\nAdd an HTML import function that lets you specify a URL, sends an XHR to\n   get the page at that URL, and finds all DIVs with class \"lurch-embed\".\n   Show the user a bit of the text from each and let the user choose which\n   to import.  Be sure to extract the metadata as well, just as with a wiki\n   import.\n\n\nExpose that functionality to the user, on the File menu.\n\n\nExtend dependencies so that they can be at arbitrary URLs, now, not just\n   on the wiki.  Use the HTML import function just created for this purpose,\n   but stipulate that a dependency imports only the first \"lurch-embed\" DIV\n   on a page.  To check the last modified date of arbitrary web pages, see\n   \nhere.\n\n\n\n\nDependencies\n\n\n\n\nRight now circular dependency relationships never cause an infinite loop\n   because dependency content is only embedded when a document is opened.\n   So if A depends on B which depends on A, then when A is opened, it will\n   embed B, which indirectly embeds the saved version of A.  If A is saved\n   and B is opened, that will embed the (new, larger) A, and this can\n   continue to increase file sizes as we repeatedly open documents.  But\n   each step of this infinite expansion requires a user action, so the\n   application will never hang.  However, it can be a silent and highly\n   undesirable file inflater.  Expand the dependency loading mechanism to\n   check for a loop by finding the same filename or wiki URL nested within\n   itself in the dependency data of a document, and alert the user.\n\n\nExtend the \"Add URL dependency\" event handler with a \"please wait\"\n   indicator while the document is being fetched.  Use the \nwaiting\n method\n   in the \nDialogs\n plugin.\n\n\nThere is not yet support for adding dependencies from files in your\n   Dropbox.  Add this feature.\n\n\n\n\nCheat sheets\n\n\nThe \"Cheatsheets\" menu item of the RStudio GUI is an excellent resource for\nmany users.  It contains links to online PDFs of one- or two-sided\nprintable, dense reference sheets for common topics in RStudio.  A similar\ncheatsheet (or set thereof) could be created about Lurch.  Consider these\ntopics.\n\n\n\n\nThe advanced users guide, condensed into a two-sided reference\n\n\nUnderstanding and dealing with validation messages\n\n\nA reference for each of the built-in libraries\n\n\n\n\nGroups Plugin\n\n\n\n\nMake a menu item for hiding/showing group decorations.\n\n\nThe \nGroup.set\n function no longer takes any action if the new value is\n   the same as the old value.  (Similarly, \nclear\n doesn't do anything if\n   the attribute is already gone.)  This prevents clients from needing to\n   implement their own checks to prevent infinite loops of change event\n   handlers.  The remaining task is to go through the demo apps and find\n   their workarounds for this annoyance and remove them to clean up those\n   apps (and not confuse readers).  Then verify that the apps still work,\n   i.e., that there truly are no infinite loops remaining.\n\n\nSeveral new methods have been added to the Groups Plugin without unit\n   tests being written for them.  Be sure to look back through the full list\n   of functions in that file and find those which have no unit tests, and\n   create unit tests for them, debugging the functions as you do so.\n\n\nThe following new members will be needed in the Group class as we create\n   more complex webLurch-based applications\n\n\nsaveCursorPosition()\n, which returns a bookmark\n\n\nrestoreCursorPosition()\n, which returns to a bookmark you provide\n\n\nallContents()\n, which returns an array of alternating strings and\n     groups\n\n\n\n\nUI for Connections Between Groups\n\n\n\n\nAdd an option that when entering arrow-creation mode, ALL bubble outlines\n   in the document are faintly drawn (not their tags), so that it's\n   completely clear where a user wants to aim the mouse to hit a certain\n   bubble.\n\n\nAdd an option that show-groupers (Ctrl+1) mode is automatically enabled\n   when the user enters arrow-connection mode, and re-disabled (if it was\n   disabled in the first place) when exiting arrow-connection mode.  This is\n   like the previous feature, but more aggressive and techy.  (Do we still\n   need it now that we have the previous feature?)\n\n\nOn mobile, a tap highlights the innermost bubble under it, without\n   creating the arrow yet, and shows OK/cancel buttons hovering nearby.  If\n   the user tapped what he/she expected to tap, then he/she hits OK and it\n   creates the arrow.  Cancel (or just tapping elsewhere) closes the\n   OK/cancel buttons and does nothing else.\n\n\nWhen in arrow-creation mode, keystrokes are interpreted as typing bubble\n   labels, which will scroll the view to the bubbles with those labels, and\n   highlight them as if the user had mouse-hovered them.  If the user\n   presses enter, the arrow will be created.  Hence there are\n   keyboard-shortcut ways to specify arrows among bubbles.  This would work\n   best with a keyboard shortcut for entering bubble-making mode also.  (If\n   there are ambiguous labels--i.e., ones that apply to more than one\n   bubble--just choose any one; that's the user's fault.)  Note that this\n   requires two additional features to help it out:\n\n\nA function in the group type for computing the default label for any\n     bubble in the document.  The default can be the address of the bubble\n     in the hierarchy, as a list of positive integers; e.g., the second\n     bubble immediate inside the tenth topmost bubble has number 10.2.\n\n\nDrawing bubbles in arrow-creation mode should include these labels\n     somewhere nearby.\n\n\n\n\nMiscellaneous\n\n\n\n\nAiming the mouse at the close grouper, to bring up validation hover info,\n   turns the mouse pointer into a text cursor (shaped like an I, rather than\n   an arrow), which can be confusing.  Make the mouse pointer over groupers\n   be a plain old ordinary arrow, like usual.\n\n\nMove all plugin files into the \nsrc/\n folder, if possible.\n\n\nSee \nthis answer\n to your\n   StackOverflow question about higher resolution HTML canvas rendering on\n   retina deisplays.  See if its suggestions can work in your case.  This\n   may be the same as the following one...\n\n\nBubble tags are not drawn at retina resolution on Macs with retina\n   displays.  \nSee my question about how to fix this problem here.\n\n\nComplete \nthe unit test for the DOM Utils\n   package\n.  See the end of that file for\n   the few missing tests.\n\n\nIf you ever need to export PDFs of Lurch documents, consider\n   \njsPDF\n.\n\n\nEventually, pull the LoadSave plugin out into its own repository on\n   GitHub, so that anyone can easily get and use that TinyMCE plugin, and\n   improve on its code.\n\n\nIn the Lean example app:  How might we work Lean's \nnotation\n\n   definitions in with MathQuill widgets in the document?\n\n\n\n\nBackground processing\n\n\n\n\nCreate a way to write a foreground function tht is a series of background\n   steps as inner functions, and only the one for teh current state of the\n   group is run, automatically placing it in the next state.  The following\n   example client code would create internal state names in a linear order.\n   This could be a subclass of a more general one that's an arbitrary state\n   graph.\n\n\n\n\nP = new Processor 'group type name here'\nP.addStep ( group ) -\n ...\nP.addStep ( group ) -\n ...\n\n\n\n\n\n\nDesign and implement how this could be extended to support passing arrays\n   of argument lists and receiving arrays of results, to minimize the\n   overhead of message-passing.\n\n\nLeverage the previous change to make the current implementation more\n   efficient as follows:  When starting a background computation, take\n   several other waiting computations with the same background function, and\n   start all at once, on the array of argument lists, so that only one\n   message passing need occur.\n\n\n\n\nEnhancements to the XML Groups module and/or demo app\n\n\n\n\nMake an option for whether to show tags even when the cursor is not in\n   the bubble.  If so, make the open decoration of every bubble\n   \"#{tagName}:\".\n\n\nThe validation routine for that demo app is one routine with four\n   independent checks.  That's perfect for breaking into four separate\n   routines an enqueueing all into the background as separate tasks.  This\n   would be an excellent test of that model, which you plan to use in the\n   real webLurch.\n\n\nEach tag's data can specify a set of Group attributes that should be\n   copied into the XML output as element attributes.  Then clients can\n   create their own UI for editing such attributes, and just store them in\n   the Groups themselves, content with the fact that the \nxml-groups\n module\n   will carry that data over into the XML output.\n\n\nAdd support to the Groups package for accepting click and/or double-click\n   events on open/close groupers, and passing them to the Group type for\n   handling.  Here is the code the MathQuill plugin uses for this purpose.\n   Note the selector in the second line.\n\n\n\n\neditor.on 'init', -\n\n    ( $ editor.getDoc() ).on 'click', '.rendered-latex', ( event ) -\n\n        event.stopPropagation()\n        # here, \nthis\n is the element that received the click event\n\n\n\n\n\n\nUse the feature from the previous bullet point to give more detailed\n   feedback about failed structural rules.\n\n\nCreate an importer that reads in OM CDs and creates documents from them\n   that use Groups.  This would then truly be an OM CD Editor!", 
            "title": "Bug fix/enhancement list"
        }, 
        {
            "location": "/bugs-and-enhancements/#bug-fixes-and-enhancements", 
            "text": "This document lists known bugs that we plan to fix and planned enhancements\nnot yet made.  They are listed in this file, rather than in  the Project\nPlan  because these are things that are not part of the linear\nprogression of the project, in the sense that further work can be done on\nthe main project plan without these bug fixes or enhancements.", 
            "title": "Bug fixes and Enhancements"
        }, 
        {
            "location": "/bugs-and-enhancements/#bug-fixes", 
            "text": "", 
            "title": "Bug fixes"
        }, 
        {
            "location": "/bugs-and-enhancements/#load-and-save", 
            "text": "Not all edits cause the document to be marked dirty.  TinyMCE events are\n   not firing correctly.   Minimal working example created. \n    Or see this related issue. \n   Use the responses from that to get this\n   problem fixed in Lurch, either by updating to a fixed version of TinyMCE\n   or by installing a workaround here.  Although you've heard about the\n   KeyUp and SetContent events that you're using in the Groups package, so\n   you may be able to correct this problem partially with those events.\n   (We have updated to a newer version of TinyMCE, but not yet checked to\n   see if this bug persists.)  Using the keyboard shortcut for New or Open on Mac triggers the Chrome\n   behaviors on the Chrome File menu, not the TinyMCE behaviors on its File\n   menu.  See  my question about this on the TinyMCE forum,  and the\n   StackOverflow page to which it links with information on how you might go\n   about building a workaround if one doesn't exist already.  It's too easy to navigate away from the editor and lose your work.  Make\n   a popup that asks if you really want to leave the page or not.", 
            "title": "Load and save"
        }, 
        {
            "location": "/bugs-and-enhancements/#other", 
            "text": "When you open (or type) a file that's longer than the screen, you must\n   open and close the JS console to force resizing, or it won't scroll\n   vertically.  Alternatively, you can resize the window.  Seems like the\n   resize event handler needs to be called immediately after the page\n   geometry is set up.  The Insert Menu covers the toolbar and will not disappear, even when an\n   item is selected.  This seems like it is either a TinyMCE bug (and may go\n   away if we update TinyMCE) or it is a bug in our use of TinyMCE.  Formats menu is currently empty.  Some of the  *-duo.litcoffee  files in  src/  in the master branch also\n   have committed versions in  app/  that are merely copies.  This is\n   necessary in the gh-pages branch, but in master it's redundant.  Fix.  Travis-CI build was segmentation faulting, though the tests run just fine\n   locally for me.  Figure out why and get the Travis build working again,\n   then uncomment the Travis status indicator in\n    README.md .  In the Lean example app,  termGroupToCode  uses  contentsAsText , which\n   ignores paragraph breaks, as if they were not whitespace; this is\n   problematic.  Use  contentAsCode  instead.", 
            "title": "Other"
        }, 
        {
            "location": "/bugs-and-enhancements/#enhancements", 
            "text": "", 
            "title": "Enhancements"
        }, 
        {
            "location": "/bugs-and-enhancements/#mathquill-parsing", 
            "text": "Support adjacent atomics as factors in a product  Support chained equations  Add tests for things that should  not  parse, and verify that they do not", 
            "title": "MathQuill parsing"
        }, 
        {
            "location": "/bugs-and-enhancements/#html-exportimport", 
            "text": "Add an HTML export function that lets you download the contents of the\n   editor (plus metadata at the front, just like when exporting to the wiki)\n   for publishing on your own website, for example, or pasting into a blog\n   post.  Wrap it in a DIV with class \"lurch-embed\".  Expose that functionality to the user, on the File menu.  Add an HTML import function that lets you specify a URL, sends an XHR to\n   get the page at that URL, and finds all DIVs with class \"lurch-embed\".\n   Show the user a bit of the text from each and let the user choose which\n   to import.  Be sure to extract the metadata as well, just as with a wiki\n   import.  Expose that functionality to the user, on the File menu.  Extend dependencies so that they can be at arbitrary URLs, now, not just\n   on the wiki.  Use the HTML import function just created for this purpose,\n   but stipulate that a dependency imports only the first \"lurch-embed\" DIV\n   on a page.  To check the last modified date of arbitrary web pages, see\n    here.", 
            "title": "HTML export/import"
        }, 
        {
            "location": "/bugs-and-enhancements/#dependencies", 
            "text": "Right now circular dependency relationships never cause an infinite loop\n   because dependency content is only embedded when a document is opened.\n   So if A depends on B which depends on A, then when A is opened, it will\n   embed B, which indirectly embeds the saved version of A.  If A is saved\n   and B is opened, that will embed the (new, larger) A, and this can\n   continue to increase file sizes as we repeatedly open documents.  But\n   each step of this infinite expansion requires a user action, so the\n   application will never hang.  However, it can be a silent and highly\n   undesirable file inflater.  Expand the dependency loading mechanism to\n   check for a loop by finding the same filename or wiki URL nested within\n   itself in the dependency data of a document, and alert the user.  Extend the \"Add URL dependency\" event handler with a \"please wait\"\n   indicator while the document is being fetched.  Use the  waiting  method\n   in the  Dialogs  plugin.  There is not yet support for adding dependencies from files in your\n   Dropbox.  Add this feature.", 
            "title": "Dependencies"
        }, 
        {
            "location": "/bugs-and-enhancements/#cheat-sheets", 
            "text": "The \"Cheatsheets\" menu item of the RStudio GUI is an excellent resource for\nmany users.  It contains links to online PDFs of one- or two-sided\nprintable, dense reference sheets for common topics in RStudio.  A similar\ncheatsheet (or set thereof) could be created about Lurch.  Consider these\ntopics.   The advanced users guide, condensed into a two-sided reference  Understanding and dealing with validation messages  A reference for each of the built-in libraries", 
            "title": "Cheat sheets"
        }, 
        {
            "location": "/bugs-and-enhancements/#groups-plugin", 
            "text": "Make a menu item for hiding/showing group decorations.  The  Group.set  function no longer takes any action if the new value is\n   the same as the old value.  (Similarly,  clear  doesn't do anything if\n   the attribute is already gone.)  This prevents clients from needing to\n   implement their own checks to prevent infinite loops of change event\n   handlers.  The remaining task is to go through the demo apps and find\n   their workarounds for this annoyance and remove them to clean up those\n   apps (and not confuse readers).  Then verify that the apps still work,\n   i.e., that there truly are no infinite loops remaining.  Several new methods have been added to the Groups Plugin without unit\n   tests being written for them.  Be sure to look back through the full list\n   of functions in that file and find those which have no unit tests, and\n   create unit tests for them, debugging the functions as you do so.  The following new members will be needed in the Group class as we create\n   more complex webLurch-based applications  saveCursorPosition() , which returns a bookmark  restoreCursorPosition() , which returns to a bookmark you provide  allContents() , which returns an array of alternating strings and\n     groups", 
            "title": "Groups Plugin"
        }, 
        {
            "location": "/bugs-and-enhancements/#ui-for-connections-between-groups", 
            "text": "Add an option that when entering arrow-creation mode, ALL bubble outlines\n   in the document are faintly drawn (not their tags), so that it's\n   completely clear where a user wants to aim the mouse to hit a certain\n   bubble.  Add an option that show-groupers (Ctrl+1) mode is automatically enabled\n   when the user enters arrow-connection mode, and re-disabled (if it was\n   disabled in the first place) when exiting arrow-connection mode.  This is\n   like the previous feature, but more aggressive and techy.  (Do we still\n   need it now that we have the previous feature?)  On mobile, a tap highlights the innermost bubble under it, without\n   creating the arrow yet, and shows OK/cancel buttons hovering nearby.  If\n   the user tapped what he/she expected to tap, then he/she hits OK and it\n   creates the arrow.  Cancel (or just tapping elsewhere) closes the\n   OK/cancel buttons and does nothing else.  When in arrow-creation mode, keystrokes are interpreted as typing bubble\n   labels, which will scroll the view to the bubbles with those labels, and\n   highlight them as if the user had mouse-hovered them.  If the user\n   presses enter, the arrow will be created.  Hence there are\n   keyboard-shortcut ways to specify arrows among bubbles.  This would work\n   best with a keyboard shortcut for entering bubble-making mode also.  (If\n   there are ambiguous labels--i.e., ones that apply to more than one\n   bubble--just choose any one; that's the user's fault.)  Note that this\n   requires two additional features to help it out:  A function in the group type for computing the default label for any\n     bubble in the document.  The default can be the address of the bubble\n     in the hierarchy, as a list of positive integers; e.g., the second\n     bubble immediate inside the tenth topmost bubble has number 10.2.  Drawing bubbles in arrow-creation mode should include these labels\n     somewhere nearby.", 
            "title": "UI for Connections Between Groups"
        }, 
        {
            "location": "/bugs-and-enhancements/#miscellaneous", 
            "text": "Aiming the mouse at the close grouper, to bring up validation hover info,\n   turns the mouse pointer into a text cursor (shaped like an I, rather than\n   an arrow), which can be confusing.  Make the mouse pointer over groupers\n   be a plain old ordinary arrow, like usual.  Move all plugin files into the  src/  folder, if possible.  See  this answer  to your\n   StackOverflow question about higher resolution HTML canvas rendering on\n   retina deisplays.  See if its suggestions can work in your case.  This\n   may be the same as the following one...  Bubble tags are not drawn at retina resolution on Macs with retina\n   displays.   See my question about how to fix this problem here.  Complete  the unit test for the DOM Utils\n   package .  See the end of that file for\n   the few missing tests.  If you ever need to export PDFs of Lurch documents, consider\n    jsPDF .  Eventually, pull the LoadSave plugin out into its own repository on\n   GitHub, so that anyone can easily get and use that TinyMCE plugin, and\n   improve on its code.  In the Lean example app:  How might we work Lean's  notation \n   definitions in with MathQuill widgets in the document?", 
            "title": "Miscellaneous"
        }, 
        {
            "location": "/bugs-and-enhancements/#background-processing", 
            "text": "Create a way to write a foreground function tht is a series of background\n   steps as inner functions, and only the one for teh current state of the\n   group is run, automatically placing it in the next state.  The following\n   example client code would create internal state names in a linear order.\n   This could be a subclass of a more general one that's an arbitrary state\n   graph.   P = new Processor 'group type name here'\nP.addStep ( group ) -  ...\nP.addStep ( group ) -  ...   Design and implement how this could be extended to support passing arrays\n   of argument lists and receiving arrays of results, to minimize the\n   overhead of message-passing.  Leverage the previous change to make the current implementation more\n   efficient as follows:  When starting a background computation, take\n   several other waiting computations with the same background function, and\n   start all at once, on the array of argument lists, so that only one\n   message passing need occur.", 
            "title": "Background processing"
        }, 
        {
            "location": "/bugs-and-enhancements/#enhancements-to-the-xml-groups-module-andor-demo-app", 
            "text": "Make an option for whether to show tags even when the cursor is not in\n   the bubble.  If so, make the open decoration of every bubble\n   \"#{tagName}:\".  The validation routine for that demo app is one routine with four\n   independent checks.  That's perfect for breaking into four separate\n   routines an enqueueing all into the background as separate tasks.  This\n   would be an excellent test of that model, which you plan to use in the\n   real webLurch.  Each tag's data can specify a set of Group attributes that should be\n   copied into the XML output as element attributes.  Then clients can\n   create their own UI for editing such attributes, and just store them in\n   the Groups themselves, content with the fact that the  xml-groups  module\n   will carry that data over into the XML output.  Add support to the Groups package for accepting click and/or double-click\n   events on open/close groupers, and passing them to the Group type for\n   handling.  Here is the code the MathQuill plugin uses for this purpose.\n   Note the selector in the second line.   editor.on 'init', - \n    ( $ editor.getDoc() ).on 'click', '.rendered-latex', ( event ) - \n        event.stopPropagation()\n        # here,  this  is the element that received the click event   Use the feature from the previous bullet point to give more detailed\n   feedback about failed structural rules.  Create an importer that reads in OM CDs and creates documents from them\n   that use Groups.  This would then truly be an OM CD Editor!", 
            "title": "Enhancements to the XML Groups module and/or demo app"
        }, 
        {
            "location": "/example-apps/", 
            "text": "Example Lurch Applications\n\n\nThe webLurch project is attempting to rewrite \nthe desktop application\nLurch\n for the web.  It is not yet complete, but\nthe foundational technology is progressing, and can be used in other\nprojects as well.  This page lists several example applications built using\nthe webLurch foundation.\n\n(See here for full developer info.)\n\n\nMain App\n\n\nwebLurch\n\n\n(Still incomplete)\n\n\nThe ongoing implementation of Lurch for the web is kept here.  It does not\ncheck proofs yet!  It is still in the beginning phases of development.  For\nsoftware that will check the steps of students' work, \nsee the desktop\nversion\n.\n\n\n\n\nLaunch the app\n\n\nView source code\n\n\n\n\nIntro apps\n\n\nSimple example\n\n\nDevelopers who want to build their own apps on the webLurch platform should\nstart here, because it's highly documented and extremely simple.\n\n\n\n\nLaunch the app\n\n\nView source code\n\n\n\n\nComplex Example\n\n\nDevelopers who want to build their own apps on the webLurch platform should\nstart with the Simple Example, then move to this one.\n\n\nIt defines two group types rather than one, and shows how to\nadd context menus and do lengthy background computations,\namong other things.\n\n\n\n\nLaunch the app\n\n\nView source code\n\n\n\n\nDemo apps\n\n\nMath Evaluator\n\n\nDevelopers learning the Lurch web platform should start with \nthe Intro\napps\n above, then try \"Demo\" apps.\n\n\nThis one lets users wrap any typeset mathematical expression in a bubble and\nask the app to evaluate it or show its internal structure.\n\n\n\n\nLaunch the app\n\n\nView source code\n\n\n\n\nOMCD Editor\n\n\nDevelopers learning the Lurch web platform should start with \nthe Intro\napps\n above, then try \"Demo\" apps.\n\n\nThis app that lets you write an \nOpenMath Content\nDictionary\n in a user-friendly word processor,\nthen export its raw XML for use elsewhere. This is a specific example of an\nentire category of apps for editing hierarchically structured meanings.\n\n\n\n\nLaunch the app\n\n\nView source code\n\n\n\n\nLean UI\n\n\nDevelopers learning the Lurch web platform should start with \nthe Intro\napps\n above, then try \"Demo\" apps.\n\n\nThis is the most complex demo; try one of the other two to start.\n\n\nIt lets users interact with the theorem prover\n\nLean\n in a word-processing environment with\nnice visual feedback.\n\n\n\n\nRead the tutorial\n\n\nLaunch the app\n\n\nView source code", 
            "title": "Full list"
        }, 
        {
            "location": "/example-apps/#example-lurch-applications", 
            "text": "The webLurch project is attempting to rewrite  the desktop application\nLurch  for the web.  It is not yet complete, but\nthe foundational technology is progressing, and can be used in other\nprojects as well.  This page lists several example applications built using\nthe webLurch foundation. (See here for full developer info.)", 
            "title": "Example Lurch Applications"
        }, 
        {
            "location": "/example-apps/#main-app", 
            "text": "", 
            "title": "Main App"
        }, 
        {
            "location": "/example-apps/#weblurch", 
            "text": "(Still incomplete)  The ongoing implementation of Lurch for the web is kept here.  It does not\ncheck proofs yet!  It is still in the beginning phases of development.  For\nsoftware that will check the steps of students' work,  see the desktop\nversion .   Launch the app  View source code", 
            "title": "webLurch"
        }, 
        {
            "location": "/example-apps/#intro-apps", 
            "text": "", 
            "title": "Intro apps"
        }, 
        {
            "location": "/example-apps/#simple-example", 
            "text": "Developers who want to build their own apps on the webLurch platform should\nstart here, because it's highly documented and extremely simple.   Launch the app  View source code", 
            "title": "Simple example"
        }, 
        {
            "location": "/example-apps/#complex-example", 
            "text": "Developers who want to build their own apps on the webLurch platform should\nstart with the Simple Example, then move to this one.  It defines two group types rather than one, and shows how to\nadd context menus and do lengthy background computations,\namong other things.   Launch the app  View source code", 
            "title": "Complex Example"
        }, 
        {
            "location": "/example-apps/#demo-apps", 
            "text": "", 
            "title": "Demo apps"
        }, 
        {
            "location": "/example-apps/#math-evaluator", 
            "text": "Developers learning the Lurch web platform should start with  the Intro\napps  above, then try \"Demo\" apps.  This one lets users wrap any typeset mathematical expression in a bubble and\nask the app to evaluate it or show its internal structure.   Launch the app  View source code", 
            "title": "Math Evaluator"
        }, 
        {
            "location": "/example-apps/#omcd-editor", 
            "text": "Developers learning the Lurch web platform should start with  the Intro\napps  above, then try \"Demo\" apps.  This app that lets you write an  OpenMath Content\nDictionary  in a user-friendly word processor,\nthen export its raw XML for use elsewhere. This is a specific example of an\nentire category of apps for editing hierarchically structured meanings.   Launch the app  View source code", 
            "title": "OMCD Editor"
        }, 
        {
            "location": "/example-apps/#lean-ui", 
            "text": "Developers learning the Lurch web platform should start with  the Intro\napps  above, then try \"Demo\" apps.  This is the most complex demo; try one of the other two to start.  It lets users interact with the theorem prover Lean  in a word-processing environment with\nnice visual feedback.   Read the tutorial  Launch the app  View source code", 
            "title": "Lean UI"
        }, 
        {
            "location": "/lean-example/tutorial-1/", 
            "text": "Lean App Tutorial, Part 1\n\n\nThe webLurch project is factored into two parts, as described\n\nhere\n.  The main app is built on a\nfoundation that can be re-used to make many different apps.\nOne of the \nexample\napplications\n\nbuilt on that foundation uses the software\n\nLean\n (actually, its\n\nJavaScript implementation\n)\nto validate documents expressing mathematics using dependent type theory.\n\n\nWhat does it do?\n\n\nThis tutorial assumes that you're familiar with Lean.  If not, consider\nstarting with \nLean's own tutorial\n\nfirst.\n\n\nThe app documented here is a web-based word processor whose controls are\nself-explanatory, with some new features.\n\n\n\n\nTry the web app live now.\n\n\nMarking Lean code\n\n\nThe buttons on the toolbar above provide a way for users to mark sections of\ntheir document as Lean code and to have those sections checked for validity.\n\n\nThe first of three buttons whose icon is two square brackets, \n[ ]\n, can be\nused to mark a section of text as Lean code.  This wraps the text in special\nsquare brackets as a visual indicator of the special treatment the app will\ngive that text.  When the user's cursor is inside such code, a bubble will\nbe drawn around the code to make that fact visually obvious.\n\n\n\n\nUsers who do not wish to see the brackets (and rely\ninstead only on the bubbles that appear when the cursor is inside the code)\ncan toggle that feature using the View menu.\n\n\n\n\nThe other two bracket buttons, as well as the arrow button, will be covered\nin later parts of this tutorial.\n\n\nChecking with Lean\n\n\nThe collection of Lean code in the document can be run through Lean in one\nstep using the \"Run Lean\" button in the toolbar.  This can take several\nseconds, since running a sophisticated application like Lean in a browser\nwindow is a nontrivial operation.  Thus it is only run when the user\nexplicitly clicks the button.\n\n\nAfter it has been run, bubbles that produced any kind of output are\ndecorated with a symbol, either \n or \n, indicating whether the message was an error.  You\ncan find details about the Lean output by hovering your mouse over the\nsymbol in question, as shown below.\n\n\n\n\nSo what?\n\n\nBenefits\n\n\nThis means there is a simple UI in which you can type\n\nliterate\n Lean code,\nand it looks nice.  Furthermore, the validation results are presented as\nnicely as they are in \nthe official online Lean\nenvironment\n.\n\n\nMissing pieces\n\n\nThere are many disadvantages to the simple app just demonstrated, many of\nwhich will be addressed individually in later pages in this tutorial.  The\nfirst disadvantage that comes to mind is that the reader still needs to\nspeak Lean code rather fluently (e.g., \ncheck\n and \nprint\n and other\ncommands) to use this software.  How might we improve that?  Let's see:\n\n\nContinue to Part 2.", 
            "title": "Tutorial Part 1"
        }, 
        {
            "location": "/lean-example/tutorial-1/#lean-app-tutorial-part-1", 
            "text": "The webLurch project is factored into two parts, as described here .  The main app is built on a\nfoundation that can be re-used to make many different apps.\nOne of the  example\napplications \nbuilt on that foundation uses the software Lean  (actually, its JavaScript implementation )\nto validate documents expressing mathematics using dependent type theory.", 
            "title": "Lean App Tutorial, Part 1"
        }, 
        {
            "location": "/lean-example/tutorial-1/#what-does-it-do", 
            "text": "This tutorial assumes that you're familiar with Lean.  If not, consider\nstarting with  Lean's own tutorial \nfirst.  The app documented here is a web-based word processor whose controls are\nself-explanatory, with some new features.   Try the web app live now.", 
            "title": "What does it do?"
        }, 
        {
            "location": "/lean-example/tutorial-1/#marking-lean-code", 
            "text": "The buttons on the toolbar above provide a way for users to mark sections of\ntheir document as Lean code and to have those sections checked for validity.  The first of three buttons whose icon is two square brackets,  [ ] , can be\nused to mark a section of text as Lean code.  This wraps the text in special\nsquare brackets as a visual indicator of the special treatment the app will\ngive that text.  When the user's cursor is inside such code, a bubble will\nbe drawn around the code to make that fact visually obvious.   Users who do not wish to see the brackets (and rely\ninstead only on the bubbles that appear when the cursor is inside the code)\ncan toggle that feature using the View menu.   The other two bracket buttons, as well as the arrow button, will be covered\nin later parts of this tutorial.", 
            "title": "Marking Lean code"
        }, 
        {
            "location": "/lean-example/tutorial-1/#checking-with-lean", 
            "text": "The collection of Lean code in the document can be run through Lean in one\nstep using the \"Run Lean\" button in the toolbar.  This can take several\nseconds, since running a sophisticated application like Lean in a browser\nwindow is a nontrivial operation.  Thus it is only run when the user\nexplicitly clicks the button.  After it has been run, bubbles that produced any kind of output are\ndecorated with a symbol, either   or  , indicating whether the message was an error.  You\ncan find details about the Lean output by hovering your mouse over the\nsymbol in question, as shown below.", 
            "title": "Checking with Lean"
        }, 
        {
            "location": "/lean-example/tutorial-1/#so-what", 
            "text": "", 
            "title": "So what?"
        }, 
        {
            "location": "/lean-example/tutorial-1/#benefits", 
            "text": "This means there is a simple UI in which you can type literate  Lean code,\nand it looks nice.  Furthermore, the validation results are presented as\nnicely as they are in  the official online Lean\nenvironment .", 
            "title": "Benefits"
        }, 
        {
            "location": "/lean-example/tutorial-1/#missing-pieces", 
            "text": "There are many disadvantages to the simple app just demonstrated, many of\nwhich will be addressed individually in later pages in this tutorial.  The\nfirst disadvantage that comes to mind is that the reader still needs to\nspeak Lean code rather fluently (e.g.,  check  and  print  and other\ncommands) to use this software.  How might we improve that?  Let's see:  Continue to Part 2.", 
            "title": "Missing pieces"
        }, 
        {
            "location": "/lean-example/tutorial-2/", 
            "text": "Lean App Tutorial, Part 2\n\n\nThis page assumes you've read \nPart 1\n.\n\n\nTry the web app live now.\n\n\nThe end of that document pointed out a needed improvement:  The bubbles in a\ndocument all contain Lean code, which expects the reader to be fluent in it.\nLet's see a first step towards reducing that problem.\n\n\nHiding Commands\n\n\nIn the previous part of the tutorial, we saw that entire Lean commands can\nbe embedded in a bubble, like so:\n\n\n\n\nIf you wish to hide the command, leaving only the mathematical content (in\nthis case an expression in the language of dependent type theory),\nright-click the bubble and choose the \"Edit command...\" item from the\ncontext menu.  Specify the command there, and you may then remove it from\nthe bubble.  It will appear on the bubble's tag, and function as if it were\ninside the bubble, at the beginning, as shown here.\n\n\n\n\nSo what?\n\n\nBenefits\n\n\nNow Lean code can be more naturally worked into the surrounding prose, as\nshown in the example below.\n\n\n\n\n(The square brackets have been hidden in this example, using the View menu.)\n\n\nMissing pieces\n\n\nMany additional aspects of Lean syntax must still be placed inside term\nbubbles, most notably the \na : A\n notation at the heart of dependent type\ntheory.  Let's address that now:\n\n\nContinue to Part 3.", 
            "title": "Tutorial Part 2"
        }, 
        {
            "location": "/lean-example/tutorial-2/#lean-app-tutorial-part-2", 
            "text": "This page assumes you've read  Part 1 .  Try the web app live now.  The end of that document pointed out a needed improvement:  The bubbles in a\ndocument all contain Lean code, which expects the reader to be fluent in it.\nLet's see a first step towards reducing that problem.", 
            "title": "Lean App Tutorial, Part 2"
        }, 
        {
            "location": "/lean-example/tutorial-2/#hiding-commands", 
            "text": "In the previous part of the tutorial, we saw that entire Lean commands can\nbe embedded in a bubble, like so:   If you wish to hide the command, leaving only the mathematical content (in\nthis case an expression in the language of dependent type theory),\nright-click the bubble and choose the \"Edit command...\" item from the\ncontext menu.  Specify the command there, and you may then remove it from\nthe bubble.  It will appear on the bubble's tag, and function as if it were\ninside the bubble, at the beginning, as shown here.", 
            "title": "Hiding Commands"
        }, 
        {
            "location": "/lean-example/tutorial-2/#so-what", 
            "text": "", 
            "title": "So what?"
        }, 
        {
            "location": "/lean-example/tutorial-2/#benefits", 
            "text": "Now Lean code can be more naturally worked into the surrounding prose, as\nshown in the example below.   (The square brackets have been hidden in this example, using the View menu.)", 
            "title": "Benefits"
        }, 
        {
            "location": "/lean-example/tutorial-2/#missing-pieces", 
            "text": "Many additional aspects of Lean syntax must still be placed inside term\nbubbles, most notably the  a : A  notation at the heart of dependent type\ntheory.  Let's address that now:  Continue to Part 3.", 
            "title": "Missing pieces"
        }, 
        {
            "location": "/lean-example/tutorial-3/", 
            "text": "Lean App Tutorial, Part 3\n\n\nThis page assumes you've read Parts \n1\n and\n\n2\n.\n\n\nTry the web app live now.\n\n\nPart 2\n ended by pointing out that the UI could be better\nif the common syntactic form \na : A\n in Lean were supported in this app.\nThis page of the tutorial introduces how it's supported.\n\n\nType Groups\n\n\nNext to the toolbar button that wraps text in a \"term\" bubble is a button\nfor wrapping text in a \"type\" bubble.  While term bubbles are gray, type\nbubbles are green.  The toolbar button for marking text as a type is\nimmediately to the right of that for marking text as a term.\n\n\n\n\nIf you mark something as a type in your document, however, and click \"Run\nLean,\" it will say that the type is not attached to any term, and thus\ncannot be validated on its own.  (The gold starburst indicates a warning,\nas opposed to an outright error.)\n\n\n\n\nConnecting Types to Terms\n\n\nTo connect one bubble to another (such as a type to the term it modifies),\nuse the connection button in the toolbar, labeled \"Connect pieces of Lean\ncode\" in the image below.\n\n\n\n\nFollow this process:\n\n\n\n\nPlace your cursor inside the type bubble.\n\n\nClick the arrow button shown in the image above.\n\n\nClick inside the term that it modifies.\n\n\n\n\nThis connects the type to the term visually on screen, with an arrow.  It\nalso permits you to separate the type and the term in your text, and let the\ntext flow as smoothly as you'd like around them.  The type can precede the\nterm, or follow it.  Here is an example.\n\n\n\n\nTo disconnect a type and a term, just perform the connection process again.\nIt toggles the connection off.\n\n\nValidation\n\n\nWhen you \"Run Lean\" on a document with the configuration shown above, the\ntype is treated as modifying the term.  If the term has a \"check\" command\nembedded in it, for instance, the check will include the type assertion, as\nshown here.\n\n\n\n\nSo what?\n\n\nBenefits\n\n\nThe idea introduced above makes further progress in permitting you as a\ndocument author to structure your text as you see fit, without needing to\nbe bound by the notational conventions of Lean.  The example images above\nshow how you can structure your prose as you like, and fit bubbles and\nconnections among them into your prose in whatever way it necessitates.\n\n\nNote that the visual clutter shown above completely disappears when the user\ntakes their cursor out of the bubbles in question.  The image below shows\nthe document with validation complete (so the green checks are present) but\nwith bubble boundaries hidden (from the View menu).\n\n\n\n\nMissing pieces\n\n\nOf course, there are still occasions where some Lean syntax is unavoidable.\nFor instance, in the code \ndefinition A : B := C\n, we have no way to\nseparate the \nC\n (which may be a very large expression) from the rest.\nWe'll see how to solve that problem next.\n\n\nContinue to Part 4.", 
            "title": "Tutorial Part 3"
        }, 
        {
            "location": "/lean-example/tutorial-3/#lean-app-tutorial-part-3", 
            "text": "This page assumes you've read Parts  1  and 2 .  Try the web app live now.  Part 2  ended by pointing out that the UI could be better\nif the common syntactic form  a : A  in Lean were supported in this app.\nThis page of the tutorial introduces how it's supported.", 
            "title": "Lean App Tutorial, Part 3"
        }, 
        {
            "location": "/lean-example/tutorial-3/#type-groups", 
            "text": "Next to the toolbar button that wraps text in a \"term\" bubble is a button\nfor wrapping text in a \"type\" bubble.  While term bubbles are gray, type\nbubbles are green.  The toolbar button for marking text as a type is\nimmediately to the right of that for marking text as a term.   If you mark something as a type in your document, however, and click \"Run\nLean,\" it will say that the type is not attached to any term, and thus\ncannot be validated on its own.  (The gold starburst indicates a warning,\nas opposed to an outright error.)", 
            "title": "Type Groups"
        }, 
        {
            "location": "/lean-example/tutorial-3/#connecting-types-to-terms", 
            "text": "To connect one bubble to another (such as a type to the term it modifies),\nuse the connection button in the toolbar, labeled \"Connect pieces of Lean\ncode\" in the image below.   Follow this process:   Place your cursor inside the type bubble.  Click the arrow button shown in the image above.  Click inside the term that it modifies.   This connects the type to the term visually on screen, with an arrow.  It\nalso permits you to separate the type and the term in your text, and let the\ntext flow as smoothly as you'd like around them.  The type can precede the\nterm, or follow it.  Here is an example.   To disconnect a type and a term, just perform the connection process again.\nIt toggles the connection off.", 
            "title": "Connecting Types to Terms"
        }, 
        {
            "location": "/lean-example/tutorial-3/#validation", 
            "text": "When you \"Run Lean\" on a document with the configuration shown above, the\ntype is treated as modifying the term.  If the term has a \"check\" command\nembedded in it, for instance, the check will include the type assertion, as\nshown here.", 
            "title": "Validation"
        }, 
        {
            "location": "/lean-example/tutorial-3/#so-what", 
            "text": "", 
            "title": "So what?"
        }, 
        {
            "location": "/lean-example/tutorial-3/#benefits", 
            "text": "The idea introduced above makes further progress in permitting you as a\ndocument author to structure your text as you see fit, without needing to\nbe bound by the notational conventions of Lean.  The example images above\nshow how you can structure your prose as you like, and fit bubbles and\nconnections among them into your prose in whatever way it necessitates.  Note that the visual clutter shown above completely disappears when the user\ntakes their cursor out of the bubbles in question.  The image below shows\nthe document with validation complete (so the green checks are present) but\nwith bubble boundaries hidden (from the View menu).", 
            "title": "Benefits"
        }, 
        {
            "location": "/lean-example/tutorial-3/#missing-pieces", 
            "text": "Of course, there are still occasions where some Lean syntax is unavoidable.\nFor instance, in the code  definition A : B := C , we have no way to\nseparate the  C  (which may be a very large expression) from the rest.\nWe'll see how to solve that problem next.  Continue to Part 4.", 
            "title": "Missing pieces"
        }, 
        {
            "location": "/lean-example/tutorial-4/", 
            "text": "Lean App Tutorial, Part 4\n\n\nThis page assumes you've read Parts \n1\n, \n2\n,\nand \n3\n.\n\n\nTry the web app live now.\n\n\nThe end of \nPart 3\n pointed out that Lean definitions (and\nhence theorems and examples) cannot yet have their body split out from the\nrest of the code.  This tutorial page solves that problem.\n\n\nBody Groups\n\n\nIn Lean, theorems, defintions, and examples are all of the form\n\ndefinition name : type := body\n, where the word \"definition\" may instead be\n\"theorem\" or \"example.\"  This is the next syntax we permit breaking out.  We\ncall the final element of that structure the \"body\" and have a new bubble\ntype for it in the app.\n\n\nExample 1: A Definition\n\n\nLet's assume that we want to write a document embodying the Lean code\n\ndefinition three : nat := 3\n.  Certainly, we could simply put that code\ninside a term bubble, but that requires our document to contain Lean\nsyntax.  Here is an alternate way.\n\n\n\n\nThis document has plenty of non-bubbled text that is irrelevant to the\nresults of the \"Run Lean\" operation, which pays attention only to the\ncontents of the bubbles.  But that non-bubbled text is very helpful, for\nsomewhat obvious reasons (also described \nat the end of this\npage\n).\n\n\nIf we use the View menu to show the boundaries of the bubbles then the\nresult looks like the following.\n\n\n\n\nNotice that the app can convert these broken-apart pieces into Lean code\ncorrectly, so that it validates.\n\n\nThe type is connected to the term in the manner introduced in \nthe previous\npart of this tutorial\n.  But the body is also connected in\nthe same way, as shown here.\n\n\n\n\nCreating the Structure\n\n\nTo create a body group, use the blue bracket button in the toolbar below\n(third button of those labeled \"Mark Lean code in your document\").\n\n\n\n\nTo connect a body to the term being defined (or the statement of a theorem,\nusing the body as its proof), use the same technique as discussed in \nthe\nprevious part of this tutorial\n:\n\n\n\n\nPlace your cursor inside the body bubble.\n\n\nClick the arrow button in the toolbar.\n\n\nClick inside the term for which that body is the definition or proof.\n\n\n\n\nWhat goes inside\n\n\nA body bubble's contents, if they are just plain text, are interpreted like\nthe contents of a term bubble.  This is how the example above works.  But\nthat is just the simplest of the ways you can use a body bubble.  Here is a\ncomprehensive list.\n\n\n\n\nIf a body bubble contains no other bubbles, then its text content is\n   interpreted as the Lean code for a term (as above).\n\n\nIf a body bubble contains a single term bubble, then the body bubble's\n   meaning is the same as that of the single term bubble.\n\n\nIf a body bubble contains n term bubbles, then the first n-1 are seen as\n   parameters and the final one is seen as the body of a lambda expression.\n   Thus for example, the structure shown below defines a function.  It could\n   be used as the body of a definition.\n\n\n\n\n\n\nThe second case is a generalization of the first, permitting explanatory\ntext outside the inner bubble; the first case can be seen as shorthand for\nthe second.  The third case is more general still, because the second case\nis the 0-parameter version of the third case.\n\n\nExample 2: Theorem and Proof\n\n\nThis permits us to put a little exposition in our theorems and proofs, as\nshown in the following image.\n\n\n\n\nThe structure that reveals itself when your cursor is inside the main term\n(the name and premises of the theorem) is as shown below.\n\n\n\n\nIn these examples, I've placed a term bubble inside the body bubble, which\nshows that the meaning is the same.\n\n\nSo what?\n\n\nBenefits\n\n\nThis lets us make more readable definitions and theorems, as shown above.\nThe expository text between bubbles has two main benefits.  A human reader\ncan understand the document without thinking through Lean syntax.  And the\ndocument author, when that writer is a student, can practice expressing\nmathematical proofs in a readable and understandable way, and have that\nexposition evaluated by an instructor.\n\n\nMissing pieces\n\n\nThe definition and proof shown above are both very short.  If they were\nlonger, there would be very large, indivisible term bubbles in the document,\nwhich cannot contain prose comments.  Let's see how to fix that.\n\n\nContinue to Part 5.", 
            "title": "Tutorial Part 4"
        }, 
        {
            "location": "/lean-example/tutorial-4/#lean-app-tutorial-part-4", 
            "text": "This page assumes you've read Parts  1 ,  2 ,\nand  3 .  Try the web app live now.  The end of  Part 3  pointed out that Lean definitions (and\nhence theorems and examples) cannot yet have their body split out from the\nrest of the code.  This tutorial page solves that problem.", 
            "title": "Lean App Tutorial, Part 4"
        }, 
        {
            "location": "/lean-example/tutorial-4/#body-groups", 
            "text": "In Lean, theorems, defintions, and examples are all of the form definition name : type := body , where the word \"definition\" may instead be\n\"theorem\" or \"example.\"  This is the next syntax we permit breaking out.  We\ncall the final element of that structure the \"body\" and have a new bubble\ntype for it in the app.", 
            "title": "Body Groups"
        }, 
        {
            "location": "/lean-example/tutorial-4/#example-1-a-definition", 
            "text": "Let's assume that we want to write a document embodying the Lean code definition three : nat := 3 .  Certainly, we could simply put that code\ninside a term bubble, but that requires our document to contain Lean\nsyntax.  Here is an alternate way.   This document has plenty of non-bubbled text that is irrelevant to the\nresults of the \"Run Lean\" operation, which pays attention only to the\ncontents of the bubbles.  But that non-bubbled text is very helpful, for\nsomewhat obvious reasons (also described  at the end of this\npage ).  If we use the View menu to show the boundaries of the bubbles then the\nresult looks like the following.   Notice that the app can convert these broken-apart pieces into Lean code\ncorrectly, so that it validates.  The type is connected to the term in the manner introduced in  the previous\npart of this tutorial .  But the body is also connected in\nthe same way, as shown here.", 
            "title": "Example 1: A Definition"
        }, 
        {
            "location": "/lean-example/tutorial-4/#creating-the-structure", 
            "text": "To create a body group, use the blue bracket button in the toolbar below\n(third button of those labeled \"Mark Lean code in your document\").   To connect a body to the term being defined (or the statement of a theorem,\nusing the body as its proof), use the same technique as discussed in  the\nprevious part of this tutorial :   Place your cursor inside the body bubble.  Click the arrow button in the toolbar.  Click inside the term for which that body is the definition or proof.", 
            "title": "Creating the Structure"
        }, 
        {
            "location": "/lean-example/tutorial-4/#what-goes-inside", 
            "text": "A body bubble's contents, if they are just plain text, are interpreted like\nthe contents of a term bubble.  This is how the example above works.  But\nthat is just the simplest of the ways you can use a body bubble.  Here is a\ncomprehensive list.   If a body bubble contains no other bubbles, then its text content is\n   interpreted as the Lean code for a term (as above).  If a body bubble contains a single term bubble, then the body bubble's\n   meaning is the same as that of the single term bubble.  If a body bubble contains n term bubbles, then the first n-1 are seen as\n   parameters and the final one is seen as the body of a lambda expression.\n   Thus for example, the structure shown below defines a function.  It could\n   be used as the body of a definition.    The second case is a generalization of the first, permitting explanatory\ntext outside the inner bubble; the first case can be seen as shorthand for\nthe second.  The third case is more general still, because the second case\nis the 0-parameter version of the third case.", 
            "title": "What goes inside"
        }, 
        {
            "location": "/lean-example/tutorial-4/#example-2-theorem-and-proof", 
            "text": "This permits us to put a little exposition in our theorems and proofs, as\nshown in the following image.   The structure that reveals itself when your cursor is inside the main term\n(the name and premises of the theorem) is as shown below.   In these examples, I've placed a term bubble inside the body bubble, which\nshows that the meaning is the same.", 
            "title": "Example 2: Theorem and Proof"
        }, 
        {
            "location": "/lean-example/tutorial-4/#so-what", 
            "text": "", 
            "title": "So what?"
        }, 
        {
            "location": "/lean-example/tutorial-4/#benefits", 
            "text": "This lets us make more readable definitions and theorems, as shown above.\nThe expository text between bubbles has two main benefits.  A human reader\ncan understand the document without thinking through Lean syntax.  And the\ndocument author, when that writer is a student, can practice expressing\nmathematical proofs in a readable and understandable way, and have that\nexposition evaluated by an instructor.", 
            "title": "Benefits"
        }, 
        {
            "location": "/lean-example/tutorial-4/#missing-pieces", 
            "text": "The definition and proof shown above are both very short.  If they were\nlonger, there would be very large, indivisible term bubbles in the document,\nwhich cannot contain prose comments.  Let's see how to fix that.  Continue to Part 5.", 
            "title": "Missing pieces"
        }, 
        {
            "location": "/lean-example/tutorial-5/", 
            "text": "Lean App Tutorial, Part 5\n\n\nThis page assumes you've read Parts \n1\n, \n2\n,\n\n3\n, and \n4\n.\n\n\nTry the web app live now.\n\n\nThe end of \nPart 4\n pointed out that while the bodies of Lean\ndefinitions, theorems, and examples can be split out from the name and type\nof the definition, etc., they remain indivisible, which presents a challenge\nto inserting helpful exposition among them.\n\n\nTerm Trees\n\n\nConsider a Lean term like \nand.intro (and.elim_right E) (and.elim_left E)\n,\nwhich would appear in the proof of the commutativity of the conjunction\noperator.  This term is nested applications, a syntax tree.  We could\ndiagram its hierarchical structure as follows.\n\n\nand.intro\n    and.elim_right\n        E\n    and.elim_left\n        E\n\n\n\nIn a document, it is inconvenient to have to place all these symbols one\nafter another, because they prevent our inserting exposition between them.\nThis is especially true since this is only a small example, and much larger\nproofs are common.\n\n\nWe would like to do something more like the following.\n\n\n\n\nThis is possible by breaking the syntax tree for the proof term into\nsmaller pieces, which we then connect with arrows, so that the app knows\nhow to reconstruct the original Lean code from the pieces.\n\n\nBuilding Term Trees\n\n\nIf you have a term of the form \noperator operand1 ... operandN\n in a\ndocument, and you wish to break it up, do so as follows.\n\n\n\n\nBreak the term bubble surrounding the term.  (Do so by using the delete\n    or backspace key on either of its boundaries.)\n\n\nPlace a new term bubble around just the operator.\n\n\nPlace a new term bubble around the first operand.\n\n\nUse the arrow button on the toolbar to connect the operator to that\n    operand.\n\n\nRepeat the last two steps for the second operand, and the third, and so\n    on.\n\n\n\n\nThe app will understand that the source of the arrows is the operator, and\nthe destinations are the operands.  The order of the arrows is significant,\nand is displayed by the order in which the arrows leave the operator bubble.\nTo destroy arrows and reform them, simply repeat the connecting process, and\nthe arrow will be toggled off; this can help you reorder them.\n\n\nNote that the operator and operands do not need to appear in the document in\nthe order in which they would appear in Lean code.  As long as the arrows\nexist in the correct direction and the correct order, the bubbles themselves\ncan appear in any sequence.\n\n\nExample\n\n\nConsider the image shown earlier on this page.  Here is how it was created.\nBubbles were placed as follows:\n\n\n\n\nConnections were made from the theorem statement and body to the theorem\nname in the way you already know from \nthe previous tutorial page\n:\n\n\n\n\nInside a body, the first terms are treated as parameters, which in the case\nof proofs means that they function as assumptions.  In this proof, we have\none assumption, which should be assigned a type as shown here.\n\n\n\n\nEach of the elimination steps in the body is applied to its argument, and in\nturn, has the introduction step applied to it.  Thus the remainder of the\ntheorem body is actually just one large term, split out into five bubbles,\nforming one term tree.  In the following image, the cursor is in the shaded\nbubble, so you can see only the arrows into and out of that bubble.  There\nare corresponding arrows into and out of the \nand.elim_left\n step as well.\n\n\n\n\nThus the set of arrows connecting the last five term bubbles in the proof\nform the same tree shown at the top of this page, with the arrows pointing\nfrom each term to its subterm(s).\n\n\nSo what?\n\n\nBenefits\n\n\nAs you can see from the example in this document, we can now begin to write\ntheorems in a much more natural style, with as much exposition between\nsteps as we find necessary.\n\n\nIn fact, the example shows that we can even reorder the elements of the\nproof term to be in whatever sequence we feel natural; the introduction\nstep, which would appear first in the Lean code\n\nand.intro (and.elim_right E) (and.elim_left E)\n, appears last in the\ndocument.\n\n\nMissing pieces\n\n\nThe statement of the theorem still contains the ugly code bit\n\n{P Q : Prop}\n, which we have not yet learned to eliminate.  Let's do that\nnext.\n\n\nContinue to Part 6.", 
            "title": "Tutorial Part 5"
        }, 
        {
            "location": "/lean-example/tutorial-5/#lean-app-tutorial-part-5", 
            "text": "This page assumes you've read Parts  1 ,  2 , 3 , and  4 .  Try the web app live now.  The end of  Part 4  pointed out that while the bodies of Lean\ndefinitions, theorems, and examples can be split out from the name and type\nof the definition, etc., they remain indivisible, which presents a challenge\nto inserting helpful exposition among them.", 
            "title": "Lean App Tutorial, Part 5"
        }, 
        {
            "location": "/lean-example/tutorial-5/#term-trees", 
            "text": "Consider a Lean term like  and.intro (and.elim_right E) (and.elim_left E) ,\nwhich would appear in the proof of the commutativity of the conjunction\noperator.  This term is nested applications, a syntax tree.  We could\ndiagram its hierarchical structure as follows.  and.intro\n    and.elim_right\n        E\n    and.elim_left\n        E  In a document, it is inconvenient to have to place all these symbols one\nafter another, because they prevent our inserting exposition between them.\nThis is especially true since this is only a small example, and much larger\nproofs are common.  We would like to do something more like the following.   This is possible by breaking the syntax tree for the proof term into\nsmaller pieces, which we then connect with arrows, so that the app knows\nhow to reconstruct the original Lean code from the pieces.", 
            "title": "Term Trees"
        }, 
        {
            "location": "/lean-example/tutorial-5/#building-term-trees", 
            "text": "If you have a term of the form  operator operand1 ... operandN  in a\ndocument, and you wish to break it up, do so as follows.   Break the term bubble surrounding the term.  (Do so by using the delete\n    or backspace key on either of its boundaries.)  Place a new term bubble around just the operator.  Place a new term bubble around the first operand.  Use the arrow button on the toolbar to connect the operator to that\n    operand.  Repeat the last two steps for the second operand, and the third, and so\n    on.   The app will understand that the source of the arrows is the operator, and\nthe destinations are the operands.  The order of the arrows is significant,\nand is displayed by the order in which the arrows leave the operator bubble.\nTo destroy arrows and reform them, simply repeat the connecting process, and\nthe arrow will be toggled off; this can help you reorder them.  Note that the operator and operands do not need to appear in the document in\nthe order in which they would appear in Lean code.  As long as the arrows\nexist in the correct direction and the correct order, the bubbles themselves\ncan appear in any sequence.", 
            "title": "Building Term Trees"
        }, 
        {
            "location": "/lean-example/tutorial-5/#example", 
            "text": "Consider the image shown earlier on this page.  Here is how it was created.\nBubbles were placed as follows:   Connections were made from the theorem statement and body to the theorem\nname in the way you already know from  the previous tutorial page :   Inside a body, the first terms are treated as parameters, which in the case\nof proofs means that they function as assumptions.  In this proof, we have\none assumption, which should be assigned a type as shown here.   Each of the elimination steps in the body is applied to its argument, and in\nturn, has the introduction step applied to it.  Thus the remainder of the\ntheorem body is actually just one large term, split out into five bubbles,\nforming one term tree.  In the following image, the cursor is in the shaded\nbubble, so you can see only the arrows into and out of that bubble.  There\nare corresponding arrows into and out of the  and.elim_left  step as well.   Thus the set of arrows connecting the last five term bubbles in the proof\nform the same tree shown at the top of this page, with the arrows pointing\nfrom each term to its subterm(s).", 
            "title": "Example"
        }, 
        {
            "location": "/lean-example/tutorial-5/#so-what", 
            "text": "", 
            "title": "So what?"
        }, 
        {
            "location": "/lean-example/tutorial-5/#benefits", 
            "text": "As you can see from the example in this document, we can now begin to write\ntheorems in a much more natural style, with as much exposition between\nsteps as we find necessary.  In fact, the example shows that we can even reorder the elements of the\nproof term to be in whatever sequence we feel natural; the introduction\nstep, which would appear first in the Lean code and.intro (and.elim_right E) (and.elim_left E) , appears last in the\ndocument.", 
            "title": "Benefits"
        }, 
        {
            "location": "/lean-example/tutorial-5/#missing-pieces", 
            "text": "The statement of the theorem still contains the ugly code bit {P Q : Prop} , which we have not yet learned to eliminate.  Let's do that\nnext.  Continue to Part 6.", 
            "title": "Missing pieces"
        }, 
        {
            "location": "/lean-example/tutorial-6/", 
            "text": "Lean App Tutorial, Part 6\n\n\nThis page assumes you've read Parts \n1\n, \n2\n,\n\n3\n, \n4\n, and \n5\n.\n\n\nTry the web app live now.\n\n\nThe end of \nPart 5\n promised to take code like \n{P Q : Prop}\n\nout of the names of theorems, and this tutorial page shows how.\n\n\nSections\n\n\nRecall the nicely organized theorem from \nthe previous tutorial\npage\n.\n\n\n\n\nThe one complaint we had about it was that its statement had to contain the\ndeclarations of the variables \nP\n and \nQ\n, using the Lean syntax\n\nsimple {P Q : Prop}\n.  To make our documents more readable, we would like\nsomething more like the following.\n\n\n\n\nThis can be accomplished very simply, as follows.\n\n\n\n\nCreate a term bubble for each variable, before the theorem.\n\n\nEmbed in each such term bubble the Lean command \"variable\"\n    (as in \nPart 2 of the tutorial\n).\n\n\nAssign a type to each such bubble (or the same type to more than one)\n    (as in \nPart 3 of the tutorial\n).\n\n\nWrap the variable terms and the theorem in one, large body bubble.\n    Do not connect it to anything via arrows.\n\n\n\n\nSuch disconnected body bubbles function as \"sections\" in Lean code, and will\nthus localize the variable declarations to the theorem only (unless you\nplace other theorems inside the same body, of course).\n\n\nThe bubble structure described above is shown here.\n\n\n\n\nSo what?\n\n\nBenefits\n\n\nWe have further cleaned up the syntax for stating and proving theorems.\nThere is now almost no Lean syntax in the theorem at all!\n\n\nMissing pieces\n\n\nIf we can create Lean \nsection\ns, why not Lean \nnamespace\ns?  We can!\n\n\nContinue to Part 7.", 
            "title": "Tutorial Part 6"
        }, 
        {
            "location": "/lean-example/tutorial-6/#lean-app-tutorial-part-6", 
            "text": "This page assumes you've read Parts  1 ,  2 , 3 ,  4 , and  5 .  Try the web app live now.  The end of  Part 5  promised to take code like  {P Q : Prop} \nout of the names of theorems, and this tutorial page shows how.", 
            "title": "Lean App Tutorial, Part 6"
        }, 
        {
            "location": "/lean-example/tutorial-6/#sections", 
            "text": "Recall the nicely organized theorem from  the previous tutorial\npage .   The one complaint we had about it was that its statement had to contain the\ndeclarations of the variables  P  and  Q , using the Lean syntax simple {P Q : Prop} .  To make our documents more readable, we would like\nsomething more like the following.   This can be accomplished very simply, as follows.   Create a term bubble for each variable, before the theorem.  Embed in each such term bubble the Lean command \"variable\"\n    (as in  Part 2 of the tutorial ).  Assign a type to each such bubble (or the same type to more than one)\n    (as in  Part 3 of the tutorial ).  Wrap the variable terms and the theorem in one, large body bubble.\n    Do not connect it to anything via arrows.   Such disconnected body bubbles function as \"sections\" in Lean code, and will\nthus localize the variable declarations to the theorem only (unless you\nplace other theorems inside the same body, of course).  The bubble structure described above is shown here.", 
            "title": "Sections"
        }, 
        {
            "location": "/lean-example/tutorial-6/#so-what", 
            "text": "", 
            "title": "So what?"
        }, 
        {
            "location": "/lean-example/tutorial-6/#benefits", 
            "text": "We have further cleaned up the syntax for stating and proving theorems.\nThere is now almost no Lean syntax in the theorem at all!", 
            "title": "Benefits"
        }, 
        {
            "location": "/lean-example/tutorial-6/#missing-pieces", 
            "text": "If we can create Lean  section s, why not Lean  namespace s?  We can!  Continue to Part 7.", 
            "title": "Missing pieces"
        }, 
        {
            "location": "/lean-example/tutorial-7/", 
            "text": "Lean App Tutorial, Part 7\n\n\nThis page assumes you've read Parts \n1\n, \n2\n,\n\n3\n, \n4\n, \n5\n, and\n\n6\n.\n\n\nTry the web app live now.\n\n\nThe end of \nPart 6\n stated that you can use Lean namespaces\njust as easily as Lean sections.  This tutorial page covers how to do so.\n\n\nNamespaces\n\n\nRecall the nicely organized theorem from \nthe previous tutorial\npage\n.\n\n\n\n\nWe could do the same thing in a namespace rather than a section, if we\nwanted to.  (We might want to in order to avoid filling the global\nnamespace with too many identifiers, or to organize our code, or to prevent\na clash with an existing theorem name, etc.)\n\n\nIt is a simple matter to change a section into a namespace, or vice versa.\n\n\n\n\nRight-click any text inside the Section bubble (but not inside any inner\n    bubble).\n\n\nFrom the context menu, choose \"Make this a namespace...\"\n\n\nEnter a valid Lean identifier in the box that appears.\n\n\nClick OK and the section will become a namespace.\n\n\n\n\nTo rename the namespace, or convert it back to a section, follow the same\nprocedure as above, but choosing the appropriate item from the context menu.\nThey are named in the obvious way.\n\n\nIf the bubble shown above were a namespace, we could then access its\ncontents outside the namespace using dot notation, as in any Lean code.\nSee the following example.\n\n\n\n\nSo what?\n\n\nBenefits\n\n\nYou can now organize your Lean code into namespaces in this app, just as you\ncould in Lean.  This is useful for the reasons stated above.\n\n\nMissing pieces\n\n\nThe final missing piece is that this app does not seem to use any of the\nattractive symbols Lean uses, such as the blackboard bold N for natural\nnumbers, and so on.\n\n\nLet's see how to fix that in the final part of the tutorial.\n\n\nContinue to Part 8.", 
            "title": "Tutorial Part 7"
        }, 
        {
            "location": "/lean-example/tutorial-7/#lean-app-tutorial-part-7", 
            "text": "This page assumes you've read Parts  1 ,  2 , 3 ,  4 ,  5 , and 6 .  Try the web app live now.  The end of  Part 6  stated that you can use Lean namespaces\njust as easily as Lean sections.  This tutorial page covers how to do so.", 
            "title": "Lean App Tutorial, Part 7"
        }, 
        {
            "location": "/lean-example/tutorial-7/#namespaces", 
            "text": "Recall the nicely organized theorem from  the previous tutorial\npage .   We could do the same thing in a namespace rather than a section, if we\nwanted to.  (We might want to in order to avoid filling the global\nnamespace with too many identifiers, or to organize our code, or to prevent\na clash with an existing theorem name, etc.)  It is a simple matter to change a section into a namespace, or vice versa.   Right-click any text inside the Section bubble (but not inside any inner\n    bubble).  From the context menu, choose \"Make this a namespace...\"  Enter a valid Lean identifier in the box that appears.  Click OK and the section will become a namespace.   To rename the namespace, or convert it back to a section, follow the same\nprocedure as above, but choosing the appropriate item from the context menu.\nThey are named in the obvious way.  If the bubble shown above were a namespace, we could then access its\ncontents outside the namespace using dot notation, as in any Lean code.\nSee the following example.", 
            "title": "Namespaces"
        }, 
        {
            "location": "/lean-example/tutorial-7/#so-what", 
            "text": "", 
            "title": "So what?"
        }, 
        {
            "location": "/lean-example/tutorial-7/#benefits", 
            "text": "You can now organize your Lean code into namespaces in this app, just as you\ncould in Lean.  This is useful for the reasons stated above.", 
            "title": "Benefits"
        }, 
        {
            "location": "/lean-example/tutorial-7/#missing-pieces", 
            "text": "The final missing piece is that this app does not seem to use any of the\nattractive symbols Lean uses, such as the blackboard bold N for natural\nnumbers, and so on.  Let's see how to fix that in the final part of the tutorial.  Continue to Part 8.", 
            "title": "Missing pieces"
        }, 
        {
            "location": "/lean-example/tutorial-8/", 
            "text": "Lean App Tutorial, Part 8\n\n\nThis page assumes you've read Parts \n1\n, \n2\n,\n\n3\n, \n4\n, \n5\n,\n\n6\n, and \n7\n.\n\n\nTry the web app live now.\n\n\nThe end of \nPart 7\n promised a tutorial on inserting special\nsymbols into the document, which Lean understands.\n\n\nSymbols\n\n\nLean code can contain many Unicode characters that resemble mathematical\nnotation, and thus make documents more attractive.  This appliction supports\nthose characters, as shown in the image below.\n\n\n\n\nThe blackboard bold N stands for the natural numbers (formerly written nat)\nand the greek letter lambda stands for \"fun\" or \"assume\" in Lean.\n\n\nYou can enter these symbols by typing a backslash, followed by the symbol's\nname, followed by the spacebar (or alternately followed by another\nbackslash, if you're starting another symbol immediately afterwards).  For\nexample, to type the first line of the document shown above, you would\nproceed as follows.\n\n\n\n\nClick the button to start a term group.\n\n\nType \ncheck (3:\\nat\n.\n\n\nPress the spacebar, and \n\\nat\n will be replaced by the blackboard bold\n    N.\n\n\nType \n)\n.\n\n\n\n\nCatalog\n\n\nWhat symbols are available?  Lots!  Nearly 2,000, in fact!  But most of them\nare not useful in Lean itself.  Here are three ways to get started with\nkeyboard shortcuts:\n\n\n\n\nThe most important ones to know are \n\\and\n, \n\\or\n, \n\\to\n, \n\\neg\n,\n    \n\\forall\n, \n\\exists\n, \n\\pi\n, \n\\sigma\n, \n\\lambda\n, \n\\int\n, and \n\\nat\n.\n\n\nTake \nthe Lean tutorial\n, which\n    covers the keyboard shortcuts that work in Lean.  I imported the same\n    data file into this web app that they use in Lean, so all shortcuts that\n    work in Lean work here.\n\n\nIf you really want to know the full list of 1,959 shortcuts, you can\n    inspect \nthe (minified JSON) data file\n just mentioned.\n\n\n\n\nSo what?\n\n\nBenefits\n\n\nYour Lean documents will now look much less computer-ish, and much more\nmathematical and readable.\n\n\nMissing pieces\n\n\nThis is the last page of the tutorial, but surely you can think of ways that\nthis app could be improved.  Feel free to \nclone the project and start\ndeveloping with us!\n  Or contact one of the members\nof the development team through \nGitHub\n.\nYou can also open an issue there for bug reports or feature requests.", 
            "title": "Tutorial Part 8"
        }, 
        {
            "location": "/lean-example/tutorial-8/#lean-app-tutorial-part-8", 
            "text": "This page assumes you've read Parts  1 ,  2 , 3 ,  4 ,  5 , 6 , and  7 .  Try the web app live now.  The end of  Part 7  promised a tutorial on inserting special\nsymbols into the document, which Lean understands.", 
            "title": "Lean App Tutorial, Part 8"
        }, 
        {
            "location": "/lean-example/tutorial-8/#symbols", 
            "text": "Lean code can contain many Unicode characters that resemble mathematical\nnotation, and thus make documents more attractive.  This appliction supports\nthose characters, as shown in the image below.   The blackboard bold N stands for the natural numbers (formerly written nat)\nand the greek letter lambda stands for \"fun\" or \"assume\" in Lean.  You can enter these symbols by typing a backslash, followed by the symbol's\nname, followed by the spacebar (or alternately followed by another\nbackslash, if you're starting another symbol immediately afterwards).  For\nexample, to type the first line of the document shown above, you would\nproceed as follows.   Click the button to start a term group.  Type  check (3:\\nat .  Press the spacebar, and  \\nat  will be replaced by the blackboard bold\n    N.  Type  ) .", 
            "title": "Symbols"
        }, 
        {
            "location": "/lean-example/tutorial-8/#catalog", 
            "text": "What symbols are available?  Lots!  Nearly 2,000, in fact!  But most of them\nare not useful in Lean itself.  Here are three ways to get started with\nkeyboard shortcuts:   The most important ones to know are  \\and ,  \\or ,  \\to ,  \\neg ,\n     \\forall ,  \\exists ,  \\pi ,  \\sigma ,  \\lambda ,  \\int , and  \\nat .  Take  the Lean tutorial , which\n    covers the keyboard shortcuts that work in Lean.  I imported the same\n    data file into this web app that they use in Lean, so all shortcuts that\n    work in Lean work here.  If you really want to know the full list of 1,959 shortcuts, you can\n    inspect  the (minified JSON) data file  just mentioned.", 
            "title": "Catalog"
        }, 
        {
            "location": "/lean-example/tutorial-8/#so-what", 
            "text": "", 
            "title": "So what?"
        }, 
        {
            "location": "/lean-example/tutorial-8/#benefits", 
            "text": "Your Lean documents will now look much less computer-ish, and much more\nmathematical and readable.", 
            "title": "Benefits"
        }, 
        {
            "location": "/lean-example/tutorial-8/#missing-pieces", 
            "text": "This is the last page of the tutorial, but surely you can think of ways that\nthis app could be improved.  Feel free to  clone the project and start\ndeveloping with us!   Or contact one of the members\nof the development team through  GitHub .\nYou can also open an issue there for bug reports or feature requests.", 
            "title": "Missing pieces"
        }
    ]
}