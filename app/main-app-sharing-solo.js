// Generated by CoffeeScript 1.8.0
(function() {
  window.addEventListener('load', function() {
    var _ref, _ref1;
    if (typeof gapi !== "undefined" && gapi !== null) {
      if ((_ref = gapi.client) != null) {
        _ref.setApiKey('AIzaSyAf7F0I39DdI2jtD7zrPUa4eQvUXZ-K6W8');
      }
    }
    return typeof gapi !== "undefined" && gapi !== null ? (_ref1 = gapi.client) != null ? _ref1.load('urlshortener', 'v1', function() {}) : void 0 : void 0;
  }, false);

  window.groupMenuItems.sharelink = {
    text: 'Share document...',
    context: 'file',
    onclick: function() {
      var content, page, request, showURL, url, _ref, _ref1, _ref2;
      page = window.location.href.split('?')[0];
      content = embedMetadata(tinymce.activeEditor.getContent(), tinymce.activeEditor.LoadSave.saveMetaData());
      url = page + '?document=' + encodeURIComponent(content);
      showURL = function(url) {
        var embed;
        embed = ("<iframe src='" + url + "' width=800 height=600></iframe>").replace(/&/g, '&amp;').replace(/'/g, '&apos;').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        return tinymce.activeEditor.Dialogs.alert({
          title: 'Permanent Sharing Links',
          message: "<h3>Sharing URL</h3> <p>Copy this URL to your clipboard, and paste wherever you like, such as email.</p> <input type='text' size=50 id='firstURL' value='" + (url.replace(/'/g, '&apos;')) + "'/> <h3>Embedding HTML</h3> <p>Copy this HTML to your clipboard, and paste into any webpage or blog to embed a Lurch instance with this document in it.</p> <input type='text' size=50 value='" + embed + "'/> <script> var all = document.getElementsByTagName( 'input' ); for ( var i = 0 ; i < all.length ; i++ ) { all[i].addEventListener( 'focus', function ( event ) { var t = event.target; if ( t.select ) t.select(); else t.setSelectionRange( 0, t.value.length ); } ); } document.getElementById( 'firstURL' ).focus(); </script>"
        });
      };
      request = typeof gapi !== "undefined" && gapi !== null ? (_ref = gapi.client) != null ? (_ref1 = _ref.urlshortener) != null ? (_ref2 = _ref1.url) != null ? typeof _ref2.insert === "function" ? _ref2.insert({
        resource: {
          longUrl: url
        }
      }) : void 0 : void 0 : void 0 : void 0 : void 0;
      if (request == null) {
        return showURL(url);
      }
      return request.execute(function(response) {
        if (response.id != null) {
          return showURL(response.id);
        } else {
          return showURL(url);
        }
      });
    }
  };

}).call(this);

//# sourceMappingURL=main-app-sharing-solo.js.map
