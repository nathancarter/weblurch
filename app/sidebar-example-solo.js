// Generated by CoffeeScript 1.8.0
(function() {
  var addFormsAndCategoriesToToolbar, addMathQuillCSS, allNaturalLanguages, codeFormHierarchy, codeFormTranslators, formsAndCategories, groupToExplanation, isGroupRight, lastLanguageChoice, makeSelect, makeText, makeTextarea, markGroupRight, markGroupWith, markGroupWrong, menuItems, niceText, runTranslation, topLevelCategories,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  setAppName('SidebarApp');

  addHelpMenuSourceCodeLink('app/sidebar-example-solo.litcoffee');

  window.helpAboutText = '<p>See the fully documented <a target="top" href="https://github.com/nathancarter/weblurch/blob/master/app/sidebar-example-solo.litcoffee" >source code for this demo app</a>.</p>';

  formsAndCategories = {};

  topLevelCategories = function() {
    var allCategories, data, innerCategories, name, _i, _j, _len, _len1, _ref, _results;
    allCategories = [];
    innerCategories = [];
    for (name in formsAndCategories) {
      if (!__hasProp.call(formsAndCategories, name)) continue;
      data = formsAndCategories[name];
      if (data.type === 'category') {
        allCategories.push(name);
        _ref = data.contents;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          name = _ref[_i];
          if (__indexOf.call(innerCategories, name) < 0) {
            innerCategories.push(name);
          }
        }
      }
    }
    _results = [];
    for (_j = 0, _len1 = allCategories.length; _j < _len1; _j++) {
      name = allCategories[_j];
      if (__indexOf.call(innerCategories, name) < 0) {
        _results.push(name);
      }
    }
    return _results;
  };

  codeFormHierarchy = function(makeFormAction) {
    var categoriesProcessed, category, categoryToMenuItem, formToMenuItem, toMenuItem, _i, _len, _ref, _results;
    categoriesProcessed = [];
    formToMenuItem = function(name) {
      return {
        text: name,
        onclick: makeFormAction != null ? function() {
          return makeFormAction(name);
        } : function() {
          var after, boilerplate, editor, group, html, id, idStack, idToTag, nextTag, openClose, tagName, _ref, _ref1;
          editor = tinymce.activeEditor;
          boilerplate = codeFormTranslators[name]['example']['en'];
          if ((boilerplate == null) || !(editor != null ? (_ref = editor.selection) != null ? (_ref1 = _ref.getRng()) != null ? _ref1.collapsed : void 0 : void 0 : void 0)) {
            group = editor.Groups.groupCurrentSelection('codexp');
            group.set('tagName', name);
            return;
          }
          idStack = [];
          idToTag = {};
          html = '';
          while (nextTag = /<(\/?)([^>]+)>/.exec(boilerplate)) {
            html += boilerplate.slice(0, nextTag.index);
            if (codeFormTranslators.hasOwnProperty(nextTag[2])) {
              if (nextTag[1] === '') {
                openClose = 'open';
                idStack.push(id = editor.Groups.nextFreeId());
              } else {
                openClose = 'close';
                id = idStack.pop();
              }
              idToTag[id] = nextTag[2];
              html += grouperHTML('codexp', openClose, id, false, editor.Groups.groupTypes.codexp["" + openClose + "Image"]);
            } else {
              html += nextTag[0];
            }
            after = nextTag.index + nextTag[0].length;
            boilerplate = boilerplate.slice(after);
          }
          html += boilerplate;
          editor.insertContent(html);
          for (id in idToTag) {
            if (!__hasProp.call(idToTag, id)) continue;
            tagName = idToTag[id];
            editor.Groups[id].set('tagName', tagName);
          }
          return ($(editor.getDoc())).find('.math').each(function(i, block) {
            block.setAttribute('contenteditable', 'false');
            ($(block)).addClass('rendered-latex');
            return ($(block)).mathquill();
          });
        }
      };
    };
    categoryToMenuItem = function(name) {
      var item;
      if (__indexOf.call(categoriesProcessed, name) >= 0) {
        return {
          text: name,
          menu: []
        };
      } else {
        categoriesProcessed.push(name);
        return {
          text: name,
          menu: (function() {
            var _i, _len, _ref, _results;
            _ref = formsAndCategories[name].contents;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              item = _ref[_i];
              _results.push(toMenuItem(item));
            }
            return _results;
          })()
        };
      }
    };
    toMenuItem = function(name) {
      if (formsAndCategories[name].type === 'form') {
        return formToMenuItem(name);
      } else {
        return categoryToMenuItem(name);
      }
    };
    _ref = topLevelCategories();
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      category = _ref[_i];
      _results.push(toMenuItem(category));
    }
    return _results;
  };

  addFormsAndCategoriesToToolbar = function() {
    var count, menu, _i, _len, _ref;
    window.groupToolbarButtons = {};
    count = 1;
    _ref = codeFormHierarchy();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      menu = _ref[_i];
      menu.type = 'menubutton';
      window.groupToolbarButtons["category" + (count++)] = menu;
    }
    return window.groupToolbarButtons.toggleSidebar = {
      text: 'Toggle code view',
      onclick: function() {
        var sidebar, splitbar;
        sidebar = document.getElementById('sidebar');
        splitbar = window.splitter.find('.vsplitter').get(0);
        if (sidebar.style.display === 'none') {
          sidebar.style.display = 'block';
          splitbar.style.display = 'block';
          return splitter.position(splitter.position());
        } else {
          sidebar.style.display = 'none';
          splitbar.style.display = 'none';
          return window.editorContainer.style.width = '100%';
        }
      }
    };
  };

  window.registerCodeForm = function(name, validator) {
    formsAndCategories[name] = {
      type: 'form',
      validator: validator
    };
    addFormsAndCategoriesToToolbar();
    return name;
  };

  window.registerCategory = function(name, contents) {
    formsAndCategories[name] = {
      type: 'category',
      contents: contents
    };
    addFormsAndCategoriesToToolbar();
    return name;
  };

  codeFormTranslators = {};

  window.registerTranslator = function(form, language, output, translator) {
    var _base, _base1;
    if (codeFormTranslators[form] == null) {
      codeFormTranslators[form] = {};
    }
    if ((_base = codeFormTranslators[form])[output] == null) {
      _base[output] = {};
    }
    return (_base1 = codeFormTranslators[form][output])[language] != null ? _base1[language] : _base1[language] = translator;
  };

  runTranslation = function(group, language, output) {
    var child, childText, e, formName, index, letters, numArgs, pattern, recur, translator, _i, _len, _ref;
    recur = function(g) {
      return runTranslation(g, language, output);
    };
    formName = group.get('tagName');
    if (!codeFormTranslators.hasOwnProperty(formName)) {
      return "Translation error: Form " + formName + " has no translators registered";
    }
    if (!codeFormTranslators[formName].hasOwnProperty(output)) {
      return "Translation error: Form " + formName + " has no translators of type " + output + " registered";
    }
    if (!codeFormTranslators[formName][output].hasOwnProperty(language)) {
      return "Translation error: Form " + formName + " has no " + language + " translators of type " + output + " registered";
    }
    translator = codeFormTranslators[formName][output][language];
    if (typeof translator === 'string') {
      letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
      numArgs = 0;
      while (-1 < translator.indexOf("__" + letters[numArgs] + "__")) {
        numArgs++;
      }
      if (group.children.length !== numArgs) {
        return "Translation error: Form " + formName + " requires " + numArgs + " parts, but contains only " + group.children.length;
      }
      _ref = group.children;
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        child = _ref[index];
        pattern = "__" + letters[index] + "__";
        childText = recur(child);
        if (/^Translation error/.test(childText)) {
          return childText;
        }
        translator = translator.replace(RegExp(pattern, 'g'), childText);
      }
      return translator;
    } else {
      try {
        return translator(group, recur);
      } catch (_error) {
        e = _error;
        return console.log('User-defined translator error:', e);
      }
    }
  };

  window.groupContentsChanged = function(group, firstTime) {
    return window.validate(group);
  };

  window.groupDeleted = function(group) {
    var _ref;
    if (group.parent != null) {
      if (group.parent.children[0]) {
        return window.validate(group.parent.children[0]);
      }
    } else {
      if ((_ref = group.plugin) != null ? _ref.topLevel[0] : void 0) {
        return window.validate(group.plugin.topLevel[0]);
      }
    }
  };

  menuItems = function(group) {
    return [
      {
        text: 'Change this to...',
        menu: codeFormHierarchy(function(formName) {
          return group.set('tagName', formName);
        })
      }, {
        text: 'Explain this...',
        onclick: function() {
          var explanation, language, _i, _len, _ref;
          explanation = '';
          _ref = allNaturalLanguages();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            language = _ref[_i];
            explanation += ("<h2>Language: " + language + "</h2>\n") + groupToExplanation(group, language);
          }
          return tinymce.activeEditor.Dialogs.alert({
            title: 'Explanation of one structure',
            message: addMathQuillCSS(explanation),
            width: 600,
            height: 450
          });
        }
      }, {
        text: 'Explain all...',
        onclick: function() {
          var explanation, language, _i, _j, _len, _len1, _ref, _ref1;
          explanation = '';
          _ref = allNaturalLanguages();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            language = _ref[_i];
            explanation += "<h2>Language: " + language + "</h2>\n";
            _ref1 = tinymce.activeEditor.Groups.topLevel;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              group = _ref1[_j];
              if (explanation !== '') {
                explanation += '<hr>';
              }
              explanation += groupToExplanation(group, language);
            }
          }
          return tinymce.activeEditor.Dialogs.alert({
            title: 'Explanation of all structures',
            message: addMathQuillCSS(explanation),
            width: 600,
            height: 450
          });
        }
      }
    ];
  };

  allNaturalLanguages = function() {
    var data, formName, language, languages, _ref;
    languages = [];
    for (formName in codeFormTranslators) {
      if (!__hasProp.call(codeFormTranslators, formName)) continue;
      data = codeFormTranslators[formName];
      _ref = data['explanation'];
      for (language in _ref) {
        if (!__hasProp.call(_ref, language)) continue;
        if (__indexOf.call(languages, language) < 0) {
          languages.push(language);
        }
      }
    }
    return languages;
  };

  addMathQuillCSS = function(html) {
    var currentPath;
    currentPath = window.location.href.split('/').slice(0, -1).join('/');
    return "<html> <head><link rel='stylesheet' href='" + currentPath + "/eqed/mathquill.css'></head> <head><link rel='stylesheet' href='" + currentPath + "/groupsplugin.css'></head> <body>" + html + "</body> </html>";
  };

  groupToExplanation = function(group, language) {
    return "<h4>Structure:</h4>\n <p style='margin-left: 2em;'>" + (group.groupAsHTML()) + "</p>\n <h4>Explanation:</h4>\n <p style='margin-left: 2em;' >" + (runTranslation(group, language, 'explanation')) + "</p>\n";
  };

  window.groupTypes = [
    {
      name: 'codexp',
      color: '#6666cc',
      text: 'Code expression',
      tooltip: 'Tag the selection',
      imageHTML: '<font color="#6666cc">[ ]</font>',
      openImageHTML: '<font color="#6666cc">[</font>',
      closeImageHTML: '<font color="#6666cc">]</font>',
      onToolbar: false,
      contentsChanged: window.groupContentsChanged,
      deleted: window.groupDeleted,
      tagContents: function(group) {
        return group.get('tagName');
      },
      tagMenuItems: function(group) {
        return menuItems(group);
      },
      contextMenuItems: function(group) {
        return menuItems(group);
      }
    }
  ];

  markGroupRight = function(group) {
    group.set('valid', true);
    group.clear('closeDecoration');
    group.clear('closeHoverText');
    return window.createSidebarContent();
  };

  markGroupWrong = function(group, reason) {
    group.set('valid', false);
    group.set('closeDecoration', '<font color="red">&#10006;</font>');
    group.set('closeHoverText', reason);
    return window.createSidebarContent();
  };

  markGroupWith = function(group, validationData) {
    group.set('validationResult', validationData);
    if (validationData.result === 'valid') {
      return markGroupRight(group);
    } else {
      return markGroupWrong(group, validationData.message);
    }
  };

  isGroupRight = function(group) {
    return group.get('valid');
  };

  window.validate = function(group, verbose) {
    var arg, argType, args, groupTag, index, options, validation, validator, _i, _len;
    if (!group.children) {
      setTimeout((function() {
        return window.validate(group);
      }), 100);
      return;
    }
    if ((groupTag = group.get('tagName')) == null) {
      return markGroupWith(group, {
        result: 'invalid',
        message: "Each group must have a tag, but this one does not.  Add a tag using the context menu."
      });
    }
    validator = formsAndCategories[groupTag].validator;
    if (validator instanceof Array) {
      validation = {
        result: 'valid',
        message: 'All inner groups have the correct types.'
      };
      args = group.children;
      if (validator.length !== args.length) {
        return markGroupWith(group, {
          result: 'invalid',
          message: "This form needs " + validator.length + " parts: " + (validator.join(', ')) + "."
        });
      }
      for (index = _i = 0, _len = args.length; _i < _len; index = ++_i) {
        arg = args[index];
        argType = arg.get('tagName');
        options = validator[index].split('/');
        if (__indexOf.call(options, argType) < 0) {
          return markGroupWith(group, {
            result: 'invalid',
            message: "Part " + (index + 1) + " must be of type " + validator[index] + ", but it is of type " + argType + " instead."
          });
        }
      }
    } else {
      validation = validator(group, verbose);
    }
    return markGroupWith(group, validation);
  };

  window.fullScreenEditor = false;

  window.editorContainer = function() {
    return document.getElementById('editorContainer');
  };

  window.afterEditorReady = function(editor) {
    var handleResize, mainContainer;
    mainContainer = window.editorContainer.parentNode;
    handleResize = function() {
      var editorContainer, iframe, vp;
      editorContainer = editor.getContainer();
      iframe = editor.getContentAreaContainer().firstChild;
      vp = tinymce.DOM.getViewPort();
      iframe.style.width = iframe.style.height = mainContainer.style.height = '100%';
      editorContainer.style.width = editorContainer.style.height = '';
      iframe.style.height = mainContainer.clientHeight - 2 - (editorContainer.clientHeight - iframe.clientHeight);
      return window.scrollTo(vp.x, vp.y);
    };
    window.splitter = ($(mainContainer)).split({
      orientation: 'vertical',
      limit: 100,
      position: '75%',
      onDrag: handleResize
    });
    ($(window)).resize(handleResize);
    handleResize();
    return window.createSidebarContent();
  };

  window.createSidebarContent = function() {
    var entry, group, sidebar, _i, _len, _ref;
    sidebar = document.getElementById('sidebar');
    sidebar.innerHTML = '<div style="border-bottom: solid 1px black;\n            text-align: center;">\n    <p>Choose a language:\n    <select onchange=\'updateSidebarContent();\'\n            id=\'languagePicker\'>\n        <option value=\'javascript\'>JavaScript</option>\n        <option value=\'python\'>Python</option>\n        <option value=\'r\'>R</option>\n    </select></p>\n    <p id=\'runJSLink\'><a href=\'#\'\n        onclick=\'runGeneratedJavaScript();\'\n        >Run this code</a></p>\n    <p><a href=\'#\' onclick=\'copyGeneratedCode();\'\n        >Copy this code</a></p>\n</div>';
    ($('#languagePicker')).val(lastLanguageChoice);
    ($('#runJSLink')).get(0).style.display = lastLanguageChoice === 'javascript' ? 'block' : 'none';
    window.lastSidebarContent = '';
    _ref = tinymce.activeEditor.Groups.topLevel;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      group = _ref[_i];
      entry = document.createElement('div');
      entry.setAttribute('id', "codeForGroup" + (group.id()));
      ($(entry)).click(group.id(), function(event) {
        group = tinymce.activeEditor.Groups[event.data];
        return tinymce.activeEditor.selection.setRng(group.innerRange());
      });
      entry.style.padding = '1em';
      entry.style.borderBottom = 'dotted 1px black';
      entry.innerHTML = window.createSidebarEntryHTML(group);
      sidebar.appendChild(entry);
      lastSidebarContent += entry.textContent + '\n';
    }
    return ($(sidebar)).find('pre').each(function(i, block) {
      return hljs.highlightBlock(block);
    });
  };

  lastLanguageChoice = 'javascript';

  window.updateSidebarContent = function() {
    lastLanguageChoice = ($('#languagePicker')).val();
    return createSidebarContent();
  };

  window.runGeneratedJavaScript = function() {
    var e;
    try {
      return eval(lastSidebarContent);
    } catch (_error) {
      e = _error;
      return alert("Error when running code:\n\n" + e.message);
    }
  };

  window.copyGeneratedCode = function() {
    return tinymce.activeEditor.Dialogs.alert({
      title: 'Copy the code, then close',
      width: 600,
      message: "<textarea id='codeToCopy'\n          style='width: 100%; height: 100%;\n                 font-family: monospace;'\n    >" + lastSidebarContent + "</textarea>\n<script>\n    var T = document.getElementById( 'codeToCopy' );\n    T.select();\n    T.focus();\n</script>"
    });
  };

  window.createSidebarEntryHTML = function(group) {
    var code, comment, result;
    code = runTranslation(group, lastLanguageChoice, 'code');
    comment = codeFormTranslators['COMMENT']['code'][lastLanguageChoice];
    result = comment.replace('__A__', niceText.apply(null, group.contentNodes()));
    result += '\n' + (!/^Translation error/.test(code) ? code : comment.replace('__A__', code));
    return "<pre class='javascript'>" + result + "</pre>";
  };

  niceText = function() {
    var node, nodes, result, _i, _len;
    nodes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    result = '';
    for (_i = 0, _len = nodes.length; _i < _len; _i++) {
      node = nodes[_i];
      if ((node != null ? node.nodeType : void 0) === 3) {
        result += node.textContent;
      } else if (($(node)).hasClass('mathquill-rendered-math')) {
        result += node.childNodes[0].textContent;
      } else {
        result += niceText.apply(null, node.childNodes);
      }
    }
    return result;
  };

  setInterval(function() {
    var group, range;
    range = tinymce.activeEditor.selection.getRng();
    ($(sidebar)).find('div').css('background-color', '#fff');
    if (group = tinymce.activeEditor.Groups.groupAboveSelection(range)) {
      while (group.parent) {
        group = group.parent;
      }
      return ($("\#codeForGroup" + (group.id()))).css('background-color', '#eee');
    }
  }, 100);

  window.openInJSFiddle = function(jsCode) {
    var form, nbsp;
    nbsp = String.fromCharCode(160);
    jsCode = jsCode.replace(RegExp(nbsp, 'g'), ' ');
    form = document.createElement('form');
    form.setAttribute('method', 'post');
    form.setAttribute('action', 'http://jsfiddle.net/api/post/mootools/1.2/dependencies/more/');
    form.setAttribute('target', '_blank');
    form.style.display = 'none';
    form.appendChild(makeSelect('panel_html', {
      0: 'HTML'
    }));
    form.appendChild(makeTextarea('html'));
    form.appendChild(makeSelect('panel_js', {
      0: 'JavaScript',
      1: 'CoffeeScript',
      2: 'JavaScript 1.7'
    }));
    form.appendChild(makeTextarea('js', jsCode));
    form.appendChild(makeSelect('panel_css', {
      0: 'CSS',
      1: 'SCSS'
    }));
    form.appendChild(makeTextarea('css'));
    form.appendChild(makeText('title', 'Fiddle Title Here'));
    form.appendChild(makeTextarea('description', 'Fiddle Description Here'));
    form.appendChild(makeTextarea('resources'));
    form.appendChild(makeText('dtd', 'html 4'));
    form.appendChild(makeText('wrap', 'l'));
    document.body.appendChild(form);
    form.submit();
    return document.body.removeChild(form);
  };

  makeSelect = function(name, options) {
    var option, representation, result, value;
    result = document.createElement('select');
    result.setAttribute('name', name);
    for (value in options) {
      if (!__hasProp.call(options, value)) continue;
      representation = options[value];
      option = document.createElement('option');
      option.setAttribute('value', value);
      option.innerHTML = representation;
      result.appendChild(option);
    }
    return result;
  };

  makeTextarea = function(name, content) {
    var result;
    result = document.createElement('textarea');
    result.setAttribute('name', name);
    result.innerHTML = content || '';
    return result;
  };

  makeText = function(name, value) {
    var result;
    result = document.createElement('input');
    result.setAttribute('type', 'text');
    result.setAttribute('name', name);
    result.setAttribute('value', value);
    return result;
  };

}).call(this);

//# sourceMappingURL=sidebar-example-solo.js.map
