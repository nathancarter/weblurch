(function(){var t,e=[].slice;window.groupTypes=[{name:"expression",text:"Expression",imageHTML:'<font color="#996666">[ ]</font>',openImageHTML:'<font color="#996666">[</font>',closeImageHTML:'<font color="#996666">]</font>',tooltip:"Make the selected text an expression",color:"#996666",shortcut:"Ctrl+[",LaTeXshortcut:"\\[",connectionRequest:function(t,e){var n;return n=function(t,e){var o,r,i,c,a;if(t===e)return!0;for(a=t.connectionsOut(),i=0,c=a.length;c>i;i++)if(o=a[i],r=tinymce.activeEditor.Groups[o[1]],n(r,e))return!0;return!1},n(e,t)?t.plugin.editor.Dialogs.alert({title:"Cannot connect expressions",message:"Forming that connection would create a cycle of connections among expressions, which is not permitted."}):tinymce.activeEditor.undoManager.transact(function(){return t.connect(e),t.get("key")||t.set("key","label"),t.get("keyposition")?void 0:t.set("keyposition","arrow")})},connections:function(t){var n,o,r,i,c,a,u,s;for(r=t.connectionsOut(),o=t.connectionsIn(),s=e.call(o).concat(e.call(r)),a=0,u=s.length;u>a;a++)n=s[a],i=tinymce.activeEditor.Groups[n[0]],"arrow"===i.get("keyposition")&&(n[2]=i.get("key")),"premise"===i.get("key")&&(n[3]=function(t){return t.setLineDash([3,3])});return e.call(r).concat(e.call(o),e.call(function(){var t,e,n;for(n=[],t=0,e=r.length;e>t;t++)c=r[t],n.push(c[1]);return n}()),e.call(function(){var t,e,n;for(n=[],t=0,e=o.length;e>t;t++)c=o[t],n.push(c[0]);return n}()))},tagContents:function(t){return"source"===t.get("keyposition")?t.get("key"):null},tagMenuItems:function(e){var n;return n=[],"source"===e.get("keyposition")&&(n.push({text:'Move "'+e.get("key")+'" onto arrow',onclick:function(){return tinymce.activeEditor.undoManager.transact(function(){return e.set("keyposition","arrow")})}}),n.push(t(e))),n},contextMenuItems:function(e){var n,o,r,i,c,a,u,s,l,g,h,f,y,d;if(a=[],"arrow"===e.get("keyposition")&&a.push({text:'Move "'+e.get("key")+'" onto attribute',onclick:function(){return tinymce.activeEditor.undoManager.transact(function(){return e.set("keyposition","source")})}}),a.push(t(e)),i=e.connectionsOut(),c=e.get("key"),i.length>0&&"premise"!==c){for(g=function(){var t,e,n;for(n=[],t=0,e=i.length;e>t;t++)r=i[t],n.push(tinymce.activeEditor.Groups[r[1]]);return n}(),n=!0,h=0,y=g.length;y>h;h++)if(l=g[h],l.attributeGroupsForKey(c).length>1){n=!1;break}if(n)a.push({text:"Hide this attribute",onclick:function(){var t,n,o;return t=function(){return tinymce.activeEditor.undoManager.transact(function(){var t,n,o,r,i;for(i=[],t=o=0,r=g.length;r>o;t=++o)l=g[t],n=t===g.length-1,l.embedAttribute(c,n),i.push(n?void 0:e.connect(g[t+1]));return i})},o="",g.length>1&&(o+="You are hiding this attribute in "+g.length+" expressions.  "),n=e.attributionAncestry(!0).length-e.attributionAncestry(!1).length,n>0&&(o+="There are "+n+" premise connections that will be broken if you hide that attribute.  "),o.length>0?tinymce.activeEditor.Dialogs.confirm({title:"Warning",message:""+o+"Continue anyway?",okCallback:t}):t()}});else if(1===g.length){for(l=g[0],s=l.attributeGroupsForKey(c),o=!1,f=0,d=s.length;d>f;f++)if(u=s[f],u.connectionsOut().length>1){o=!0;break}o||a.push({text:"Hide this attribute",onclick:function(){var t,n,o,r,i;for(t=function(){return tinymce.activeEditor.undoManager.transact(function(){var t,n,o,r,i;for(i=[],t=o=0,r=g.length;r>o;t=++o)l=g[t],n=t===g.length-1,l.embedAttribute(c,n),i.push(n?void 0:e.connect(g[t+1]));return i})},o="You are about to hide not one attribute, but "+s.length+", all of type "+c+".  ",n=0,r=0,i=s.length;i>r;r++)u=s[r],n+=u.attributionAncestry(!0).length-u.attributionAncestry(!1).length;return n>0&&(o+="There are "+n+" premise connections that will be broken if you hide that attribute.  "),o.length>0?tinymce.activeEditor.Dialogs.confirm({title:"Warning",message:""+o+"Continue anyway?",okCallback:t}):t()}})}}return a.push({text:"Attributes...",onclick:window.attributesActionForGroup(e)}),a}}],t=function(t){return{text:"Change attribute key to...",menu:[{text:"Label",onclick:function(){return tinymce.activeEditor.undoManager.transact(function(){return t.set("key","label")})}},{text:"Reason",onclick:function(){return tinymce.activeEditor.undoManager.transact(function(){return t.set("key","reason")})}},{text:"Premise",onclick:function(){return tinymce.activeEditor.undoManager.transact(function(){return t.set("key","premise")})}},{text:"Other...",onclick:function(){return tinymce.activeEditor.Dialogs.prompt({title:"Enter new key",message:'Change "'+t.get("key")+'" to what?',okCallback:function(e){return/^[a-zA-Z0-9-_]+$/.test(e)?tinymce.activeEditor.undoManager.transact(function(){return t.set("key",e)}):void tinymce.activeEditor.Dialogs.alert({title:"Invalid key",message:"Keys can only contain Roman letters, decimal digits, hyphens, and underscores (no spaces or other punctuation).",width:300,height:200})}})}}]}}}).call(this);
//# sourceMappingURL=main-app-groups-solo.min.js.map