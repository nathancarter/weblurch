// Generated by CoffeeScript 1.8.0
(function() {
  var inspect, menu;

  setAppName('MathApp');

  addHelpMenuSourceCodeLink('app/math-example-solo.litcoffee');

  window.helpAboutText = '<p>See the fully documented <a target="top" href="https://github.com/nathancarter/weblurch/blob/master/app/math-example-solo.litcoffee" >source code for this demo app</a>.</p>';

  window.groupTypes = [
    {
      name: 'me',
      text: 'Mathematical Expression',
      tooltip: 'Make the selection a mathematical expression',
      color: '#666699',
      imageHTML: '<font color="#666699"><b>[ ]</b></font>',
      openImageHTML: '<font color="#666699"><b>[</b></font>',
      closeImageHTML: '<font color="#666699"><b>]</b></font>',
      contentsChanged: function(group, firstTime) {
        var info;
        info = inspect(group);
        if (info instanceof window.OMNode) {
          info = (function() {
            switch (info.type) {
              case 'i':
                return 'integer';
              case 'f':
                return 'float';
              case 'st':
                return 'string';
              case 'ba':
                return 'byte array';
              case 'sy':
                return 'symbol';
              case 'v':
                return 'variable';
              case 'a':
                switch (info.children[0].simpleEncode()) {
                  case 'arith1.plus':
                  case 'arith1.sum':
                    return 'sum';
                  case 'arith1.minus':
                    return 'difference';
                  case 'arith1.plusminus':
                    return 'sum/difference';
                  case 'arith1.times':
                    return 'product';
                  case 'arith1.divide':
                    return 'quotient';
                  case 'arith1.power':
                    return 'exponentiation';
                  case 'arith1.root':
                    return 'radical';
                  case 'arith1.abs':
                    return 'absolute value';
                  case 'arith1.unary_minus':
                    return 'negation';
                  case 'relation1.eq':
                    return 'equation';
                  case 'relation1.approx':
                    return 'approximation';
                  case 'relation1.neq':
                    return 'negated equation';
                  case 'relation1.lt':
                  case 'relation1.le':
                  case 'relation1.gt':
                  case 'relation1.ge':
                    return 'inequality';
                  case 'logic1.not':
                    return 'negated sentence';
                  case 'calculus1.int':
                    return 'indefinite integral';
                  case 'calculus1.defint':
                    return 'definite integral';
                  case 'transc1.sin':
                  case 'transc1.cos':
                  case 'transc1.tan':
                  case 'transc1.cot':
                  case 'transc1.sec':
                  case 'transc1.csc':
                    return 'trigonometric function';
                  case 'transc1.arcsin':
                  case 'transc1.arccos':
                  case 'transc1.arctan':
                  case 'transc1.arccot':
                  case 'transc1.arcsec':
                  case 'transc1.arccsc':
                    return 'inverse trigonometric function';
                  case 'overarc':
                    return 'overarc';
                  case 'overline':
                    return 'overline';
                  case 'd.diff':
                    return 'differential';
                  case 'interval1.interval_oo':
                  case 'interval1.interval_oc':
                  case 'interval1.interval_co':
                  case 'interval1.interval_cc':
                    return 'interval';
                  case 'integer1.factorial':
                    return 'factorial';
                  case 'limit1.limit':
                    return 'limit';
                }
                break;
              case 'b':
                return 'lambda closure';
            }
          })();
        }
        return group.set('tag', info);
      },
      tagContents: function(group) {
        return group.get('tag');
      },
      tagMenuItems: function(group) {
        return menu(group);
      },
      contextMenuItems: function(group) {
        return menu(group);
      }
    }
  ];

  inspect = function(group) {
    var e, nodes, parsed, selector, toParse, _ref;
    nodes = $(group.contentNodes());
    selector = '.mathquill-rendered-math';
    nodes = nodes.find(selector).add(nodes.filter(selector));
    if (nodes.length === 0) {
      return 'add math using the f(x) button';
    }
    if (nodes.length > 1) {
      return 'more than one math expression';
    }
    try {
      toParse = window.mathQuillToMeaning(nodes.get(0));
    } catch (_error) {
      e = _error;
      return "Error converting math expression to text: " + (e != null ? e.message : void 0);
    }
    try {
      parsed = (_ref = mathQuillParser.parse(toParse)) != null ? _ref[0] : void 0;
    } catch (_error) {
      e = _error;
      return "Error parsing math expression as text: " + (e != null ? e.message : void 0);
    }
    if (parsed instanceof OMNode) {
      return parsed;
    }
    return "Could not parse this mathematical text: " + (toParse != null ? typeof toParse.join === "function" ? toParse.join(' ') : void 0 : void 0) + " -- Error: " + parsed;
  };

  menu = function(group) {
    return [
      {
        text: 'See full OpenMath structure',
        onclick: function() {
          var e, info, _ref, _ref1;
          if (!((info = inspect(group)) instanceof OMNode)) {
            return alert("Could not understand the bubble contents:\n " + info);
          } else {
            try {
              return alert((_ref = info.toXML()) != null ? _ref : "This demo could not convert some part of that expression to XML.");
            } catch (_error) {
              e = _error;
              return alert((_ref1 = e.message) != null ? _ref1 : e);
            }
          }
        }
      }, {
        text: 'Evaluate this',
        onclick: function() {
          var info, result;
          if (!((info = inspect(group)) instanceof OMNode)) {
            info = "Could not understand the bubble contents:\n" + info;
          } else {
            result = info.evaluate();
            info = "" + result.value;
            if (result.message != null) {
              info += "\n\nNote:\n" + result.message;
            }
          }
          return alert(info);
        }
      }
    ];
  };

}).call(this);

//# sourceMappingURL=math-example-solo.js.map
