// Generated by CoffeeScript 1.8.0
(function() {
  window.groupMenuItems.appsettings = {
    text: 'Application settings...',
    context: 'file',
    onclick: function() {
      return tinymce.activeEditor.Settings.application.showUI();
    }
  };

  window.groupMenuItems.docsettings = {
    text: 'Document settings...',
    context: 'file',
    onclick: function() {
      return tinymce.activeEditor.Settings.document.showUI();
    }
  };

  window.afterEditorReadyArray.push(function(editor) {
    var A, D;
    A = editor.Settings.addCategory('application');
    if (!A.get('filesystem')) {
      A.set('filesystem', 'dropbox');
    }
    A.setup = function(div) {
      var fs, _ref, _ref1;
      fs = A.get('filesystem');
      return div.innerHTML = [editor.Settings.UI.heading('Wiki Login'), editor.Settings.UI.info('Entering a username and password here does NOT create an account on the wiki.  You must already have one.  If you do not, first visit <a href="/wiki/index.php" target="_blank" style="color: blue;">the wiki</a>, create an account, then return here.'), editor.Settings.UI.text('Username', 'wiki_username', (_ref = A.get('wiki_username')) != null ? _ref : ''), editor.Settings.UI.password('Password', 'wiki_password', (_ref1 = A.get('wiki_password')) != null ? _ref1 : ''), editor.Settings.UI.heading('Open/Save Filesystem'), editor.Settings.UI.radioButton('Dropbox (cloud storage, requires account)', 'filesystem', fs === 'dropbox', 'filesystem_dropbox'), editor.Settings.UI.radioButton('Local Storage (kept permanently, in browser only)', 'filesystem', fs === 'local storage', 'filesystem_local_storage')].join('\n');
    };
    A.teardown = function(div) {
      var elt;
      elt = function(id) {
        return div.ownerDocument.getElementById(id);
      };
      A.set('wiki_username', elt('wiki_username').value);
      A.set('wiki_password', elt('wiki_password').value);
      return A.setFilesystem(elt('filesystem_dropbox').checked ? 'dropbox' : 'local storage');
    };
    A.setFilesystem = function(name) {
      A.set('filesystem', name);
      if (name === 'dropbox') {
        editor.LoadSave.installOpenHandler(editor.Dropbox.openHandler);
        editor.LoadSave.installSaveHandler(editor.Dropbox.saveHandler);
        return editor.LoadSave.installManageFilesHandler(editor.Dropbox.manageFilesHandler);
      } else {
        editor.LoadSave.installOpenHandler();
        editor.LoadSave.installSaveHandler();
        return editor.LoadSave.installManageFilesHandler();
      }
    };
    A.setFilesystem(A.get('filesystem'));
    D = editor.Settings.addCategory('document');
    D.metadata = {};
    D.get = function(key) {
      var _ref;
      return (_ref = D.metadata) != null ? _ref[key] : void 0;
    };
    D.set = function(key, value) {
      return (D.metadata != null ? D.metadata : D.metadata = {})[key] = value;
    };
    D.setup = function(div) {
      var _ref, _ref1;
      div.innerHTML = [editor.Settings.UI.heading('Dependencies'), "<div id='dependenciesSection'></div>", editor.Settings.UI.heading('Google Drive'), editor.Settings.UI.info("(Google Drive integration not yet complete.<br>Check back later for progress on this feature.)"), editor.Settings.UI.text('Save to Drive with this title', 'doc_title', (_ref = D.get('doc_title')) != null ? _ref : 'Untitled'), editor.Settings.UI.heading('Wiki Publishing'), editor.Settings.UI.text('Publish to wiki under this title', 'wiki_title', (_ref1 = D.get('wiki_title')) != null ? _ref1 : '')].join('\n');
      return editor.Dependencies.installUI(div.ownerDocument.getElementById('dependenciesSection'));
    };
    D.teardown = function(div) {
      var elt;
      elt = function(id) {
        return div.ownerDocument.getElementById(id);
      };
      return D.set('wiki_title', elt('wiki_title').value);
    };
    editor.LoadSave.saveMetaData = function(interactive) {
      var group, n, _ref;
      if (interactive == null) {
        interactive = true;
      }
      if (D.metadata == null) {
        D.metadata = {};
      }
      n = Object.keys((_ref = editor.LoadSave.validationsPending) != null ? _ref : {}).length;
      if (n > 0) {
        D.metadata.exports = {
          error: "This document cannot export its dependencies, because at the time it was saved, " + n + " " + (n > 1 ? 'groups were' : 'group was') + " still waiting for validation to finish running."
        };
        if (interactive) {
          editor.Dialogs.alert({
            title: 'Dependency information not saved',
            message: 'Because validation was not complete, the saved version of this document will not be usable by any dependency.  To fix this problem, allow validation to finish running, then save.'
          });
        }
      } else {
        D.metadata.exports = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = window.labeledTopLevelExpressions();
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            group = _ref1[_i];
            _results.push(group.completeForm().encode());
          }
          return _results;
        })();
      }
      D.metadata.dependencies = editor.Dependencies["export"]();
      return D.metadata;
    };
    editor.LoadSave.loadMetaData = function(object) {
      var _ref, _ref1;
      D.metadata = object;
      return editor.Dependencies["import"]((_ref = (_ref1 = D.metadata) != null ? _ref1.dependencies : void 0) != null ? _ref : []);
    };
    return editor.LoadSave.waitForMetaData = function(callback, maxWaitTime) {
      var check, startedWaiting;
      if (maxWaitTime == null) {
        maxWaitTime = 0;
      }
      startedWaiting = (new Date).getTime();
      return setTimeout(check = function() {
        var metadata, _ref;
        metadata = editor.LoadSave.saveMetaData(false);
        if ((metadata != null) && (((_ref = metadata.exports) != null ? _ref.error : void 0) == null) || ((new Date).getTime() - startedWaiting > maxWaitTime && maxWaitTime > 0)) {
          return callback(metadata);
        }
        return setTimeout(check, 100);
      }, 100);
    };
  });

}).call(this);

//# sourceMappingURL=main-app-settings-solo.js.map
