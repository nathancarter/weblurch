// Generated by CoffeeScript 1.8.0
(function() {
  var canonicalFormToHTML,
    __slice = [].slice;

  canonicalFormToHTML = function(form) {
    var child, inside, type;
    type = tinymce.activeEditor.Groups.groupTypes.expression;
    inside = form.type === 'st' ? form.value : ((function() {
      var _i, _len, _ref, _results;
      _ref = form.children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        _results.push(canonicalFormToHTML(child));
      }
      return _results;
    })()).join('');
    return type.openImageHTML + inside + type.closeImageHTML;
  };

  window.attributesActionForGroup = function(group) {
    var reload, showDialog;
    reload = function() {
      tinymce.activeEditor.windowManager.close();
      return showDialog();
    };
    return showDialog = function() {
      var addRow, addRule, attr, attribute, decodeLink, decoded, embedded, encodeLink, expression, index, key, list, meaning, prepare, showKey, strictGroupComparator, summary, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      summary = "<p>Expression: " + (canonicalFormToHTML(group.canonicalForm())) + "</p> <table border=0 cellpadding=5 cellspacing=0 width=100%>";
      addRow = function(key, value, type, links) {
        if (value == null) {
          value = '';
        }
        if (type == null) {
          type = '';
        }
        if (links == null) {
          links = '';
        }
        return summary += "<tr><td width=30% align=left>" + key + "</td> <td width=30% align=right>" + value + "</td> <td width=20% align=right>" + type + "</td> <td width=20% align=left>" + links + "</td></tr>";
      };
      addRule = function() {
        return summary += "<tr><td colspan=4><hr></td></tr>";
      };
      prepare = {};
      _ref = group.attributeGroups();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        attribute = _ref[_i];
        key = attribute.get('key');
        (prepare[key] != null ? prepare[key] : prepare[key] = []).push(attribute);
      }
      _ref1 = group.keys();
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        key = _ref1[_j];
        if (decoded = OM.decodeIdentifier(key)) {
          if (prepare[decoded] == null) {
            prepare[decoded] = [];
          }
        }
      }
      encodeLink = function(text, json) {
        var href;
        href = OM.encodeAsIdentifier(JSON.stringify(json));
        return "<a href='#' id='" + href + "'>" + text + "</a>";
      };
      decodeLink = function(href) {
        return JSON.parse(OM.decodeIdentifier(href));
      };
      for (key in prepare) {
        list = prepare[key];
        if (embedded = group.get(OM.encodeAsIdentifier(key))) {
          list.push(group);
        }
        strictGroupComparator = function(a, b) {
          return strictNodeComparator(a.open, b.open);
        };
        showKey = key;
        _ref2 = list.sort(strictGroupComparator);
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          attr = _ref2[_k];
          if (attr === group) {
            expression = OM.decode(embedded.m);
            if (expression.type === 'a' && expression.children[0].equals(Group.prototype.listSymbol)) {
              _ref3 = expression.children.slice(1);
              for (index = _l = 0, _len3 = _ref3.length; _l < _len3; index = ++_l) {
                meaning = _ref3[index];
                addRow(showKey, canonicalFormToHTML(meaning), 'hidden', encodeLink('Remove', ['remove from internal list', key, index]) + ' ' + encodeLink('Show', ['show', key]));
                showKey = '';
              }
            } else {
              addRow(showKey, canonicalFormToHTML(expression), 'hidden', encodeLink('Remove', ['remove internal solo', key]) + ' ' + encodeLink('Show', ['show', key]));
              showKey = '';
            }
          } else {
            addRow(showKey, canonicalFormToHTML(attr.canonicalForm()), 'shown', encodeLink('Remove', ['remove external', attr.id()]) + ' ' + encodeLink('Hide', ['hide', key]));
            showKey = '';
          }
        }
        addRule();
      }
      summary += '</table>';
      if (Object.keys(prepare).length === 0) {
        summary += '<p>The expression has no attributes.</p>';
      }
      return tinymce.activeEditor.Dialogs.alert({
        title: 'Attributes',
        message: summary,
        onclick: function(id) {
          var internalKey, internalValue, type, visuals, _ref4;
          _ref4 = decodeLink(id), type = _ref4[0], key = _ref4[1], index = _ref4[2];
          if (type === 'remove from internal list') {
            internalKey = OM.encodeAsIdentifier(key);
            internalValue = group.get(internalKey);
            meaning = OM.decode(internalValue.m);
            meaning = OM.app.apply(OM, [meaning.children[0]].concat(__slice.call(meaning.children.slice(1, index + 1)), __slice.call(meaning.children.slice(index + 2))));
            visuals = decompressWrapper(internalValue.v);
            visuals = visuals.split('\n');
            visuals.splice(index, 1);
            visuals = visuals.join('\n');
            internalValue = {
              m: meaning.encode(),
              v: compressWrapper(visuals)
            };
            group.set(internalKey, internalValue);
            return reload();
          } else if (type === 'remove internal solo') {
            group.clear(OM.encodeAsIdentifier(key));
            return reload();
          } else if (type === 'remove external') {
            tinymce.activeEditor.Groups[key].disconnect(group);
            return reload();
          } else if (type === 'show') {
            group.unembedAttribute(key);
            return reload();
          } else if (type === 'hide') {
            group.embedAttribute(key);
            return reload();
          }
        }
      });
    };
  };

}).call(this);

//# sourceMappingURL=main-app-attr-dialog-solo.js.map
