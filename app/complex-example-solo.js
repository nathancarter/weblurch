// Generated by CoffeeScript 1.8.0
(function() {
  var isJustArithmetic, mightBeAName;

  setAppName('ComplexApp');

  addHelpMenuSourceCodeLink('app/complex-example-solo.litcoffee');

  window.helpAboutText = '<p>See the fully documented <a target="top" href="https://github.com/nathancarter/weblurch/blob/master/app/complex-example-solo.litcoffee" >source code for this demo app</a>.</p>';

  window.groupTypes = [
    {
      name: 'computation',
      text: 'Computation group',
      tooltip: 'Make selection a computation',
      color: '#996666',
      imageHTML: '<font color="#996666"><b>[ ]</b></font>',
      openImageHTML: '<font color="#996666"><b>[</b></font>',
      closeImageHTML: '<font color="#996666"><b>]</b></font>',
      tagContents: function(group) {
        var content;
        content = group.contentAsText();
        if ((content != null) && isJustArithmetic(content)) {
          return 'arithmetic expression';
        } else {
          return 'unknown';
        }
      },
      contentsChanged: function(group, firstTime) {
        if (group.doNotEvaluateAgain) {
          return;
        }
        group.set('closeDecoration', '<font color="#999999">...</font>');
        return Background.addTask('do arithmetic', [group], function(result) {
          var safeResult;
          if (group.deleted || (result == null)) {
            return;
          }
          safeResult = ("" + result).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');
          safeResult = "<font color=\"#009900\">=" + safeResult + "</font>";
          group.doNotEvaluateAgain = true;
          group.set('closeDecoration', safeResult);
          return group.doNotEvaluateAgain = false;
        });
      }
    }, {
      name: 'words',
      text: 'Group of words',
      tooltip: 'Make selection about words',
      color: '#669966',
      imageHTML: '<font color="#669966"><b>( )</b></font>',
      openImageHTML: '<font color="#669966"><b>(</b></font>',
      closeImageHTML: '<font color="#669966"><b>)</b></font>',
      tagContents: function(group) {
        return mightBeAName(group.contentAsText());
      },
      tagMenuItems: function(group) {
        return [
          {
            text: 'Why this tag?',
            onclick: function() {
              return alert("This group was classified as '" + (mightBeAName(group.contentAsText())) + "' for the following reason:\nText 'might be a name' if it has one to three words, all capitalized.  Otherwise, it is 'probably not a name.'");
            }
          }, {
            text: 'Change this into a name',
            onclick: function() {
              return group.setContentAsText('Rufus Dimble');
            }
          }, {
            text: 'Change this into a non-name',
            onclick: function() {
              return group.setContentAsText('corn on the cob');
            }
          }
        ];
      },
      contextMenuItems: function(group) {
        return [
          {
            text: 'Count number of letters',
            onclick: function() {
              return alert("Number of letters: " + (group.contentAsText().length) + "\n(includes spaces and punctuation)");
            }
          }, {
            text: 'Count number of words',
            onclick: function() {
              return alert("Number of words: " + (group.contentAsText().split(' ').length) + " \n(counts any sequence of non-spaces as a word)");
            }
          }
        ];
      }
    }
  ];

  isJustArithmetic = function(text) {
    return /^[.0-9+*/ ()-]+$/.test(text);
  };

  Background.registerFunction('do arithmetic', function(group) {
    var e, result, whenToStop;
    whenToStop = (new Date).getTime() + 1000;
    while ((new Date).getTime() < whenToStop) {
      result = (function() {
        if ((group.text != null) && isJustArithmetic(group.text)) {
          try {
            return eval(group.text);
          } catch (_error) {
            e = _error;
            return '???';
          }
        } else {
          return '???';
        }
      })();
    }
    return result;
  }, {
    isJustArithmetic: isJustArithmetic
  });

  mightBeAName = function(text) {
    var word, words, _i, _len;
    words = text.split(' ');
    if ((words == null) || words.length > 3 || words.length === 0) {
      return 'probably not a name';
    }
    for (_i = 0, _len = words.length; _i < _len; _i++) {
      word = words[_i];
      if ((word[0] == null) || word[0].toUpperCase() !== word[0]) {
        return 'probably not a name';
      }
    }
    return 'might be a name';
  };

}).call(this);

//# sourceMappingURL=complex-example-solo.js.map
