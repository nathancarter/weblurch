(function(){var e=[].indexOf||function(e){for(var t=0,n=this.length;n>t;t++)if(t in this&&this[t]===e)return t;return-1};window.Group.prototype.saveValidation=function(e){var t,n,r,o;return null===e?void(this.wasValidated()&&null!=(r=this.plugin)&&r.editor.undoManager.transact(function(e){return function(){return e.clear("validation"),e.clear("closeDecoration"),e.clear("closeHoverText")}}(this))):(t="valid"===e.result?"green":"invalid"===e.result?"red":"gray",n="valid"===e.result?"&#10003;":"invalid"===e.result?"&#10006;":"...",null!=(o=this.plugin)?o.editor.undoManager.transact(function(r){return function(){return r.set("validation",e),r.set("closeDecoration","<font color='"+t+"'>"+n+"</font>"),r.set("closeHoverText",""+e.message+"\n(Double-click for details.)")}}(this)):void 0)},window.Group.prototype.getValidation=function(){return this.get("validation")},window.Group.prototype.wasValidated=function(){return null!=this.getValidation()},window.afterEditorReadyArray.push(function(t){var n;return n=t.Groups.groupTypes.expression.contentsChanged,t.Groups.groupTypes.expression.contentsChanged=function(r,o){return n(r,o),setTimeout(function(){var n,o,i,s,a,l,u,d;for(i=[],o=function(t){return e.call(i,t)<0?i.push(t):void 0},n=function(n,r){var i,s,a,l,u,d,c,h,v,g,p,f,m;if(null==r&&(r=!1),0!==n.lookupAttributes("rule").length&&(i=t.Groups.ids(),-1!==(c=i.indexOf(n.id()))))for(l=window.lookupLabelsFor(n),m=i.slice(c),v=0,p=m.length;p>v;v++)if(a=m[v],s=t.Groups[a]){if(d=s.lookupAttributes("reason"),r&&d.length>0)return o(s);for(g=0,f=d.length;f>g;g++)u=d[g],h=u instanceof OM?u.value:u.contentAsText(),e.call(l,h)>=0&&o(s)}},a=function(e,r){var i,s,l,u,d,c;if(o(e),n(e,"label"===r),s=e.get("key"),s&&"premise"!==s){for(d=e.connectionsOut(),c=[],l=0,u=d.length;u>l;l++)i=d[l],c.push(a(t.Groups[i[1]],s));return c}},a(r),d=[],l=0,u=i.length;u>l;l++)s=i[l],d.push(s.validate());return d},0)},t.on("dependencyLabelsUpdated",function(n){var r,o,i,s,a,l,u,d;for(u=t.Groups.ids(),d=[],a=0,l=u.length;l>a;a++)o=u[a],(r=t.Groups[o])&&d.push(function(){var t,o,a,l;for(a=r.lookupAttributes("reason"),l=[],t=0,o=a.length;o>t;t++)i=a[t],s=i instanceof OM?i.value:i.contentAsText(),l.push(e.call(n.oldAndNewLabels,s)>=0?r.validate():void 0);return l}());return d})}),window.Group.prototype.computeValidationAsync=function(t,n){var r,o,i,s,a,l,u,d,c,h,v,g,p,f,m,b,y,w,T,O,L,A,x,k,M;if(null==n&&(n=!1),p=this.lookupAttributes("reason"),m=["JavaScript"],this.lookupAttributes("rule").length>0){if(p.length>0)return w={result:"invalid",message:"You may not attempt to justify a rule using a reason.  Rule validity is determined solely by the rule's structure."},n&&(w.verbose="Try removing all reason attributes from the rule."),t(w);if(u=this.lookupAttributes("code"),0===u.length)return w={result:"invalid",message:"Only code-based rules are supported at this time.  This rule does not have a code attribute."},n&&(w.verbose='<p>Try adding an attribute with key "code" and value equal to the name of the language in which the code is written.  Supported languages:</p> <ul><li>'+m.join("</li><li>")+"</li></ul>"),t(w);for(i=O=0,A=u.length;A>O;i=++O)l=u[i],u[i]=l instanceof OM?l.value:l.canonicalForm().value;return u.length>1?(w={result:"invalid",message:"This code-based rule has more than one language specified, which is ambiguous."},n&&(w.verbose="Too many languages specified for the rule.  Only one is permitted. You specified: "+u.join(",")+"."),t(w)):(k=u[0].toLowerCase(),e.call(function(){var e,t,n;for(n=[],e=0,t=m.length;t>e;e++)h=m[e],n.push(h.toLowerCase());return n}(),k)<0?(w={result:"invalid",message:"Code rules must be written in "+m.join("/")+"."},n&&(w.verbose="<p>The current version of Lurch supports only code-based rules written in one of the following languages.  The rule you cited is written in "+u[0]+", and thus cannot be used.</p> <ul><li>"+m.join("</li><li>")+"</li></ul>"),t(w)):t({result:"valid",message:"This is a valid code-based rule.",verbose:"This is a valid code-based rule."}))}if(0===p.length)return t(null);if(p.length>1){if(w={result:"invalid",message:"You may not attach more than one reason to an expression."},n){for(w.verbose="<p>The following reasons are attached to the expression:</p><ul>",L=0,x=p.length;x>L;L++)v=p[L],w.verbose+=v instanceof OM?"<li>Hidden: "+v.value+"</li>":"<li>Visible: "+v.contentAsText()+"</li>";w.verbose+="</ul>"}return t(w)}return v=p[0],g=v instanceof OM?v.value:v.contentAsText(),a=lookupLabel(g),0===a.length?(w={result:"invalid",message:"No rule called "+g+" is accessible here."},n&&(w.verbose=w.message),t(w)):(r=function(){var e,t,n;for(n=[],e=0,t=a.length;t>e;e++)c=a[e],n.push(c.target instanceof OM?c.target:c.target.completeForm());return n}(),b=function(){var e,t,n;for(n=[],e=0,t=r.length;t>e;e++)o=r[e],o.getAttribute(OM.sym("rule","Lurch"))&&n.push(o);return n}(),0===b.length?(w={result:"invalid",message:"The cited reason is not the name of a rule."},n&&(d=function(){var e,t,n;for(n=[],e=0,t=a.length;t>e;e++)c=a[e],c.target instanceof OM&&n.push(c);return n}().length,w.verbose='The cited reason, "'+g+'," is the name of '+d+" expressions imported from other documents, and "+(a.length-d)+" expressions in this document, accessible from the citation.  None of those expressions is a rule."),t(w)):(s=function(e){var t;if(t=e.getAttribute(OM.sym("validation","Lurch")),null==t)return!1;try{return"valid"===JSON.parse(t.value).result}catch(n){return!1}},y=function(){var e,t,n;for(n=[],e=0,t=b.length;t>e;e++)f=b[e],s(f)&&n.push(f);return n}(),0===y.length?(w={result:"invalid",message:"None of the cited rule are valid."},n&&(w.verbose="Although there are "+b.length+' rules called "'+g+'," none of them have been successfully validated.  Only a valid rule can be used to justify an expression.'),t(w)):y.length>1?(w={result:"invalid",message:"You may cite at most one valid rule."},n&&(w.verbose='The reason "'+g+'" refers to '+y.length+" valid rules.  Only one valid rule can be used at a time to justify an expression."),t(w)):(f=y[0],(l=f.getAttribute(OM.sym("code","Lurch")))?(M=l.value.toLowerCase(),e.call(function(){var e,t,n;for(n=[],e=0,t=m.length;t>e;e++)h=m[e],n.push(h.toLowerCase());return n}(),M)<0?(w={result:"invalid",message:"Code rules must be written in "+m.join("/")+"."},n&&(w.verbose="<p>The current version of Lurch supports only code-based rules written in one of the following languages.  The rule you cited is written in "+l.value+", and thus cannot be used.</p> <ul><li>"+m.join("</li><li>")+"</li></ul>"),t(w)):(T="function () { var conclusion = OM.decode( arguments[0] ); var premises = [ ]; for ( var i = 1 ; i < arguments.length ; i++ ) premises.push( OM.decode( arguments[i] ) ); "+f.value+" }",Background.addCodeTask(T,[this],function(e){return function(e){return t(null!=e?e:{result:"invalid",message:"The code in the rule did not run successfully.",verbose:"The background process in which the code was to be run returned no value, so the code has an error."})}}(this),void 0,["openmath-duo.min.js"]))):(w={result:"invalid",message:"Only code-based rules are supported."},n&&(w.verbose="The current version of Lurch supports only code-based rules.  The rule you cited is not a piece of code, and thus cannot be used."),t(w)))))},window.Group.prototype.validate=function(){var e,t;null==(t=this.plugin.editor.LoadSave).validationsPending&&(t.validationsPending={}),this.plugin.editor.LoadSave.validationsPending[this.id()]=!0;try{return this.computeValidationAsync(function(e){return function(t){var n;try{return e.saveValidation(t),delete e.plugin.editor.LoadSave.validationsPending[e.id()]}catch(r){throw n=r,delete e.plugin.editor.LoadSave.validationsPending[e.id()],n}}}(this))}catch(n){throw e=n,delete this.plugin.editor.LoadSave.validationsPending[this.id()],e}}}).call(this);
//# sourceMappingURL=main-app-group-validation-solo.min.js.map