(function(){var e,t=[].indexOf||function(e){for(var t=0,n=this.length;n>t;t++)if(t in this&&this[t]===e)return t;return-1};window.Group.prototype.saveValidation=function(e){var t,n;return null===e?void(this.wasValidated()&&(this.clear("validation"),this.clear("closeDecoration"),this.clear("closeHoverText"))):(t="valid"===e.result?"green":"invalid"===e.result?"red":"gray",n="valid"===e.result?"&#10003;":"invalid"===e.result?"&#10006;":"...",this.set("validation",e),this.set("closeDecoration","<font color='"+t+"'>"+n+"</font>"),this.set("closeHoverText",""+e.message+"\n(Double-click for details.)"))},window.Group.prototype.getValidation=function(){return this.get("validation")},window.Group.prototype.wasValidated=function(){return null!=this.getValidation()},window.afterEditorReadyArray.push(function(e){var n;return n=e.Groups.groupTypes.expression.contentsChanged,e.Groups.groupTypes.expression.contentsChanged=function(o,i){return n(o,i),setTimeout(function(){var n,i,r,s,a,l,u,d;for(r=[],i=function(e){return t.call(r,e)<0?r.push(e):void 0},n=function(n,o){var r,s,a,l,u,d,c,h,p,v,g,f,m;if(null==o&&(o=!1),0!==n.lookupAttributes("rule").length&&(r=e.Groups.ids(),-1!==(c=r.indexOf(n.id()))))for(l=window.lookupLabelsFor(n),m=r.slice(c),p=0,g=m.length;g>p;p++)if(a=m[p],s=e.Groups[a]){if(d=s.lookupAttributes("reason"),o&&d.length>0)return i(s);for(v=0,f=d.length;f>v;v++)u=d[v],h=u instanceof OM?u.value:u.contentAsText(),t.call(l,h)>=0&&i(s)}},a=function(t,o){var r,s,l,u,d,c;if(i(t),n(t,"label"===o),s=t.get("key"),s&&"premise"!==s){for(d=t.connectionsOut(),c=[],l=0,u=d.length;u>l;l++)r=d[l],c.push(a(e.Groups[r[1]],s));return c}},a(o),d=[],l=0,u=r.length;u>l;l++)s=r[l],d.push(s.validate());return d},0)},e.on("dependencyLabelsUpdated",function(n){var o,i,r,s,a,l,u,d;for(u=e.Groups.ids(),d=[],a=0,l=u.length;l>a;a++)i=u[a],(o=e.Groups[i])&&d.push(function(){var e,i,a,l;for(a=o.lookupAttributes("reason"),l=[],e=0,i=a.length;i>e;e++)r=a[e],s=r instanceof OM?r.value:r.contentAsText(),l.push(t.call(n.oldAndNewLabels,s)>=0?o.validate():void 0);return l}());return d})}),window.Group.prototype.validate=function(){var e,t;null==(t=this.plugin.editor.LoadSave).validationsPending&&(t.validationsPending={}),this.plugin.editor.LoadSave.validationsPending[this.id()]=!0;try{return this.computeValidationAsync(function(e){return function(t){var n;try{return e.saveValidation(t),delete e.plugin.editor.LoadSave.validationsPending[e.id()]}catch(o){throw n=o,delete e.plugin.editor.LoadSave.validationsPending[e.id()],n}}}(this))}catch(n){throw e=n,delete this.plugin.editor.LoadSave.validationsPending[this.id()],e}},window.Group.prototype.computeValidationAsync=function(e,t){return null==t&&(t=!1),this.lookupAttributes("rule").length>0?this.computeRuleValidationAsync(e,t):0===this.lookupAttributes("reason").length?e(null):this.computeStepValidationAsync(e,t)},e=["JavaScript"],window.Group.prototype.computeRuleValidationAsync=function(n,o){var i,r,s,a,l,u,d,c;if(this.lookupAttributes("reason").length>0)return l={result:"invalid",message:"You may not attempt to justify a rule using a reason.  Rule validity is determined solely by the rule's structure."},o&&(l.verbose="Try removing all reason attributes from the rule."),n(l);if(s=this.lookupAttributes("code"),0===s.length)return l={result:"invalid",message:"Only code-based rules are supported at this time.  This rule does not have a code attribute."},o&&(l.verbose='<p>Try adding an attribute with key "code" and value equal to the name of the language in which the code is written.  Supported languages:</p> <ul><li>'+e.join("</li><li>")+"</li></ul>"),n(l);for(i=u=0,d=s.length;d>u;i=++u)r=s[i],s[i]=r instanceof OM?r.value:r.canonicalForm().value;return s.length>1?(l={result:"invalid",message:"This code-based rule has more than one language specified, which is ambiguous."},o&&(l.verbose="Too many languages specified for the rule.  Only one is permitted. You specified: "+s.join(",")+"."),n(l)):(c=s[0].toLowerCase(),t.call(function(){var t,n,o;for(o=[],t=0,n=e.length;n>t;t++)a=e[t],o.push(a.toLowerCase());return o}(),c)<0?(l={result:"invalid",message:"Code rules must be written in "+e.join("/")+"."},o&&(l.verbose="<p>The current version of Lurch supports only code-based rules written in one of the following languages.  The rule you cited is written in "+s[0]+", and thus cannot be used.</p> <ul><li>"+e.join("</li><li>")+"</li></ul>"),n(l)):n({result:"valid",message:"This is a valid code-based rule."}))},window.Group.prototype.computeStepValidationAsync=function(n,o){var i,r,s,a,l,u,d,c,h,p,v,g,f,m,b,y,w,T,A;if(v=this.lookupAttributes("reason"),v.length>1){if(b={result:"invalid",message:"You may not attach more than one reason to an expression."},o){for(b.verbose="<p>The following reasons are attached to the expression:</p><ul>",w=0,T=v.length;T>w;w++)h=v[w],b.verbose+=h instanceof OM?"<li>Hidden: "+h.value+"</li>":"<li>Visible: "+h.contentAsText()+"</li>";b.verbose+="</ul>"}return n(b)}return h=v[0],p=h instanceof OM?h.value:h.contentAsText(),a=lookupLabel(p),0===a.length?(b={result:"invalid",message:"No rule called "+p+" is accessible here."},o&&(b.verbose=b.message),n(b)):(i=function(){var e,t,n;for(n=[],e=0,t=a.length;t>e;e++)d=a[e],n.push(d.target instanceof OM?d.target:d.target.completeForm());return n}(),f=function(){var e,t,n;for(n=[],e=0,t=i.length;t>e;e++)r=i[e],r.getAttribute(OM.sym("rule","Lurch"))&&n.push(r);return n}(),0===f.length?(b={result:"invalid",message:"The cited reason is not the name of a rule."},o&&(u=function(){var e,t,n;for(n=[],e=0,t=a.length;t>e;e++)d=a[e],d.target instanceof OM&&n.push(d);return n}().length,b.verbose='The cited reason, "'+p+'," is the name of '+u+" expressions imported from other documents, and "+(a.length-u)+" expressions in this document, accessible from the citation.  None of those expressions is a rule."),n(b)):(s=function(e){var t;if(t=e.getAttribute(OM.sym("validation","Lurch")),null==t)return!1;try{return"valid"===JSON.parse(t.value).result}catch(n){return!1}},m=function(){var e,t,n;for(n=[],e=0,t=f.length;t>e;e++)g=f[e],s(g)&&n.push(g);return n}(),0===m.length?(b={result:"invalid",message:"None of the cited rule are valid."},o&&(b.verbose="Although there are "+f.length+' rules called "'+p+'," none of them have been successfully validated.  Only a valid rule can be used to justify an expression.'),n(b)):m.length>1?(b={result:"invalid",message:"You may cite at most one valid rule."},o&&(b.verbose='The reason "'+p+'" refers to '+m.length+" valid rules.  Only one valid rule can be used at a time to justify an expression."),n(b)):(g=m[0],(l=g.getAttribute(OM.sym("code","Lurch")))?(A=l.value.toLowerCase(),t.call(function(){var t,n,o;for(o=[],t=0,n=e.length;n>t;t++)c=e[t],o.push(c.toLowerCase());return o}(),A)<0?(b={result:"invalid",message:"Code rules must be written in "+e.join("/")+"."},o&&(b.verbose="<p>The current version of Lurch supports only code-based rules written in one of the following languages.  The rule you cited is written in "+l.value+", and thus cannot be used.</p> <ul><li>"+e.join("</li><li>")+"</li></ul>"),n(b)):(y="function () { var conclusion = OM.decode( arguments[0] ); var premises = [ ]; for ( var i = 1 ; i < arguments.length ; i++ ) premises.push( OM.decode( arguments[i] ) ); "+g.value+" }",Background.addCodeTask(y,[this],function(e){return function(e){return n(null!=e?e:{result:"invalid",message:"The code in the rule did not run successfully.",verbose:"The background process in which the code was to be run returned no value, so the code has an error."})}}(this),void 0,["openmath-duo.min.js"]))):(b={result:"invalid",message:"Only code-based rules are supported."},o&&(b.verbose="The current version of Lurch supports only code-based rules.  The rule you cited is not a piece of code, and thus cannot be used."),n(b)))))}}).call(this);
//# sourceMappingURL=main-app-group-validation-solo.min.js.map