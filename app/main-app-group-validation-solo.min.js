(function(){var e=[].indexOf||function(e){for(var t=0,n=this.length;n>t;t++)if(t in this&&this[t]===e)return t;return-1};window.Group.prototype.saveValidation=function(e){var t,n,i,o;return null===e?void(this.wasValidated()&&null!=(i=this.plugin)&&i.editor.undoManager.transact(function(e){return function(){return e.clear("validation"),e.clear("closeDecoration"),e.clear("closeHoverText")}}(this))):(t="valid"===e.result?"green":"invalid"===e.result?"red":"gray",n="valid"===e.result?"&#10003;":"invalid"===e.result?"&#10006;":"...",null!=(o=this.plugin)?o.editor.undoManager.transact(function(i){return function(){return i.set("validation",e),i.set("closeDecoration","<font color='"+t+"'>"+n+"</font>"),i.set("closeHoverText",e.message)}}(this)):void 0)},window.Group.prototype.getValidation=function(){return this.get("validation")},window.Group.prototype.wasValidated=function(){return null!=this.getValidation()},window.afterEditorReadyArray.push(function(t){var n;return n=t.Groups.groupTypes.expression.contentsChanged,t.Groups.groupTypes.expression.contentsChanged=function(i,o){return n(i,o),setTimeout(function(){var n,o,r,s,a,l,u,d,h,c,v,g,f,p,m,b;if(i.validate(),"reason"===i.get("key"))for(f=i.connectionsOut(),h=0,v=f.length;v>h;h++)o=f[h],null!=(p=t.Groups[o[1]])&&p.validate();if(i.lookupAttributes("rule").length>0){if(s=window.lookupLabelsFor(i),n=t.Groups.ids(),!((u=n.indexOf(i.id()))>-1))return;for(m=n.slice(u),b=[],c=0,g=m.length;g>c;c++)r=m[c],(a=t.Groups[r])&&b.push(function(){var t,n,i,o;for(i=a.lookupAttributes("reason"),o=[],t=0,n=i.length;n>t;t++)l=i[t],d=l instanceof OM?l.value:l.contentAsText(),o.push(e.call(s,d)>=0?a.validate():void 0);return o}());return b}},0)}}),window.Group.prototype.validate=function(t){var n,i,o,r,s,a,l,u,d,h,c,v,g,f,p,m,b,y,w,T,O,V,x,A,M;if(null==t&&(t=!1),g=this.lookupAttributes("reason"),p=["JavaScript"],this.lookupAttributes("rule").length>0){if(g.length>0)return y={result:"invalid",message:"You may not attempt to justify a rule using a reason.  Rule validity is determined solely by the rule's structure."},t&&(y.verbose="Try removing all reason attributes from the rule."),this.saveValidation(y);if(l=this.lookupAttributes("code"),0===l.length)return y={result:"invalid",message:"Only code-based rules are supported at this time.  This rule does not have a code attribute."},t&&(y.verbose='<p>Try adding an attribute with key "code" and value equal to the name of the language in which the code is written.  Supported languages:</p> <ul><li>'+p.join("</li><li>")+"</li></ul>"),this.saveValidation(y);for(o=T=0,V=l.length;V>T;o=++T)a=l[o],l[o]=a instanceof OM?a.value:a.canonicalForm().value;return l.length>1?(y={result:"invalid",message:"This code-based rule has more than one language specified, which is ambiguous."},t&&(y.verbose="Too many languages specified for the rule.  Only one is permitted. You specified: "+l.join(",")+"."),this.saveValidation(y)):(A=l[0].toLowerCase(),e.call(function(){var e,t,n;for(n=[],e=0,t=p.length;t>e;e++)h=p[e],n.push(h.toLowerCase());return n}(),A)<0?(y={result:"invalid",message:"Code rules must be written in "+p.join("/")+"."},t&&(y.verbose="<p>The current version of Lurch supports only code-based rules written in one of the following languages.  The rule you cited is written in "+l[0]+", and thus cannot be used.</p> <ul><li>"+p.join("</li><li>")+"</li></ul>"),this.saveValidation(y)):this.saveValidation({result:"valid",message:"This is a valid code-based rule.",verbose:"This is a valid code-based rule."}))}if(0===g.length)return this.saveValidation(null);if(g.length>1){if(y={result:"invalid",message:"You may not attach more than one reason to an expression."},t){for(y.verbose="<p>The following reasons are attached to the expression:</p><ul>",O=0,x=g.length;x>O;O++)c=g[O],y.verbose+=c instanceof OM?"<li>Hidden: "+c.value+"</li>":"<li>Visible: "+c.contentAsText()+"</li>";y.verbose+="</ul>"}return this.saveValidation(y)}return c=g[0],v=c instanceof OM?c.value:c.contentAsText(),s=lookupLabel(v),0===s.length?(y={result:"invalid",message:"No rule called "+v+" is accessible here."},t&&(y.verbose=y.message),this.saveValidation(y)):(n=function(){var e,t,n;for(n=[],e=0,t=s.length;t>e;e++)d=s[e],n.push(d.target instanceof OM?d.target:d.target.completeForm());return n}(),m=function(){var e,t,o;for(o=[],e=0,t=n.length;t>e;e++)i=n[e],i.getAttribute(OM.sym("rule","Lurch"))&&o.push(i);return o}(),0===m.length?(y={result:"invalid",message:"The cited reason is not the name of a rule."},t&&(u=function(){var e,t,n;for(n=[],e=0,t=s.length;t>e;e++)d=s[e],d.target instanceof OM&&n.push(d);return n}().length,y.verbose='The cited reason, "'+v+'," is the name of '+u+" expressions imported from other documents, and "+(s.length-u)+" expressions in this document, accessible from the citation.  None of those expressions is a rule."),this.saveValidation(y)):(r=function(e){var t;if(t=e.getAttribute(OM.sym("validation","Lurch")),null==t)return!1;try{return"valid"===JSON.parse(t.value).result}catch(n){return!1}},b=function(){var e,t,n;for(n=[],e=0,t=m.length;t>e;e++)f=m[e],r(f)&&n.push(f);return n}(),0===b.length?(y={result:"invalid",message:"None of the cited rule are valid."},t&&(y.verbose="Although there are "+m.length+' rules called "'+v+'," none of them have been successfully validated.  Only a valid rule can be used to justify an expression.'),this.saveValidation(y)):b.length>1?(y={result:"invalid",message:"You may cite at most one valid rule."},t&&(y.verbose='The reason "'+v+'" refers to '+b.length+" valid rules.  Only one valid rule can be used at a time to justify an expression."),this.saveValidation(y)):(f=b[0],(a=f.getAttribute(OM.sym("code","Lurch")))?(M=a.value.toLowerCase(),e.call(function(){var e,t,n;for(n=[],e=0,t=p.length;t>e;e++)h=p[e],n.push(h.toLowerCase());return n}(),M)<0?(y={result:"invalid",message:"Code rules must be written in "+p.join("/")+"."},t&&(y.verbose="<p>The current version of Lurch supports only code-based rules written in one of the following languages.  The rule you cited is written in "+a.value+", and thus cannot be used.</p> <ul><li>"+p.join("</li><li>")+"</li></ul>"),this.saveValidation(y)):(w="function () { var conclusion = OM.decode( arguments[0] ); var premises = [ ]; for ( var i = 1 ; i < arguments.length ; i++ ) premises.push( OM.decode( arguments[i] ) ); "+f.value+" }",Background.addCodeTask(w,[this],function(e){return function(t){return e.saveValidation(null!=t?t:{result:"invalid",message:"The code in the rule did not run successfully.",verbose:"The background process in which the code was to be run returned no value, so the code has an error."})}}(this),void 0,["openmath-duo.min.js"]))):(y={result:"invalid",message:"Only code-based rules are supported."},t&&(y.verbose="The current version of Lurch supports only code-based rules.  The rule you cited is not a piece of code, and thus cannot be used."),this.saveValidation(y)))))}}).call(this);
//# sourceMappingURL=main-app-group-validation-solo.min.js.map