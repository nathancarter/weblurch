// Generated by CoffeeScript 1.8.0
(function() {
  var mathQuillToOpenMath,
    __slice = [].slice;

  registerCategory('Data', [
    registerCodeForm('Variable', function(group, verbose) {
      var variableRE;
      variableRE = /^[a-zA-Z_][a-zA-Z_0-9]*$/;
      if (variableRE.test(group.contentAsText())) {
        return {
          result: 'valid',
          message: 'This is a valid variable name.'
        };
      } else {
        return {
          result: 'invalid',
          message: 'This is not a valid variable name.',
          verbose: 'It must begin with a Roman letter or an underscore, and contain only Roman letters, underscores, or Arabic digits.'
        };
      }
    }), registerCodeForm('Number', function(group, verbose) {
      var numberRE;
      numberRE = /^[+-]?([0-9]+\.[0-9]*|[0-9]*\.?[0-9]+)$/;
      if (numberRE.test(group.contentAsText())) {
        return {
          result: 'valid',
          message: 'This is a valid number.'
        };
      } else {
        return {
          result: 'invalid',
          message: 'This is not a valid number.',
          verbose: 'Numbers may contain only Arabic digits and one optional decimal point, plus optionally a leading + or - sign.'
        };
      }
    }), registerCodeForm('Text', function(group, verbose) {
      if (group.children.length > 0) {
        return {
          result: 'invalid',
          message: 'Text data cannot have any inner structure.',
          verbose: 'This text data has at least one inner structure, but it should be just text.  Remove the inner structures to fix this problem.'
        };
      } else {
        return {
          result: 'valid',
          message: 'This is valid text.'
        };
      }
    })
  ]);

  registerCategory('Simple actions', [
    registerCodeForm('Store a value', ['Variable', 'Number/Text/Mathematical expression']), registerCodeForm('Pick a random integer', ['Number/Variable', 'Number/Variable']), registerCodeForm('Mathematical expression', function(group, verbose) {
      var meaning;
      meaning = mathQuillToOpenMath(group);
      if (!(meaning instanceof window.OMNode)) {
        return {
          result: 'invalid',
          message: meaning
        };
      }
      return {
        result: 'valid',
        message: 'This is a valid mathematical expression',
        openmath: meaning.encode()
      };
    })
  ]);

  registerCategory('Input/Output', [registerCodeForm('Display a value', ['Number/Variable/Text/Mathematical expression']), registerCodeForm('Request a value from the user', ['Variable/Text', 'Variable/Text'])]);

  registerCategory('Control flow', [registerCodeForm('Make a decision', ['Variable/Mathematical expression', 'Store a value/Display a value/Request a value from the user', 'Store a value/Display a value/Request a value from the user']), registerCodeForm('For each integer in a range', ['Variable', 'Number/Variable', 'Number/Variable', 'Store a value/Display a value/Make a decision'])]);

  registerTranslator('Variable', 'en', 'example', 'the variable <Variable>x</Variable>');

  registerTranslator('Number', 'en', 'example', 'the number <Number>5</Number>');

  registerTranslator('Text', 'en', 'example', 'the text <Text>Hello, World!</Text>');

  registerTranslator('Mathematical expression', 'en', 'example', 'the result of <Mathematical expression><span class="math">x^2+y^2</span></Mathematical expression>');

  registerTranslator('Store a value', 'en', 'example', '<Store a value>Let the variable <Variable>x</Variable> have the value <Number>3</Number>.</Store a value>');

  registerTranslator('Pick a random integer', 'en', 'example', '<Pick a random integer>a random integer between <Number>1</Number> and <Number>10</Number> (inclusive)</Pick a random integer>');

  registerTranslator('Display a value', 'en', 'example', '<Display a value>Display the value of <Variable>x</Variable> to the user.</Display a value>');

  registerTranslator('Request a value from the user', 'en', 'example', '<Request a value from the user>Prompt the user for the value of the variable <Variable>N</Variable>, by saying <Text>What\'s your name?</Text> and providing the default value of <Text>John</Text> (if the interface supports default values).</Request a value from the user>');

  registerTranslator('Make a decision', 'en', 'example', '<Make a decision>Check to see if <Variable>P</Variable> is true. <br>If so, do this: <Store a value>Let <Variable>x</Variable> be the number <Number>100</Number>.</Store a value> <br>If not, do this: <Store a value>Let <Variable>y</Variable> be the text <Text>Hello</Text>.</Store a value></Make a decision>');

  registerTranslator('For each integer in a range', 'en', 'example', '<For each integer in a range>Let <Variable>i</Variable> count from <Number>1</Number> to <Number>5</Number>, and each step of the way, <Display a value>show the user the value of <Mathematical expression><span class="math">\\frac{i^2}{2}</span></Mathematical expression></Display a value>.</For each integer in a range>');

  registerTranslator('Variable', 'en', 'explanation', function(group) {
    return "the value of the variable " + (group.contentAsText().trim());
  });

  registerTranslator('Number', 'en', 'explanation', function(group) {
    return "the number " + (group.contentAsText().trim());
  });

  registerTranslator('Text', 'en', 'explanation', function(group) {
    var escaped;
    escaped = group.contentAsText().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&apos;');
    return "the text <b>" + escaped + "</b>";
  });

  registerTranslator('Mathematical expression', 'en', 'explanation', function(group) {
    return "the result of " + (group.contentAsHTML());
  });

  registerTranslator('Store a value', 'en', 'explanation', 'Let __A__ be __B__.');

  registerTranslator('Pick a random integer', 'en', 'explanation', 'a random integer between __A__ and __B__ (inclusive)');

  registerTranslator('Display a value', 'en', 'explanation', 'Display __A__ to the user.');

  registerTranslator('Request a value from the user', 'en', 'explanation', 'Prompt the user for the value of __A__, providing __B__ as the default value, if the interface supports that.');

  registerTranslator('Make a decision', 'en', 'explanation', 'If __A__ is true, then do this: <ul><li>__B__</li></ul> Otherwise, do this: <ul><li>__C__</li></ul>');

  registerTranslator('For each integer in a range', 'en', 'explanation', 'While __A__ counts from __B__ to __C__ (inclusive), do: <ul><li>__D__</li></ul>');

  registerTranslator('COMMENT', 'en', 'explanation', 'Note: __A__');

  registerTranslator('Variable', 'javascript', 'code', function(group) {
    return group.contentAsText().trim();
  });

  registerTranslator('Number', 'javascript', 'code', function(group) {
    return group.contentAsText().trim();
  });

  registerTranslator('Text', 'javascript', 'code', function(group) {
    var escaped;
    escaped = group.contentAsText().replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n');
    return "\"" + escaped + "\"";
  });

  registerTranslator('Mathematical expression', 'javascript', 'code', function(group) {
    var openmath;
    openmath = window.OMNode.decode(group.get('validationResult').openmath);
    if (!(openmath instanceof window.OMNode)) {
      return "undefined /* " + openmath + " */";
    } else {
      return openmath.toJavaScript();
    }
  });

  registerTranslator('Store a value', 'javascript', 'code', '__A__ = __B__;');

  registerTranslator('Pick a random integer', 'javascript', 'code', '( Math.random() * ( __B__ - ( __A__ ) ) + __A__ ) | 0');

  registerTranslator('Display a value', 'javascript', 'code', 'alert( __A__ );');

  registerTranslator('Request a value from the user', 'javascript', 'code', 'prompt( __A__, __B__ )');

  registerTranslator('Make a decision', 'javascript', 'code', 'if ( __A__ ) {\n  __B__\n} else {\n  __C__\n}');

  registerTranslator('For each integer in a range', 'javascript', 'code', 'for ( var __A__ = __B__ ; __A__ <= __C__ ; __A__++ ) {\n  __D__\n}');

  registerTranslator('COMMENT', 'javascript', 'code', '// __A__');

  registerTranslator('Variable', 'python', 'code', function(group) {
    return group.contentAsText().trim();
  });

  registerTranslator('Number', 'python', 'code', function(group) {
    return group.contentAsText().trim();
  });

  registerTranslator('Text', 'python', 'code', function(group) {
    var escaped;
    escaped = group.contentAsText().replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n');
    return "\"" + escaped + "\"";
  });

  registerTranslator('Mathematical expression', 'python', 'code', function(group) {
    var openmath;
    openmath = window.OMNode.decode(group.get('validationResult').openmath);
    if (!(openmath instanceof window.OMNode)) {
      return 'None';
    } else {
      return openmath.toPython();
    }
  });

  registerTranslator('Store a value', 'python', 'code', '__A__ = __B__');

  registerTranslator('Pick a random integer', 'python', 'code', 'random.randint( __B__, __A__ )');

  registerTranslator('Display a value', 'python', 'code', 'print __A__');

  registerTranslator('Request a value from the user', 'python', 'code', 'raw_input( __A__ )');

  registerTranslator('Make a decision', 'python', 'code', 'if __A__:\n  __B__\nelse:\n  __C__');

  registerTranslator('For each integer in a range', 'python', 'code', 'for __A__ in range( __B__, __C__ + 1 ):\n  __D__');

  registerTranslator('COMMENT', 'python', 'code', '# __A__');

  registerTranslator('Variable', 'r', 'code', function(group) {
    return group.contentAsText().trim();
  });

  registerTranslator('Number', 'r', 'code', function(group) {
    return group.contentAsText().trim();
  });

  registerTranslator('Text', 'r', 'code', function(group) {
    var escaped;
    escaped = group.contentAsText().replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\n/g, '\\n');
    return "\"" + escaped + "\"";
  });

  registerTranslator('Mathematical expression', 'r', 'code', function(group) {
    var openmath;
    openmath = window.OMNode.decode(group.get('validationResult').openmath);
    if (!(openmath instanceof window.OMNode)) {
      return 'NULL';
    } else {
      return openmath.toR();
    }
  });

  registerTranslator('Store a value', 'r', 'code', '__A__ <- __B__');

  registerTranslator('Pick a random integer', 'r', 'code', 'sample( (__A__):(__B__), 1 )');

  registerTranslator('Display a value', 'r', 'code', 'print( __A__ )');

  registerTranslator('Request a value from the user', 'r', 'code', 'readline( __A__ )');

  registerTranslator('Make a decision', 'r', 'code', 'if ( __A__ ) {\n  __B__\n} else {\n  __C__\n}');

  registerTranslator('For each integer in a range', 'r', 'code', 'for ( __A__ in (__B__):(__C__) ) {\n  __D__\n}');

  registerTranslator('COMMENT', 'r', 'code', '# __A__');

  OM.prototype.toJavaScript = function() {
    var infix, prefix, result, special;
    special = (function(_this) {
      return function(func) {
        var child;
        return func.apply(null, (function() {
          var _i, _len, _ref, _results;
          _ref = this.children.slice(1);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(child.toJavaScript());
          }
          return _results;
        }).call(_this));
      };
    })(this);
    infix = (function(_this) {
      return function(op) {
        return special(function() {
          var code;
          code = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return code.join(op);
        });
      };
    })(this);
    prefix = (function(_this) {
      return function(op) {
        return special(function() {
          var code;
          code = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return "" + op + "(" + (code.join(',')) + ")";
        });
      };
    })(this);
    result = (function() {
      switch (this.type) {
        case 'i':
        case 'f':
        case 'st':
        case 'ba':
          return "" + this.value;
        case 'v':
          switch (this.name) {
            case '\u03c0':
              return 'Math.PI';
            case 'e':
              return 'Math.exp(1)';
            default:
              return this.name;
          }
          break;
        case 'sy':
          switch (this.simpleEncode()) {
            case 'units.degrees':
              return '(Math.PI/180)';
            case 'units.percent':
              return '0.01';
            case 'units.dollars':
              return '1';
          }
          break;
        case 'a':
          switch (this.children[0].simpleEncode()) {
            case 'arith1.plus':
              return infix('+');
            case 'arith1.minus':
              return infix('-');
            case 'arith1.times':
              return infix('*');
            case 'arith1.divide':
              return infix('/');
            case 'arith1.power':
              return prefix('Math.pow');
            case 'arith1.root':
              return special(function(a, b) {
                return "Math.pow(" + b + ",1/(" + a + "))";
              });
            case 'arith1.abs':
              return prefix('Math.abs');
            case 'arith1.unary_minus':
              return prefix('-');
            case 'relation1.eq':
              return infix('==');
            case 'relation1.approx':
              return special(function(a, b) {
                return "(Math.abs((" + a + ")-(" + b + "))<0.01)";
              });
            case 'relation1.neq':
              return infix('!=');
            case 'relation1.lt':
              return infix('<');
            case 'relation1.gt':
              return infix('>');
            case 'relation1.le':
              return infix('<=');
            case 'relation1.ge':
              return infix('>=');
            case 'logic1.not':
              return prefix('!');
            case 'transc1.sin':
              return prefix('Math.sin');
            case 'transc1.cos':
              return prefix('Math.cos');
            case 'transc1.tan':
              return prefix('Math.tan');
            case 'transc1.cot':
              return special(function(x) {
                return "(1/Math.tan(" + x + "))";
              });
            case 'transc1.sec':
              return special(function(x) {
                return "(1/Math.cos(" + x + "))";
              });
            case 'transc1.csc':
              return special(function(x) {
                return "(1/Math.sin(" + x + "))";
              });
            case 'transc1.arcsin':
              return prefix('Math.asin');
            case 'transc1.arccos':
              return prefix('Math.acos');
            case 'transc1.arctan':
              return prefix('Math.atan');
            case 'transc1.arccot':
              return special(function(x) {
                return "Math.atan(1/(" + x + "))";
              });
            case 'transc1.arcsec':
              return special(function(x) {
                return "Math.acos(1/(" + x + "))";
              });
            case 'transc1.arccsc':
              return special(function(x) {
                return "Math.asin(1/(" + x + "))";
              });
            case 'transc1.ln':
              return prefix('Math.log');
            case 'transc1.log':
              return special(function(x) {
                return "(Math.log(" + arg + ")/Math.log(" + base + "))";
              });
          }
      }
    }).call(this);
    return result != null ? result : "undefined /* Could not evaluate " + (this.simpleEncode()) + " */";
  };

  OM.prototype.toPython = function() {
    var infix, prefix, result, special;
    special = (function(_this) {
      return function(func) {
        var child;
        return func.apply(null, (function() {
          var _i, _len, _ref, _results;
          _ref = this.children.slice(1);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(child.toPython());
          }
          return _results;
        }).call(_this));
      };
    })(this);
    infix = (function(_this) {
      return function(op) {
        return special(function() {
          var code;
          code = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return code.join(op);
        });
      };
    })(this);
    prefix = (function(_this) {
      return function(op) {
        return special(function() {
          var code;
          code = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return "" + op + "(" + (code.join(',')) + ")";
        });
      };
    })(this);
    result = (function() {
      switch (this.type) {
        case 'i':
        case 'f':
        case 'st':
        case 'ba':
          return "" + this.value;
        case 'v':
          switch (this.name) {
            case '\u03c0':
              return 'math.pi';
            case 'e':
              return 'math.exp(1)';
            default:
              return this.name;
          }
          break;
        case 'sy':
          switch (this.simpleEncode()) {
            case 'units.degrees':
              return '(math.pi/180)';
            case 'units.percent':
              return '0.01';
            case 'units.dollars':
              return '1';
          }
          break;
        case 'a':
          switch (this.children[0].simpleEncode()) {
            case 'arith1.plus':
              return infix('+');
            case 'arith1.minus':
              return infix('-');
            case 'arith1.times':
              return infix('*');
            case 'arith1.divide':
              return infix('/');
            case 'arith1.power':
              return infix('**');
            case 'arith1.root':
              return special(function(a, b) {
                return "" + b + "**(1/(" + a + "))";
              });
            case 'arith1.abs':
              return prefix('math.fabs');
            case 'arith1.unary_minus':
              return prefix('-');
            case 'relation1.eq':
              return infix('==');
            case 'relation1.approx':
              return special(function(a, b) {
                return "(math.fabs((" + a + ")-(" + b + "))<0.01)";
              });
            case 'relation1.neq':
              return infix('!=');
            case 'relation1.lt':
              return infix('<');
            case 'relation1.gt':
              return infix('>');
            case 'relation1.le':
              return infix('<=');
            case 'relation1.ge':
              return infix('>=');
            case 'logic1.not':
              return prefix('not');
            case 'transc1.sin':
              return prefix('math.sin');
            case 'transc1.cos':
              return prefix('math.cos');
            case 'transc1.tan':
              return prefix('math.tan');
            case 'transc1.cot':
              return special(function(x) {
                return "(1/math.tan(" + x + "))";
              });
            case 'transc1.sec':
              return special(function(x) {
                return "(1/math.cos(" + x + "))";
              });
            case 'transc1.csc':
              return special(function(x) {
                return "(1/math.sin(" + x + "))";
              });
            case 'transc1.arcsin':
              return prefix('math.asin');
            case 'transc1.arccos':
              return prefix('math.acos');
            case 'transc1.arctan':
              return prefix('math.atan');
            case 'transc1.arccot':
              return special(function(x) {
                return "math.atan(1/(" + x + "))";
              });
            case 'transc1.arcsec':
              return special(function(x) {
                return "math.acos(1/(" + x + "))";
              });
            case 'transc1.arccsc':
              return special(function(x) {
                return "math.asin(1/(" + x + "))";
              });
            case 'transc1.ln':
            case 'transc1.log':
              return prefix('math.log');
          }
      }
    }).call(this);
    return result != null ? result : 'None';
  };

  OM.prototype.toR = function() {
    var infix, prefix, result, special;
    special = (function(_this) {
      return function(func) {
        var child;
        return func.apply(null, (function() {
          var _i, _len, _ref, _results;
          _ref = this.children.slice(1);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            _results.push(child.toR());
          }
          return _results;
        }).call(_this));
      };
    })(this);
    infix = (function(_this) {
      return function(op) {
        return special(function() {
          var code;
          code = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return code.join(op);
        });
      };
    })(this);
    prefix = (function(_this) {
      return function(op) {
        return special(function() {
          var code;
          code = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return "" + op + "(" + (code.join(',')) + ")";
        });
      };
    })(this);
    result = (function() {
      switch (this.type) {
        case 'i':
        case 'f':
        case 'st':
        case 'ba':
          return "" + this.value;
        case 'v':
          switch (this.name) {
            case '\u03c0':
              return 'pi';
            case 'e':
              return 'exp(1)';
            default:
              return this.name;
          }
          break;
        case 'sy':
          switch (this.simpleEncode()) {
            case 'units.degrees':
              return '(pi/180)';
            case 'units.percent':
              return '0.01';
            case 'units.dollars':
              return '1';
          }
          break;
        case 'a':
          switch (this.children[0].simpleEncode()) {
            case 'arith1.plus':
              return infix('+');
            case 'arith1.minus':
              return infix('-');
            case 'arith1.times':
              return infix('*');
            case 'arith1.divide':
              return infix('/');
            case 'arith1.power':
              return infix('^');
            case 'arith1.root':
              return special(function(a, b) {
                return "(" + b + ")^(1/(" + a + "))";
              });
            case 'arith1.abs':
              return prefix('abs');
            case 'arith1.unary_minus':
              return prefix('-');
            case 'relation1.eq':
              return infix('==');
            case 'relation1.approx':
              return special(function(a, b) {
                return "(abs((" + a + ")-(" + b + "))<0.01)";
              });
            case 'relation1.neq':
              return infix('!=');
            case 'relation1.lt':
              return infix('<');
            case 'relation1.gt':
              return infix('>');
            case 'relation1.le':
              return infix('<=');
            case 'relation1.ge':
              return infix('>=');
            case 'logic1.not':
              return prefix('!');
            case 'transc1.sin':
              return prefix('sin');
            case 'transc1.cos':
              return prefix('cos');
            case 'transc1.tan':
              return prefix('tan');
            case 'transc1.cot':
              return special(function(x) {
                return "(1/tan(" + x + "))";
              });
            case 'transc1.sec':
              return special(function(x) {
                return "(1/cos(" + x + "))";
              });
            case 'transc1.csc':
              return special(function(x) {
                return "(1/sin(" + x + "))";
              });
            case 'transc1.arcsin':
              return prefix('asin');
            case 'transc1.arccos':
              return prefix('acos');
            case 'transc1.arctan':
              return prefix('atan');
            case 'transc1.arccot':
              return special(function(x) {
                return "atan(1/(" + x + "))";
              });
            case 'transc1.arcsec':
              return special(function(x) {
                return "acos(1/(" + x + "))";
              });
            case 'transc1.arccsc':
              return special(function(x) {
                return "asin(1/(" + x + "))";
              });
            case 'transc1.ln':
            case 'transc1.log':
              return prefix('log');
          }
      }
    }).call(this);
    return result != null ? result : 'NULL';
  };

  mathQuillToOpenMath = function(group) {
    var e, nodes, parsed, selector, toParse, _ref;
    nodes = $(group.contentNodes());
    selector = '.mathquill-rendered-math';
    nodes = nodes.find(selector).add(nodes.filter(selector));
    if (nodes.length === 0) {
      return 'No math expresion found';
    }
    if (nodes.length > 1) {
      return 'Too many math expressions found';
    }
    try {
      toParse = window.mathQuillToMeaning(nodes.get(0));
    } catch (_error) {
      e = _error;
      return "Error reading math expression to text: " + (e != null ? e.message : void 0);
    }
    try {
      parsed = (_ref = mathQuillParser.parse(toParse)) != null ? _ref[0] : void 0;
    } catch (_error) {
      e = _error;
      return "Error interpreting math expression: " + (e != null ? e.message : void 0);
    }
    if (parsed instanceof window.OMNode) {
      return parsed;
    }
    return "Could not parse this mathematical text: " + (toParse != null ? typeof toParse.join === "function" ? toParse.join(' ') : void 0 : void 0) + " -- Error: " + parsed;
  };

}).call(this);

//# sourceMappingURL=sidebar-example-defs-solo.js.map
