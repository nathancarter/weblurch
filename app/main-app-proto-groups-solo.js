// Generated by CoffeeScript 1.8.0
(function() {
  var ProtoGroup;

  window.ProtoGroup = ProtoGroup = (function() {
    function ProtoGroup(range, groupType) {
      this.range = range;
      this.groupType = groupType;
      this.open = this.range.startContainer;
      while ((this.open != null) && (this.open.tagName == null)) {
        this.open = this.open.parentNode;
      }
    }

    ProtoGroup.prototype.type = function() {
      return this.groupType;
    };

    ProtoGroup.prototype.getScreenBoundaries = function() {
      var close, i, index, onSameLine, open, rect, rects, _i, _len;
      if (!(rects = this.range.getClientRects())) {
        return null;
      }
      if (rects.length === 0) {
        return null;
      }
      rects = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = rects.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(rects[i]);
        }
        return _results;
      })();
      open = rects[0];
      open = {
        top: open.top,
        left: open.left,
        right: open.right,
        bottom: open.bottom
      };
      close = rects[rects.length - 1];
      close = {
        top: close.top,
        left: close.left,
        right: close.right,
        bottom: close.bottom
      };
      onSameLine = true;
      for (index = _i = 0, _len = rects.length; _i < _len; index = ++_i) {
        rect = rects[index];
        open.top = Math.min(open.top, rect.top);
        close.bottom = Math.max(close.bottom, rect.bottom);
        if (rect.left < open.left) {
          onSameLine = false;
        }
        if (rect.top > open.bottom) {
          onSameLine = false;
        }
      }
      if (onSameLine) {
        close.top = open.top;
        open.bottom = close.bottom;
      }
      return {
        open: open,
        close: close
      };
    };

    ProtoGroup.prototype.promote = function() {
      var connection, editor, from, newGroup, range, to, _i, _len, _ref, _ref1, _ref2;
      editor = tinymce.activeEditor;
      editor.selection.setRng(this.range);
      if (newGroup = editor.Groups.groupCurrentSelection(this.type().name)) {
        if (this.isAReason) {
          newGroup.set('key', 'reason');
          newGroup.set('keyposition', 'source');
        }
        _ref1 = (_ref = this.connections) != null ? _ref : [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          connection = _ref1[_i];
          if (connection instanceof Array) {
            from = connection[0], to = connection[1];
            if (from === this) {
              from = newGroup;
            } else if (!(from instanceof Group)) {
              from = editor.Groups[from];
            }
            if (to === this) {
              to = newGroup;
            } else if (!(to instanceof Group)) {
              to = editor.Groups[to];
            }
            if (from != null) {
              if (typeof from.connect === "function") {
                from.connect(to, (_ref2 = connection[2]) != null ? _ref2 : '');
              }
            }
          }
        }
        this.promotedTo = newGroup;
        this.constructor.lastPromoted = this;
        range = newGroup.outerRange();
        range.collapse(false);
        editor.selection.setRng(range);
      }
      return editor.fire('NodeChange');
    };

    ProtoGroup.lastPromoted = null;

    return ProtoGroup;

  })();

  window.afterEditorReadyArray.push(function(editor) {
    window.allRangesNearCursor = function(length) {
      var copy, cursor, i, _i, _results;
      cursor = editor.selection.getRng().cloneRange();
      cursor.collapse(true);
      _results = [];
      for (i = _i = 0; 0 <= length ? _i <= length : _i >= length; i = 0 <= length ? ++_i : --_i) {
        copy = cursor.cloneRange();
        if (i > 0 && !copy.extendByCharacters(i)) {
          continue;
        }
        if (i < length && !copy.extendByCharacters(-(length - i))) {
          continue;
        }
        _results.push(copy);
      }
      return _results;
    };
    return window.allPhrasesNearCursor = function(length) {
      var copy, cursor, i, _i, _results;
      cursor = editor.selection.getRng().cloneRange();
      cursor.collapse(true);
      cursor.includeWholeWords();
      if (cursor.toString().length > 0) {
        length--;
      }
      _results = [];
      for (i = _i = 0; 0 <= length ? _i <= length : _i >= length; i = 0 <= length ? ++_i : --_i) {
        copy = cursor.cloneRange();
        if (i > 0 && !copy.extendByWords(i)) {
          continue;
        }
        if (i < length && !copy.extendByWords(-(length - i))) {
          continue;
        }
        _results.push(copy);
      }
      return _results;
    };
  });

}).call(this);

//# sourceMappingURL=main-app-proto-groups-solo.js.map
