// Generated by CoffeeScript 1.8.0
(function() {
  var __slice = [].slice;

  window.groupTypes = [
    {
      name: 'expression',
      text: 'Expression',
      imageHTML: '<font color="#996666">[ ]</font>',
      openImageHTML: '<font color="#996666">[</font>',
      closeImageHTML: '<font color="#996666">]</font>',
      tooltip: 'Make the selected text an expression',
      color: '#996666',
      shortcut: 'Ctrl+[',
      LaTeXshortcut: '\\[',
      connectionRequest: function(from, to) {
        var reachable;
        reachable = function(source, target) {
          var c, next, _i, _len, _ref;
          if (source === target) {
            return true;
          }
          _ref = source.connectionsOut();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            c = _ref[_i];
            next = tinymce.activeEditor.Groups[c[1]];
            if (reachable(next, target)) {
              return true;
            }
          }
          return false;
        };
        if (reachable(to, from)) {
          return alert('Forming that connection would create a cycle, which is not permitted.');
        } else {
          return tinymce.activeEditor.undoManager.transact(function() {
            from.connect(to);
            if (!from.get('key')) {
              from.set('key', 'label');
            }
            if (!from.get('keyposition')) {
              return from.set('keyposition', 'arrow');
            }
          });
        }
      },
      connections: function(group) {
        var cxn, ins, outs, source, t, _i, _len, _ref;
        outs = group.connectionsOut();
        ins = group.connectionsIn();
        _ref = __slice.call(ins).concat(__slice.call(outs));
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cxn = _ref[_i];
          source = tinymce.activeEditor.Groups[cxn[0]];
          if (source.get('keyposition') === 'arrow') {
            cxn[2] = source.get('key');
          }
          if (source.get('key') === 'premise') {
            cxn[3] = function(context) {
              return context.setLineDash([3, 3]);
            };
          }
        }
        return __slice.call(outs).concat(__slice.call(ins), __slice.call((function() {
            var _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = outs.length; _j < _len1; _j++) {
              t = outs[_j];
              _results.push(t[1]);
            }
            return _results;
          })()), __slice.call((function() {
            var _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = ins.length; _j < _len1; _j++) {
              t = ins[_j];
              _results.push(t[0]);
            }
            return _results;
          })()));
      },
      tagContents: function(group) {
        if (group.get('keyposition') === 'source') {
          return group.get('key');
        } else {
          return null;
        }
      },
      tagMenuItems: function(group) {
        var result;
        result = [];
        if (group.get('keyposition') === 'source') {
          result.push({
            text: "Move \"" + (group.get('key')) + "\" onto arrow",
            onclick: function() {
              return tinymce.activeEditor.undoManager.transact(function() {
                return group.set('keyposition', 'arrow');
              });
            }
          });
        }
        return result;
      },
      contextMenuItems: function(group) {
        var result;
        result = [];
        if (group.get('keyposition') === 'arrow') {
          result.push({
            text: "Move \"" + (group.get('key')) + "\" onto attribute",
            onclick: function() {
              return tinymce.activeEditor.undoManager.transact(function() {
                return group.set('keyposition', 'source');
              });
            }
          });
        }
        result.push({
          text: 'Change attribute key to...',
          menu: [
            {
              text: 'Label',
              onclick: function() {
                return tinymce.activeEditor.undoManager.transact(function() {
                  return group.set('key', 'label');
                });
              }
            }, {
              text: 'Reason',
              onclick: function() {
                return tinymce.activeEditor.undoManager.transact(function() {
                  return group.set('key', 'reason');
                });
              }
            }, {
              text: 'Premise',
              onclick: function() {
                return tinymce.activeEditor.undoManager.transact(function() {
                  return group.set('key', 'premise');
                });
              }
            }, {
              text: 'Other...',
              onclick: function() {
                var newKey;
                newKey = prompt('Choose a new key:', group.get('key'));
                if (newKey) {
                  return tinymce.activeEditor.undoManager.transact(function() {
                    return group.set('key', newKey);
                  });
                }
              }
            }
          ]
        });
        return result;
      }
    }
  ];

}).call(this);

//# sourceMappingURL=main-app-groups-solo.js.map
